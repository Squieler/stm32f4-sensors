
sdKartRapor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08005a38  08005a38  00015a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef4  08005ef4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005efc  08005efc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005efc  08005efc  00015efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08005f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002324  20000024  08005f28  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002348  08005f28  00022348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e051  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020b9  00000000  00000000  0002e0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  00030160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  00030b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001704b  00000000  00000000  000313f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7f7  00000000  00000000  00048443  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008651a  00000000  00000000  00052c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002684  00000000  00000000  000d91d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005a20 	.word	0x08005a20

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	08005a20 	.word	0x08005a20

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2104      	movs	r1, #4
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <SELECT+0x18>)
 80004e2:	f001 f9f1 	bl	80018c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 ff64 	bl	80013b4 <HAL_Delay>
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40020400 	.word	0x40020400

080004f4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2104      	movs	r1, #4
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <DESELECT+0x18>)
 80004fe:	f001 f9e3 	bl	80018c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000502:	2001      	movs	r0, #1
 8000504:	f000 ff56 	bl	80013b4 <HAL_Delay>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40020400 	.word	0x40020400

08000510 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800051a:	bf00      	nop
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <SPI_TxByte+0x30>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	2b02      	cmp	r3, #2
 8000528:	d1f8      	bne.n	800051c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800052a:	1df9      	adds	r1, r7, #7
 800052c:	2364      	movs	r3, #100	; 0x64
 800052e:	2201      	movs	r2, #1
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <SPI_TxByte+0x30>)
 8000532:	f001 fe75 	bl	8002220 <HAL_SPI_Transmit>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000027c 	.word	0x2000027c

08000544 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000550:	bf00      	nop
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <SPI_TxBuffer+0x30>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	f003 0302 	and.w	r3, r3, #2
 800055c:	2b02      	cmp	r3, #2
 800055e:	d1f8      	bne.n	8000552 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000560:	887a      	ldrh	r2, [r7, #2]
 8000562:	2364      	movs	r3, #100	; 0x64
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	4803      	ldr	r0, [pc, #12]	; (8000574 <SPI_TxBuffer+0x30>)
 8000568:	f001 fe5a 	bl	8002220 <HAL_SPI_Transmit>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000027c 	.word	0x2000027c

08000578 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800057e:	23ff      	movs	r3, #255	; 0xff
 8000580:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000582:	bf00      	nop
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <SPI_RxByte+0x34>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	2b02      	cmp	r3, #2
 8000590:	d1f8      	bne.n	8000584 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000592:	1dba      	adds	r2, r7, #6
 8000594:	1df9      	adds	r1, r7, #7
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2301      	movs	r3, #1
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <SPI_RxByte+0x34>)
 800059e:	f001 ff73 	bl	8002488 <HAL_SPI_TransmitReceive>

	return data;
 80005a2:	79bb      	ldrb	r3, [r7, #6]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000027c 	.word	0x2000027c

080005b0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005b8:	f7ff ffde 	bl	8000578 <SPI_RxByte>
 80005bc:	4603      	mov	r3, r0
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	701a      	strb	r2, [r3, #0]
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <SD_ReadyWait+0x30>)
 80005d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005da:	f7ff ffcd 	bl	8000578 <SPI_RxByte>
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2bff      	cmp	r3, #255	; 0xff
 80005e6:	d003      	beq.n	80005f0 <SD_ReadyWait+0x24>
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <SD_ReadyWait+0x30>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f4      	bne.n	80005da <SD_ReadyWait+0xe>

	return res;
 80005f0:	79fb      	ldrb	r3, [r7, #7]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000278 	.word	0x20000278

08000600 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000606:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800060a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800060c:	f7ff ff72 	bl	80004f4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	e005      	b.n	8000622 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000616:	20ff      	movs	r0, #255	; 0xff
 8000618:	f7ff ff7a 	bl	8000510 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	3301      	adds	r3, #1
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	2b09      	cmp	r3, #9
 8000626:	ddf6      	ble.n	8000616 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000628:	f7ff ff56 	bl	80004d8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800062c:	2340      	movs	r3, #64	; 0x40
 800062e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000640:	2395      	movs	r3, #149	; 0x95
 8000642:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000644:	463b      	mov	r3, r7
 8000646:	2106      	movs	r1, #6
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff7b 	bl	8000544 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800064e:	e002      	b.n	8000656 <SD_PowerOn+0x56>
	{
		cnt--;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	3b01      	subs	r3, #1
 8000654:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000656:	f7ff ff8f 	bl	8000578 <SPI_RxByte>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d002      	beq.n	8000666 <SD_PowerOn+0x66>
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1f4      	bne.n	8000650 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000666:	f7ff ff45 	bl	80004f4 <DESELECT>
	SPI_TxByte(0XFF);
 800066a:	20ff      	movs	r0, #255	; 0xff
 800066c:	f7ff ff50 	bl	8000510 <SPI_TxByte>

	PowerFlag = 1;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <SD_PowerOn+0x80>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000041 	.word	0x20000041

08000684 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <SD_PowerOff+0x14>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000041 	.word	0x20000041

0800069c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <SD_CheckPower+0x14>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000041 	.word	0x20000041

080006b4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <SD_RxDataBlock+0x58>)
 80006c0:	22c8      	movs	r2, #200	; 0xc8
 80006c2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006c4:	f7ff ff58 	bl	8000578 <SPI_RxByte>
 80006c8:	4603      	mov	r3, r0
 80006ca:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	2bff      	cmp	r3, #255	; 0xff
 80006d0:	d103      	bne.n	80006da <SD_RxDataBlock+0x26>
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <SD_RxDataBlock+0x58>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f4      	bne.n	80006c4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	2bfe      	cmp	r3, #254	; 0xfe
 80006de:	d001      	beq.n	80006e4 <SD_RxDataBlock+0x30>
 80006e0:	2300      	movs	r3, #0
 80006e2:	e00f      	b.n	8000704 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	607a      	str	r2, [r7, #4]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff60 	bl	80005b0 <SPI_RxBytePtr>
	} while(len--);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	1e5a      	subs	r2, r3, #1
 80006f4:	603a      	str	r2, [r7, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1f4      	bne.n	80006e4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80006fa:	f7ff ff3d 	bl	8000578 <SPI_RxByte>
	SPI_RxByte();
 80006fe:	f7ff ff3b 	bl	8000578 <SPI_RxByte>

	return TRUE;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000027a 	.word	0x2000027a

08000710 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000720:	f7ff ff54 	bl	80005cc <SD_ReadyWait>
 8000724:	4603      	mov	r3, r0
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d001      	beq.n	800072e <SD_TxDataBlock+0x1e>
 800072a:	2300      	movs	r3, #0
 800072c:	e02f      	b.n	800078e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff feed 	bl	8000510 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	2bfd      	cmp	r3, #253	; 0xfd
 800073a:	d020      	beq.n	800077e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800073c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff feff 	bl	8000544 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000746:	f7ff ff17 	bl	8000578 <SPI_RxByte>
		SPI_RxByte();
 800074a:	f7ff ff15 	bl	8000578 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800074e:	e00b      	b.n	8000768 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000750:	f7ff ff12 	bl	8000578 <SPI_RxByte>
 8000754:	4603      	mov	r3, r0
 8000756:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	f003 031f 	and.w	r3, r3, #31
 800075e:	2b05      	cmp	r3, #5
 8000760:	d006      	beq.n	8000770 <SD_TxDataBlock+0x60>
			i++;
 8000762:	7bbb      	ldrb	r3, [r7, #14]
 8000764:	3301      	adds	r3, #1
 8000766:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	2b40      	cmp	r3, #64	; 0x40
 800076c:	d9f0      	bls.n	8000750 <SD_TxDataBlock+0x40>
 800076e:	e000      	b.n	8000772 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000770:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000772:	bf00      	nop
 8000774:	f7ff ff00 	bl	8000578 <SPI_RxByte>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0fa      	beq.n	8000774 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	2b05      	cmp	r3, #5
 8000786:	d101      	bne.n	800078c <SD_TxDataBlock+0x7c>
 8000788:	2301      	movs	r3, #1
 800078a:	e000      	b.n	800078e <SD_TxDataBlock+0x7e>

	return FALSE;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	6039      	str	r1, [r7, #0]
 80007a0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007a2:	f7ff ff13 	bl	80005cc <SD_ReadyWait>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2bff      	cmp	r3, #255	; 0xff
 80007aa:	d001      	beq.n	80007b0 <SD_SendCmd+0x1a>
 80007ac:	23ff      	movs	r3, #255	; 0xff
 80007ae:	e042      	b.n	8000836 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff feac 	bl	8000510 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	0e1b      	lsrs	r3, r3, #24
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fea6 	bl	8000510 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	0c1b      	lsrs	r3, r3, #16
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fea0 	bl	8000510 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	0a1b      	lsrs	r3, r3, #8
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fe9a 	bl	8000510 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fe95 	bl	8000510 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b40      	cmp	r3, #64	; 0x40
 80007ea:	d102      	bne.n	80007f2 <SD_SendCmd+0x5c>
 80007ec:	2395      	movs	r3, #149	; 0x95
 80007ee:	73fb      	strb	r3, [r7, #15]
 80007f0:	e007      	b.n	8000802 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b48      	cmp	r3, #72	; 0x48
 80007f6:	d102      	bne.n	80007fe <SD_SendCmd+0x68>
 80007f8:	2387      	movs	r3, #135	; 0x87
 80007fa:	73fb      	strb	r3, [r7, #15]
 80007fc:	e001      	b.n	8000802 <SD_SendCmd+0x6c>
	else crc = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fe83 	bl	8000510 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b4c      	cmp	r3, #76	; 0x4c
 800080e:	d101      	bne.n	8000814 <SD_SendCmd+0x7e>
 8000810:	f7ff feb2 	bl	8000578 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000814:	230a      	movs	r3, #10
 8000816:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000818:	f7ff feae 	bl	8000578 <SPI_RxByte>
 800081c:	4603      	mov	r3, r0
 800081e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000820:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000824:	2b00      	cmp	r3, #0
 8000826:	da05      	bge.n	8000834 <SD_SendCmd+0x9e>
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	3b01      	subs	r3, #1
 800082c:	73bb      	strb	r3, [r7, #14]
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1f1      	bne.n	8000818 <SD_SendCmd+0x82>

	return res;
 8000834:	7b7b      	ldrb	r3, [r7, #13]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SD_disk_initialize+0x14>
 8000850:	2301      	movs	r3, #1
 8000852:	e0d1      	b.n	80009f8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000854:	4b6a      	ldr	r3, [pc, #424]	; (8000a00 <SD_disk_initialize+0x1c0>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	2b00      	cmp	r3, #0
 8000860:	d003      	beq.n	800086a <SD_disk_initialize+0x2a>
 8000862:	4b67      	ldr	r3, [pc, #412]	; (8000a00 <SD_disk_initialize+0x1c0>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	e0c6      	b.n	80009f8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800086a:	f7ff fec9 	bl	8000600 <SD_PowerOn>

	/* slave select */
	SELECT();
 800086e:	f7ff fe33 	bl	80004d8 <SELECT>

	/* check disk type */
	type = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000876:	2100      	movs	r1, #0
 8000878:	2040      	movs	r0, #64	; 0x40
 800087a:	f7ff ff8c 	bl	8000796 <SD_SendCmd>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	f040 80a1 	bne.w	80009c8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000886:	4b5f      	ldr	r3, [pc, #380]	; (8000a04 <SD_disk_initialize+0x1c4>)
 8000888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800088c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800088e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000892:	2048      	movs	r0, #72	; 0x48
 8000894:	f7ff ff7f 	bl	8000796 <SD_SendCmd>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d155      	bne.n	800094a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e00c      	b.n	80008be <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008a4:	7bfc      	ldrb	r4, [r7, #15]
 80008a6:	f7ff fe67 	bl	8000578 <SPI_RxByte>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	4423      	add	r3, r4
 80008b4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	3301      	adds	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d9ef      	bls.n	80008a4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008c4:	7abb      	ldrb	r3, [r7, #10]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d17e      	bne.n	80009c8 <SD_disk_initialize+0x188>
 80008ca:	7afb      	ldrb	r3, [r7, #11]
 80008cc:	2baa      	cmp	r3, #170	; 0xaa
 80008ce:	d17b      	bne.n	80009c8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008d0:	2100      	movs	r1, #0
 80008d2:	2077      	movs	r0, #119	; 0x77
 80008d4:	f7ff ff5f 	bl	8000796 <SD_SendCmd>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d807      	bhi.n	80008ee <SD_disk_initialize+0xae>
 80008de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008e2:	2069      	movs	r0, #105	; 0x69
 80008e4:	f7ff ff57 	bl	8000796 <SD_SendCmd>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d004      	beq.n	80008f8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80008ee:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <SD_disk_initialize+0x1c4>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1ec      	bne.n	80008d0 <SD_disk_initialize+0x90>
 80008f6:	e000      	b.n	80008fa <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008fa:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <SD_disk_initialize+0x1c4>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d062      	beq.n	80009c8 <SD_disk_initialize+0x188>
 8000902:	2100      	movs	r1, #0
 8000904:	207a      	movs	r0, #122	; 0x7a
 8000906:	f7ff ff46 	bl	8000796 <SD_SendCmd>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d15b      	bne.n	80009c8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	e00c      	b.n	8000930 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000916:	7bfc      	ldrb	r4, [r7, #15]
 8000918:	f7ff fe2e 	bl	8000578 <SPI_RxByte>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4423      	add	r3, r4
 8000926:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3301      	adds	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d9ef      	bls.n	8000916 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000936:	7a3b      	ldrb	r3, [r7, #8]
 8000938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SD_disk_initialize+0x104>
 8000940:	230c      	movs	r3, #12
 8000942:	e000      	b.n	8000946 <SD_disk_initialize+0x106>
 8000944:	2304      	movs	r3, #4
 8000946:	73bb      	strb	r3, [r7, #14]
 8000948:	e03e      	b.n	80009c8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800094a:	2100      	movs	r1, #0
 800094c:	2077      	movs	r0, #119	; 0x77
 800094e:	f7ff ff22 	bl	8000796 <SD_SendCmd>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d808      	bhi.n	800096a <SD_disk_initialize+0x12a>
 8000958:	2100      	movs	r1, #0
 800095a:	2069      	movs	r0, #105	; 0x69
 800095c:	f7ff ff1b 	bl	8000796 <SD_SendCmd>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d801      	bhi.n	800096a <SD_disk_initialize+0x12a>
 8000966:	2302      	movs	r3, #2
 8000968:	e000      	b.n	800096c <SD_disk_initialize+0x12c>
 800096a:	2301      	movs	r3, #1
 800096c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d10e      	bne.n	8000992 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000974:	2100      	movs	r1, #0
 8000976:	2077      	movs	r0, #119	; 0x77
 8000978:	f7ff ff0d 	bl	8000796 <SD_SendCmd>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d80e      	bhi.n	80009a0 <SD_disk_initialize+0x160>
 8000982:	2100      	movs	r1, #0
 8000984:	2069      	movs	r0, #105	; 0x69
 8000986:	f7ff ff06 	bl	8000796 <SD_SendCmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d107      	bne.n	80009a0 <SD_disk_initialize+0x160>
 8000990:	e00c      	b.n	80009ac <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000992:	2100      	movs	r1, #0
 8000994:	2041      	movs	r0, #65	; 0x41
 8000996:	f7ff fefe 	bl	8000796 <SD_SendCmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d004      	beq.n	80009aa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <SD_disk_initialize+0x1c4>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1e2      	bne.n	800096e <SD_disk_initialize+0x12e>
 80009a8:	e000      	b.n	80009ac <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009aa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <SD_disk_initialize+0x1c4>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d007      	beq.n	80009c4 <SD_disk_initialize+0x184>
 80009b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b8:	2050      	movs	r0, #80	; 0x50
 80009ba:	f7ff feec 	bl	8000796 <SD_SendCmd>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SD_disk_initialize+0x188>
 80009c4:	2300      	movs	r3, #0
 80009c6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009c8:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <SD_disk_initialize+0x1c8>)
 80009ca:	7bbb      	ldrb	r3, [r7, #14]
 80009cc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009ce:	f7ff fd91 	bl	80004f4 <DESELECT>
	SPI_RxByte();
 80009d2:	f7ff fdd1 	bl	8000578 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009d6:	7bbb      	ldrb	r3, [r7, #14]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d008      	beq.n	80009ee <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <SD_disk_initialize+0x1c0>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f023 0301 	bic.w	r3, r3, #1
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <SD_disk_initialize+0x1c0>)
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	e001      	b.n	80009f2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009ee:	f7ff fe49 	bl	8000684 <SD_PowerOff>
	}

	return Stat;
 80009f2:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <SD_disk_initialize+0x1c0>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	20000000 	.word	0x20000000
 8000a04:	2000027a 	.word	0x2000027a
 8000a08:	20000040 	.word	0x20000040

08000a0c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SD_disk_status+0x14>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e002      	b.n	8000a26 <SD_disk_status+0x1a>
	return Stat;
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SD_disk_status+0x28>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000000 	.word	0x20000000

08000a38 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	4603      	mov	r3, r0
 8000a46:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d102      	bne.n	8000a54 <SD_disk_read+0x1c>
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d101      	bne.n	8000a58 <SD_disk_read+0x20>
 8000a54:	2304      	movs	r3, #4
 8000a56:	e051      	b.n	8000afc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <SD_disk_read+0xcc>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SD_disk_read+0x32>
 8000a66:	2303      	movs	r3, #3
 8000a68:	e048      	b.n	8000afc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <SD_disk_read+0xd0>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d102      	bne.n	8000a7c <SD_disk_read+0x44>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	025b      	lsls	r3, r3, #9
 8000a7a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a7c:	f7ff fd2c 	bl	80004d8 <SELECT>

	if (count == 1)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d111      	bne.n	8000aaa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2051      	movs	r0, #81	; 0x51
 8000a8a:	f7ff fe84 	bl	8000796 <SD_SendCmd>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d129      	bne.n	8000ae8 <SD_disk_read+0xb0>
 8000a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a98:	68b8      	ldr	r0, [r7, #8]
 8000a9a:	f7ff fe0b 	bl	80006b4 <SD_RxDataBlock>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d021      	beq.n	8000ae8 <SD_disk_read+0xb0>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	e01e      	b.n	8000ae8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2052      	movs	r0, #82	; 0x52
 8000aae:	f7ff fe72 	bl	8000796 <SD_SendCmd>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d117      	bne.n	8000ae8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	68b8      	ldr	r0, [r7, #8]
 8000abe:	f7ff fdf9 	bl	80006b4 <SD_RxDataBlock>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d00a      	beq.n	8000ade <SD_disk_read+0xa6>
				buff += 512;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ace:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1ed      	bne.n	8000ab8 <SD_disk_read+0x80>
 8000adc:	e000      	b.n	8000ae0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ade:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	204c      	movs	r0, #76	; 0x4c
 8000ae4:	f7ff fe57 	bl	8000796 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ae8:	f7ff fd04 	bl	80004f4 <DESELECT>
	SPI_RxByte();
 8000aec:	f7ff fd44 	bl	8000578 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bf14      	ite	ne
 8000af6:	2301      	movne	r3, #1
 8000af8:	2300      	moveq	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000040 	.word	0x20000040

08000b0c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <SD_disk_write+0x1c>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d101      	bne.n	8000b2c <SD_disk_write+0x20>
 8000b28:	2304      	movs	r3, #4
 8000b2a:	e06b      	b.n	8000c04 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b2c:	4b37      	ldr	r3, [pc, #220]	; (8000c0c <SD_disk_write+0x100>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SD_disk_write+0x32>
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e062      	b.n	8000c04 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b3e:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <SD_disk_write+0x100>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SD_disk_write+0x44>
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	e059      	b.n	8000c04 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b50:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <SD_disk_write+0x104>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <SD_disk_write+0x56>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	025b      	lsls	r3, r3, #9
 8000b60:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b62:	f7ff fcb9 	bl	80004d8 <SELECT>

	if (count == 1)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d110      	bne.n	8000b8e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b6c:	6879      	ldr	r1, [r7, #4]
 8000b6e:	2058      	movs	r0, #88	; 0x58
 8000b70:	f7ff fe11 	bl	8000796 <SD_SendCmd>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d13a      	bne.n	8000bf0 <SD_disk_write+0xe4>
 8000b7a:	21fe      	movs	r1, #254	; 0xfe
 8000b7c:	68b8      	ldr	r0, [r7, #8]
 8000b7e:	f7ff fdc7 	bl	8000710 <SD_TxDataBlock>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d033      	beq.n	8000bf0 <SD_disk_write+0xe4>
			count = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	e030      	b.n	8000bf0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <SD_disk_write+0x104>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2077      	movs	r0, #119	; 0x77
 8000b9e:	f7ff fdfa 	bl	8000796 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	2057      	movs	r0, #87	; 0x57
 8000ba6:	f7ff fdf6 	bl	8000796 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	2059      	movs	r0, #89	; 0x59
 8000bae:	f7ff fdf2 	bl	8000796 <SD_SendCmd>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d11b      	bne.n	8000bf0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bb8:	21fc      	movs	r1, #252	; 0xfc
 8000bba:	68b8      	ldr	r0, [r7, #8]
 8000bbc:	f7ff fda8 	bl	8000710 <SD_TxDataBlock>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00a      	beq.n	8000bdc <SD_disk_write+0xd0>
				buff += 512;
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bcc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1ee      	bne.n	8000bb8 <SD_disk_write+0xac>
 8000bda:	e000      	b.n	8000bde <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bdc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bde:	21fd      	movs	r1, #253	; 0xfd
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fd95 	bl	8000710 <SD_TxDataBlock>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <SD_disk_write+0xe4>
			{
				count = 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000bf0:	f7ff fc80 	bl	80004f4 <DESELECT>
	SPI_RxByte();
 8000bf4:	f7ff fcc0 	bl	8000578 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bf14      	ite	ne
 8000bfe:	2301      	movne	r3, #1
 8000c00:	2300      	moveq	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000040 	.word	0x20000040

08000c14 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b08b      	sub	sp, #44	; 0x2c
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	603a      	str	r2, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	460b      	mov	r3, r1
 8000c22:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SD_disk_ioctl+0x1e>
 8000c2e:	2304      	movs	r3, #4
 8000c30:	e113      	b.n	8000e5a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	2b05      	cmp	r3, #5
 8000c3c:	d121      	bne.n	8000c82 <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d009      	beq.n	8000c5a <SD_disk_ioctl+0x46>
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d00d      	beq.n	8000c66 <SD_disk_ioctl+0x52>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d115      	bne.n	8000c7a <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c4e:	f7ff fd19 	bl	8000684 <SD_PowerOff>
			res = RES_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c58:	e0fd      	b.n	8000e56 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c5a:	f7ff fcd1 	bl	8000600 <SD_PowerOn>
			res = RES_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c64:	e0f7      	b.n	8000e56 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	1c5c      	adds	r4, r3, #1
 8000c6a:	f7ff fd17 	bl	800069c <SD_CheckPower>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c72:	2300      	movs	r3, #0
 8000c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c78:	e0ed      	b.n	8000e56 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c80:	e0e9      	b.n	8000e56 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c82:	4b78      	ldr	r3, [pc, #480]	; (8000e64 <SD_disk_ioctl+0x250>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SD_disk_ioctl+0x80>
 8000c90:	2303      	movs	r3, #3
 8000c92:	e0e2      	b.n	8000e5a <SD_disk_ioctl+0x246>

		SELECT();
 8000c94:	f7ff fc20 	bl	80004d8 <SELECT>

		switch (ctrl)
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	2b0d      	cmp	r3, #13
 8000c9c:	f200 80cc 	bhi.w	8000e38 <SD_disk_ioctl+0x224>
 8000ca0:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <SD_disk_ioctl+0x94>)
 8000ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca6:	bf00      	nop
 8000ca8:	08000da3 	.word	0x08000da3
 8000cac:	08000ce1 	.word	0x08000ce1
 8000cb0:	08000d93 	.word	0x08000d93
 8000cb4:	08000e39 	.word	0x08000e39
 8000cb8:	08000e39 	.word	0x08000e39
 8000cbc:	08000e39 	.word	0x08000e39
 8000cc0:	08000e39 	.word	0x08000e39
 8000cc4:	08000e39 	.word	0x08000e39
 8000cc8:	08000e39 	.word	0x08000e39
 8000ccc:	08000e39 	.word	0x08000e39
 8000cd0:	08000e39 	.word	0x08000e39
 8000cd4:	08000db5 	.word	0x08000db5
 8000cd8:	08000dd9 	.word	0x08000dd9
 8000cdc:	08000dfd 	.word	0x08000dfd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2049      	movs	r0, #73	; 0x49
 8000ce4:	f7ff fd57 	bl	8000796 <SD_SendCmd>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 80a8 	bne.w	8000e40 <SD_disk_ioctl+0x22c>
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fcdc 	bl	80006b4 <SD_RxDataBlock>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 809e 	beq.w	8000e40 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d04:	7b3b      	ldrb	r3, [r7, #12]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d10e      	bne.n	8000d2c <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d0e:	7d7b      	ldrb	r3, [r7, #21]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	7d3b      	ldrb	r3, [r7, #20]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d22:	8bfb      	ldrh	r3, [r7, #30]
 8000d24:	029a      	lsls	r2, r3, #10
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e02e      	b.n	8000d8a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d2c:	7c7b      	ldrb	r3, [r7, #17]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	7dbb      	ldrb	r3, [r7, #22]
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	7d7b      	ldrb	r3, [r7, #21]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 0306 	and.w	r3, r3, #6
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	3302      	adds	r3, #2
 8000d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d54:	7d3b      	ldrb	r3, [r7, #20]
 8000d56:	099b      	lsrs	r3, r3, #6
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	7cfb      	ldrb	r3, [r7, #19]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4413      	add	r3, r2
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	7cbb      	ldrb	r3, [r7, #18]
 8000d6a:	029b      	lsls	r3, r3, #10
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d7c:	8bfa      	ldrh	r2, [r7, #30]
 8000d7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d82:	3b09      	subs	r3, #9
 8000d84:	409a      	lsls	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d90:	e056      	b.n	8000e40 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d98:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000da0:	e055      	b.n	8000e4e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000da2:	f7ff fc13 	bl	80005cc <SD_ReadyWait>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2bff      	cmp	r3, #255	; 0xff
 8000daa:	d14b      	bne.n	8000e44 <SD_disk_ioctl+0x230>
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000db2:	e047      	b.n	8000e44 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000db4:	2100      	movs	r1, #0
 8000db6:	2049      	movs	r0, #73	; 0x49
 8000db8:	f7ff fced 	bl	8000796 <SD_SendCmd>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d142      	bne.n	8000e48 <SD_disk_ioctl+0x234>
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	6a38      	ldr	r0, [r7, #32]
 8000dc6:	f7ff fc75 	bl	80006b4 <SD_RxDataBlock>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d03b      	beq.n	8000e48 <SD_disk_ioctl+0x234>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dd6:	e037      	b.n	8000e48 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd8:	2100      	movs	r1, #0
 8000dda:	204a      	movs	r0, #74	; 0x4a
 8000ddc:	f7ff fcdb 	bl	8000796 <SD_SendCmd>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d132      	bne.n	8000e4c <SD_disk_ioctl+0x238>
 8000de6:	2110      	movs	r1, #16
 8000de8:	6a38      	ldr	r0, [r7, #32]
 8000dea:	f7ff fc63 	bl	80006b4 <SD_RxDataBlock>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d02b      	beq.n	8000e4c <SD_disk_ioctl+0x238>
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dfa:	e027      	b.n	8000e4c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	207a      	movs	r0, #122	; 0x7a
 8000e00:	f7ff fcc9 	bl	8000796 <SD_SendCmd>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e10:	e00b      	b.n	8000e2a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e12:	6a3c      	ldr	r4, [r7, #32]
 8000e14:	1c63      	adds	r3, r4, #1
 8000e16:	623b      	str	r3, [r7, #32]
 8000e18:	f7ff fbae 	bl	8000578 <SPI_RxByte>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e24:	3301      	adds	r3, #1
 8000e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d9ef      	bls.n	8000e12 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e3e:	e006      	b.n	8000e4e <SD_disk_ioctl+0x23a>
			break;
 8000e40:	bf00      	nop
 8000e42:	e004      	b.n	8000e4e <SD_disk_ioctl+0x23a>
			break;
 8000e44:	bf00      	nop
 8000e46:	e002      	b.n	8000e4e <SD_disk_ioctl+0x23a>
			break;
 8000e48:	bf00      	nop
 8000e4a:	e000      	b.n	8000e4e <SD_disk_ioctl+0x23a>
			break;
 8000e4c:	bf00      	nop
		}

		DESELECT();
 8000e4e:	f7ff fb51 	bl	80004f4 <DESELECT>
		SPI_RxByte();
 8000e52:	f7ff fb91 	bl	8000578 <SPI_RxByte>
	}

	return res;
 8000e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	372c      	adds	r7, #44	; 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000000 	.word	0x20000000

08000e68 <SDbufClear>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* SD karta yazılacak buffer'ı temizlemek için bir fonksiyon gerekli. */
void SDbufClear(char *buf, uint8_t bufSize) { // clear the pre generated buffer array
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]

	for (int i = 0; i < bufSize; i++) {
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	e007      	b.n	8000e8a <SDbufClear+0x22>

		buf[i] = '\0';
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	4413      	add	r3, r2
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < bufSize; i++) {
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	dbf3      	blt.n	8000e7a <SDbufClear+0x12>

	}

}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8000ea6:	b08d      	sub	sp, #52	; 0x34
 8000ea8:	af00      	add	r7, sp, #0
	FATFS fs;  // file system
	FIL fil; // File
	FRESULT fresult;  // result

	/* SD karta kayıt edilen dosya adı. */
	char SDfileName[15] = "merhaba.txt"; // Array uzunuluğu ihtiyaca göre değiştirilebilir.
 8000eaa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000eae:	3b3c      	subs	r3, #60	; 0x3c
 8000eb0:	4a2d      	ldr	r2, [pc, #180]	; (8000f68 <main+0xc8>)
 8000eb2:	461c      	mov	r4, r3
 8000eb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000eba:	330c      	adds	r3, #12
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	460a      	mov	r2, r1
 8000ec0:	801a      	strh	r2, [r3, #0]
 8000ec2:	460a      	mov	r2, r1
 8000ec4:	709a      	strb	r2, [r3, #2]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ec6:	f000 fa03 	bl	80012d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eca:	f000 f853 	bl	8000f74 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ece:	f000 f8ef 	bl	80010b0 <MX_GPIO_Init>
	MX_SPI2_Init();
 8000ed2:	f000 f8b7 	bl	8001044 <MX_SPI2_Init>
	MX_FATFS_Init();
 8000ed6:	f001 fd25 	bl	8002924 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	/* SD karta bağlanma. */
	fresult = f_mount(&fs, "/", 1);
 8000eda:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8000ede:	f103 0310 	add.w	r3, r3, #16
 8000ee2:	3b1c      	subs	r3, #28
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4921      	ldr	r1, [pc, #132]	; (8000f6c <main+0xcc>)
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 ff61 	bl	8004db0 <f_mount>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000ef4:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000ef8:	7013      	strb	r3, [r2, #0]
	if (fresult == FR_OK) {
 8000efa:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000efe:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d000      	beq.n	8000f0a <main+0x6a>
		// Bağlantı başarılı.
	} else {
		// Bağlantı başarısız.
		while (1) {
 8000f08:	e7fe      	b.n	8000f08 <main+0x68>
		};
	}

	HAL_Delay(500); // Yarım saniye bekleme.
 8000f0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f0e:	f000 fa51 	bl	80013b4 <HAL_Delay>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		/* Mesajı buffer'a aktarma */
		SDbufClear(SDmsg, 50);
 8000f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f16:	3b30      	subs	r3, #48	; 0x30
 8000f18:	2132      	movs	r1, #50	; 0x32
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ffa4 	bl	8000e68 <SDbufClear>
		sprintf(SDmsg, "Merhaba dunya!\n");
 8000f20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f24:	3b30      	subs	r3, #48	; 0x30
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <main+0xd0>)
 8000f28:	461c      	mov	r4, r3
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		/* SD kart dosya oluşturma (Yoksa), SD kart dosyaya bağlanma (Dosya varsa) */
		f_open(&fil, SDfileName, FA_OPEN_APPEND | FA_WRITE);
 8000f32:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000f36:	393c      	subs	r1, #60	; 0x3c
 8000f38:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f3c:	3b2c      	subs	r3, #44	; 0x2c
 8000f3e:	2232      	movs	r2, #50	; 0x32
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 ff7b 	bl	8004e3c <f_open>

		/* Mesaj string'ini yerleştirme */
		f_puts(SDmsg, &fil);
 8000f46:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000f4a:	3a2c      	subs	r2, #44	; 0x2c
 8000f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f50:	3b30      	subs	r3, #48	; 0x30
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 fbf1 	bl	800573c <f_puts>

		/* SD karta veriyi kaydet. */
		f_close(&fil);
 8000f5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f5e:	3b2c      	subs	r3, #44	; 0x2c
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 fb49 	bl	80055f8 <f_close>
		SDbufClear(SDmsg, 50);
 8000f66:	e7d4      	b.n	8000f12 <main+0x72>
 8000f68:	08005a4c 	.word	0x08005a4c
 8000f6c:	08005a38 	.word	0x08005a38
 8000f70:	08005a3c 	.word	0x08005a3c

08000f74 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f7a:	f107 0320 	add.w	r3, r7, #32
 8000f7e:	2230      	movs	r2, #48	; 0x30
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 fd44 	bl	8005a10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <SystemClock_Config+0xc8>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <SystemClock_Config+0xc8>)
 8000fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <SystemClock_Config+0xc8>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <SystemClock_Config+0xcc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a20      	ldr	r2, [pc, #128]	; (8001040 <SystemClock_Config+0xcc>)
 8000fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <SystemClock_Config+0xcc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd8:	2310      	movs	r3, #16
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000fe8:	2364      	movs	r3, #100	; 0x64
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fc7f 	bl	80018fc <HAL_RCC_OscConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x94>
		Error_Handler();
 8001004:	f000 f886 	bl	8001114 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
 800100a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2302      	movs	r3, #2
 800100e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	2103      	movs	r1, #3
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fed9 	bl	8001ddc <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0xc0>
		Error_Handler();
 8001030:	f000 f870 	bl	8001114 <Error_Handler>
	}
}
 8001034:	bf00      	nop
 8001036:	3750      	adds	r7, #80	; 0x50
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000

08001044 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_SPI2_Init+0x64>)
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <MX_SPI2_Init+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001054:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_SPI2_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_SPI2_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001074:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001078:	2210      	movs	r2, #16
 800107a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_SPI2_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_SPI2_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001090:	220a      	movs	r2, #10
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001096:	f001 f85f 	bl	8002158 <HAL_SPI_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_SPI2_Init+0x60>
		Error_Handler();
 80010a0:	f000 f838 	bl	8001114 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000027c 	.word	0x2000027c
 80010ac:	40003800 	.word	0x40003800

080010b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_GPIO_Init+0x5c>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a0f      	ldr	r2, [pc, #60]	; (800110c <MX_GPIO_Init+0x5c>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <MX_GPIO_Init+0x5c>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2104      	movs	r1, #4
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <MX_GPIO_Init+0x60>)
 80010e6:	f000 fbef 	bl	80018c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ea:	2304      	movs	r3, #4
 80010ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_GPIO_Init+0x60>)
 8001100:	f000 fa60 	bl	80015c4 <HAL_GPIO_Init>

}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020400 	.word	0x40020400

08001114 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800111a:	e7fe      	b.n	800111a <Error_Handler+0x6>

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <HAL_MspInit+0x4c>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_MspInit+0x4c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800115a:	2007      	movs	r0, #7
 800115c:	f000 f9fe 	bl	800155c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <HAL_SPI_MspInit+0x84>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12c      	bne.n	80011e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d8:	2305      	movs	r3, #5
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_SPI_MspInit+0x8c>)
 80011e4:	f000 f9ee 	bl	80015c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40003800 	.word	0x40003800
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020400 	.word	0x40020400

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler+0x4>

08001202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001248:	f000 f894 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <SystemInit+0x28>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <SystemInit+0x28>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SystemInit+0x28>)
 8001266:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126a:	609a      	str	r2, [r3, #8]
#endif
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001280:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001282:	e003      	b.n	800128c <LoopCopyDataInit>

08001284 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001286:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001288:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800128a:	3104      	adds	r1, #4

0800128c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001290:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001292:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001294:	d3f6      	bcc.n	8001284 <CopyDataInit>
  ldr  r2, =_sbss
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001298:	e002      	b.n	80012a0 <LoopFillZerobss>

0800129a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800129a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800129c:	f842 3b04 	str.w	r3, [r2], #4

080012a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012a4:	d3f9      	bcc.n	800129a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012a6:	f7ff ffd3 	bl	8001250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f004 fb8d 	bl	80059c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ae:	f7ff fdf7 	bl	8000ea0 <main>
  bx  lr    
 80012b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012b8:	08005f04 	.word	0x08005f04
  ldr  r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012c0:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 80012c4:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 80012c8:	20002348 	.word	0x20002348

080012cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <HAL_Init+0x40>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_Init+0x40>)
 80012e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x40>)
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f92f 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff ff0a 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023c00 	.word	0x40023c00

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f939 	bl	80015aa <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f90f 	bl	8001572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000004 	.word	0x20000004
 800136c:	2000000c 	.word	0x2000000c
 8001370:	20000008 	.word	0x20000008

08001374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	2000000c 	.word	0x2000000c
 8001398:	200002d4 	.word	0x200002d4

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	200002d4 	.word	0x200002d4

080013b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff ffee 	bl	800139c <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_Delay+0x40>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffde 	bl	800139c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2000000c 	.word	0x2000000c

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f7ff ff8e 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff47 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff5c 	bl	8001440 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff8e 	bl	80014b0 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5d 	bl	800145c <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffb0 	bl	8001518 <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	e159      	b.n	8001894 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 8148 	bne.w	800188e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d00b      	beq.n	800161e <HAL_GPIO_Init+0x5a>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001612:	2b11      	cmp	r3, #17
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b12      	cmp	r3, #18
 800161c:	d130      	bne.n	8001680 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f003 0201 	and.w	r2, r3, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0xfc>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b12      	cmp	r3, #18
 80016be:	d123      	bne.n	8001708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	69b9      	ldr	r1, [r7, #24]
 8001704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80a2 	beq.w	800188e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <HAL_GPIO_Init+0x2e4>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a55      	ldr	r2, [pc, #340]	; (80018a8 <HAL_GPIO_Init+0x2e4>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_GPIO_Init+0x2e4>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001766:	4a51      	ldr	r2, [pc, #324]	; (80018ac <HAL_GPIO_Init+0x2e8>)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a48      	ldr	r2, [pc, #288]	; (80018b0 <HAL_GPIO_Init+0x2ec>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d019      	beq.n	80017c6 <HAL_GPIO_Init+0x202>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a47      	ldr	r2, [pc, #284]	; (80018b4 <HAL_GPIO_Init+0x2f0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x1fe>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a46      	ldr	r2, [pc, #280]	; (80018b8 <HAL_GPIO_Init+0x2f4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x1fa>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a45      	ldr	r2, [pc, #276]	; (80018bc <HAL_GPIO_Init+0x2f8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x1f6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a44      	ldr	r2, [pc, #272]	; (80018c0 <HAL_GPIO_Init+0x2fc>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x1f2>
 80017b2:	2304      	movs	r3, #4
 80017b4:	e008      	b.n	80017c8 <HAL_GPIO_Init+0x204>
 80017b6:	2307      	movs	r3, #7
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x204>
 80017ba:	2303      	movs	r3, #3
 80017bc:	e004      	b.n	80017c8 <HAL_GPIO_Init+0x204>
 80017be:	2302      	movs	r3, #2
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_Init+0x204>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_GPIO_Init+0x204>
 80017c6:	2300      	movs	r3, #0
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f002 0203 	and.w	r2, r2, #3
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	4093      	lsls	r3, r2
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d8:	4934      	ldr	r1, [pc, #208]	; (80018ac <HAL_GPIO_Init+0x2e8>)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e6:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <HAL_GPIO_Init+0x300>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180a:	4a2e      	ldr	r2, [pc, #184]	; (80018c4 <HAL_GPIO_Init+0x300>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <HAL_GPIO_Init+0x300>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001834:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <HAL_GPIO_Init+0x300>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_GPIO_Init+0x300>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800185e:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_GPIO_Init+0x300>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_GPIO_Init+0x300>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_GPIO_Init+0x300>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3301      	adds	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	2b0f      	cmp	r3, #15
 8001898:	f67f aea2 	bls.w	80015e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800189c:	bf00      	nop
 800189e:	3724      	adds	r7, #36	; 0x24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40013800 	.word	0x40013800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40013c00 	.word	0x40013c00

080018c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	619a      	str	r2, [r3, #24]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e25b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d075      	beq.n	8001a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800191a:	4ba3      	ldr	r3, [pc, #652]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d00c      	beq.n	8001940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001926:	4ba0      	ldr	r3, [pc, #640]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800192e:	2b08      	cmp	r3, #8
 8001930:	d112      	bne.n	8001958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001932:	4b9d      	ldr	r3, [pc, #628]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800193e:	d10b      	bne.n	8001958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	4b99      	ldr	r3, [pc, #612]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d05b      	beq.n	8001a04 <HAL_RCC_OscConfig+0x108>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d157      	bne.n	8001a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e236      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d106      	bne.n	8001970 <HAL_RCC_OscConfig+0x74>
 8001962:	4b91      	ldr	r3, [pc, #580]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a90      	ldr	r2, [pc, #576]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e01d      	b.n	80019ac <HAL_RCC_OscConfig+0xb0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x98>
 800197a:	4b8b      	ldr	r3, [pc, #556]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a8a      	ldr	r2, [pc, #552]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a87      	ldr	r2, [pc, #540]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0xb0>
 8001994:	4b84      	ldr	r3, [pc, #528]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a83      	ldr	r2, [pc, #524]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 800199a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b81      	ldr	r3, [pc, #516]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a80      	ldr	r2, [pc, #512]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 80019a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d013      	beq.n	80019dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fcf2 	bl	800139c <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff fcee 	bl	800139c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1fb      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0xc0>
 80019da:	e014      	b.n	8001a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fcde 	bl	800139c <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff fcda 	bl	800139c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1e7      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	4b6c      	ldr	r3, [pc, #432]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0xe8>
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d063      	beq.n	8001ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a12:	4b65      	ldr	r3, [pc, #404]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1e:	4b62      	ldr	r3, [pc, #392]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d11c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d116      	bne.n	8001a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	4b5c      	ldr	r3, [pc, #368]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_RCC_OscConfig+0x152>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e1bb      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4952      	ldr	r1, [pc, #328]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	e03a      	b.n	8001ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d020      	beq.n	8001aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <HAL_RCC_OscConfig+0x2b0>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff fc93 	bl	800139c <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fc8f 	bl	800139c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e19c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4940      	ldr	r1, [pc, #256]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <HAL_RCC_OscConfig+0x2b0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fc72 	bl	800139c <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff fc6e 	bl	800139c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e17b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d030      	beq.n	8001b48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d016      	beq.n	8001b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aee:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_RCC_OscConfig+0x2b4>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff fc52 	bl	800139c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff fc4e 	bl	800139c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e15b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x200>
 8001b1a:	e015      	b.n	8001b48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_RCC_OscConfig+0x2b4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7ff fc3b 	bl	800139c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fc37 	bl	800139c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e144      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80a0 	beq.w	8001c96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b82:	2301      	movs	r3, #1
 8001b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_OscConfig+0x2b8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d121      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_RCC_OscConfig+0x2b8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_RCC_OscConfig+0x2b8>)
 8001b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fbfd 	bl	800139c <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	e011      	b.n	8001bca <HAL_RCC_OscConfig+0x2ce>
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	42470000 	.word	0x42470000
 8001bb0:	42470e80 	.word	0x42470e80
 8001bb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb8:	f7ff fbf0 	bl	800139c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e0fd      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <HAL_RCC_OscConfig+0x4d4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d106      	bne.n	8001bec <HAL_RCC_OscConfig+0x2f0>
 8001bde:	4b7d      	ldr	r3, [pc, #500]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a7c      	ldr	r2, [pc, #496]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bea:	e01c      	b.n	8001c26 <HAL_RCC_OscConfig+0x32a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d10c      	bne.n	8001c0e <HAL_RCC_OscConfig+0x312>
 8001bf4:	4b77      	ldr	r3, [pc, #476]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	4a76      	ldr	r2, [pc, #472]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001c00:	4b74      	ldr	r3, [pc, #464]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	4a73      	ldr	r2, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0c:	e00b      	b.n	8001c26 <HAL_RCC_OscConfig+0x32a>
 8001c0e:	4b71      	ldr	r3, [pc, #452]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c12:	4a70      	ldr	r2, [pc, #448]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1a:	4b6e      	ldr	r3, [pc, #440]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1e:	4a6d      	ldr	r2, [pc, #436]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001c20:	f023 0304 	bic.w	r3, r3, #4
 8001c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d015      	beq.n	8001c5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fbb5 	bl	800139c <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff fbb1 	bl	800139c <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0bc      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	4b61      	ldr	r3, [pc, #388]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ee      	beq.n	8001c36 <HAL_RCC_OscConfig+0x33a>
 8001c58:	e014      	b.n	8001c84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fb9f 	bl	800139c <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7ff fb9b 	bl	800139c <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0a6      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c78:	4b56      	ldr	r3, [pc, #344]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ee      	bne.n	8001c62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d105      	bne.n	8001c96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8a:	4b52      	ldr	r3, [pc, #328]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a51      	ldr	r2, [pc, #324]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8092 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d05c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d141      	bne.n	8001d38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <HAL_RCC_OscConfig+0x4dc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fb6f 	bl	800139c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff fb6b 	bl	800139c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e078      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd4:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	019b      	lsls	r3, r3, #6
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	061b      	lsls	r3, r3, #24
 8001d04:	4933      	ldr	r1, [pc, #204]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0a:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <HAL_RCC_OscConfig+0x4dc>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fb44 	bl	800139c <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff fb40 	bl	800139c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e04d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x41c>
 8001d36:	e045      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_OscConfig+0x4dc>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fb2d 	bl	800139c <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff fb29 	bl	800139c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e036      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x44a>
 8001d64:	e02e      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e029      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_RCC_OscConfig+0x4d8>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d11c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d115      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d10d      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	42470060 	.word	0x42470060

08001ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0cc      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b68      	ldr	r3, [pc, #416]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d90c      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b65      	ldr	r3, [pc, #404]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0b8      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d020      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e30:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	494d      	ldr	r1, [pc, #308]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d044      	beq.n	8001efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d119      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e07f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e06f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e067      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4934      	ldr	r1, [pc, #208]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ecc:	f7ff fa66 	bl	800139c <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed4:	f7ff fa62 	bl	800139c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e04f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 020c 	and.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1eb      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d20c      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e032      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4916      	ldr	r1, [pc, #88]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	490e      	ldr	r1, [pc, #56]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f62:	f000 f821 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8001f66:	4601      	mov	r1, r0
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	5cd3      	ldrb	r3, [r2, r3]
 8001f76:	fa21 f303 	lsr.w	r3, r1, r3
 8001f7a:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f9c6 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023c00 	.word	0x40023c00
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08005aa4 	.word	0x08005aa4
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	20000008 	.word	0x20000008

08001fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fbe:	4b63      	ldr	r3, [pc, #396]	; (800214c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d007      	beq.n	8001fda <HAL_RCC_GetSysClockFreq+0x32>
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d008      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x38>
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 80b4 	bne.w	800213c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b5e      	ldr	r3, [pc, #376]	; (8002150 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fd6:	60bb      	str	r3, [r7, #8]
       break;
 8001fd8:	e0b3      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fda:	4b5e      	ldr	r3, [pc, #376]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001fdc:	60bb      	str	r3, [r7, #8]
      break;
 8001fde:	e0b0      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe0:	4b5a      	ldr	r3, [pc, #360]	; (800214c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fea:	4b58      	ldr	r3, [pc, #352]	; (800214c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d04a      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff6:	4b55      	ldr	r3, [pc, #340]	; (800214c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	f04f 0400 	mov.w	r4, #0
 8002000:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	ea03 0501 	and.w	r5, r3, r1
 800200c:	ea04 0602 	and.w	r6, r4, r2
 8002010:	4629      	mov	r1, r5
 8002012:	4632      	mov	r2, r6
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	f04f 0400 	mov.w	r4, #0
 800201c:	0154      	lsls	r4, r2, #5
 800201e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002022:	014b      	lsls	r3, r1, #5
 8002024:	4619      	mov	r1, r3
 8002026:	4622      	mov	r2, r4
 8002028:	1b49      	subs	r1, r1, r5
 800202a:	eb62 0206 	sbc.w	r2, r2, r6
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	f04f 0400 	mov.w	r4, #0
 8002036:	0194      	lsls	r4, r2, #6
 8002038:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800203c:	018b      	lsls	r3, r1, #6
 800203e:	1a5b      	subs	r3, r3, r1
 8002040:	eb64 0402 	sbc.w	r4, r4, r2
 8002044:	f04f 0100 	mov.w	r1, #0
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	00e2      	lsls	r2, r4, #3
 800204e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002052:	00d9      	lsls	r1, r3, #3
 8002054:	460b      	mov	r3, r1
 8002056:	4614      	mov	r4, r2
 8002058:	195b      	adds	r3, r3, r5
 800205a:	eb44 0406 	adc.w	r4, r4, r6
 800205e:	f04f 0100 	mov.w	r1, #0
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	0262      	lsls	r2, r4, #9
 8002068:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800206c:	0259      	lsls	r1, r3, #9
 800206e:	460b      	mov	r3, r1
 8002070:	4614      	mov	r4, r2
 8002072:	4618      	mov	r0, r3
 8002074:	4621      	mov	r1, r4
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f04f 0400 	mov.w	r4, #0
 800207c:	461a      	mov	r2, r3
 800207e:	4623      	mov	r3, r4
 8002080:	f7fe f8aa 	bl	80001d8 <__aeabi_uldivmod>
 8002084:	4603      	mov	r3, r0
 8002086:	460c      	mov	r4, r1
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	e049      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208c:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	f04f 0400 	mov.w	r4, #0
 8002096:	f240 11ff 	movw	r1, #511	; 0x1ff
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	ea03 0501 	and.w	r5, r3, r1
 80020a2:	ea04 0602 	and.w	r6, r4, r2
 80020a6:	4629      	mov	r1, r5
 80020a8:	4632      	mov	r2, r6
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	f04f 0400 	mov.w	r4, #0
 80020b2:	0154      	lsls	r4, r2, #5
 80020b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020b8:	014b      	lsls	r3, r1, #5
 80020ba:	4619      	mov	r1, r3
 80020bc:	4622      	mov	r2, r4
 80020be:	1b49      	subs	r1, r1, r5
 80020c0:	eb62 0206 	sbc.w	r2, r2, r6
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	f04f 0400 	mov.w	r4, #0
 80020cc:	0194      	lsls	r4, r2, #6
 80020ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020d2:	018b      	lsls	r3, r1, #6
 80020d4:	1a5b      	subs	r3, r3, r1
 80020d6:	eb64 0402 	sbc.w	r4, r4, r2
 80020da:	f04f 0100 	mov.w	r1, #0
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	00e2      	lsls	r2, r4, #3
 80020e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020e8:	00d9      	lsls	r1, r3, #3
 80020ea:	460b      	mov	r3, r1
 80020ec:	4614      	mov	r4, r2
 80020ee:	195b      	adds	r3, r3, r5
 80020f0:	eb44 0406 	adc.w	r4, r4, r6
 80020f4:	f04f 0100 	mov.w	r1, #0
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	02a2      	lsls	r2, r4, #10
 80020fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002102:	0299      	lsls	r1, r3, #10
 8002104:	460b      	mov	r3, r1
 8002106:	4614      	mov	r4, r2
 8002108:	4618      	mov	r0, r3
 800210a:	4621      	mov	r1, r4
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f04f 0400 	mov.w	r4, #0
 8002112:	461a      	mov	r2, r3
 8002114:	4623      	mov	r3, r4
 8002116:	f7fe f85f 	bl	80001d8 <__aeabi_uldivmod>
 800211a:	4603      	mov	r3, r0
 800211c:	460c      	mov	r4, r1
 800211e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	3301      	adds	r3, #1
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	60bb      	str	r3, [r7, #8]
      break;
 800213a:	e002      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800213e:	60bb      	str	r3, [r7, #8]
      break;
 8002140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002142:	68bb      	ldr	r3, [r7, #8]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	00f42400 	.word	0x00f42400
 8002154:	007a1200 	.word	0x007a1200

08002158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e056      	b.n	8002218 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d106      	bne.n	800218a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7fe fff1 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2202      	movs	r2, #2
 800218e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	ea42 0103 	orr.w	r1, r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	f003 0104 	and.w	r1, r3, #4
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69da      	ldr	r2, [r3, #28]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002206:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_SPI_Transmit+0x22>
 800223e:	2302      	movs	r3, #2
 8002240:	e11e      	b.n	8002480 <HAL_SPI_Transmit+0x260>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800224a:	f7ff f8a7 	bl	800139c <HAL_GetTick>
 800224e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d002      	beq.n	8002266 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002260:	2302      	movs	r3, #2
 8002262:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002264:	e103      	b.n	800246e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_SPI_Transmit+0x52>
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002276:	e0fa      	b.n	800246e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2203      	movs	r2, #3
 800227c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	88fa      	ldrh	r2, [r7, #6]
 8002296:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022be:	d107      	bne.n	80022d0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	d007      	beq.n	80022ee <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022f6:	d14b      	bne.n	8002390 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_SPI_Transmit+0xe6>
 8002300:	8afb      	ldrh	r3, [r7, #22]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d13e      	bne.n	8002384 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	881a      	ldrh	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	1c9a      	adds	r2, r3, #2
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800232a:	e02b      	b.n	8002384 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d112      	bne.n	8002360 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	881a      	ldrh	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	1c9a      	adds	r2, r3, #2
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	86da      	strh	r2, [r3, #54]	; 0x36
 800235e:	e011      	b.n	8002384 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002360:	f7ff f81c 	bl	800139c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d803      	bhi.n	8002378 <HAL_SPI_Transmit+0x158>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002376:	d102      	bne.n	800237e <HAL_SPI_Transmit+0x15e>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002382:	e074      	b.n	800246e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ce      	bne.n	800232c <HAL_SPI_Transmit+0x10c>
 800238e:	e04c      	b.n	800242a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_SPI_Transmit+0x17e>
 8002398:	8afb      	ldrh	r3, [r7, #22]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d140      	bne.n	8002420 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	330c      	adds	r3, #12
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023c4:	e02c      	b.n	8002420 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d113      	bne.n	80023fc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	330c      	adds	r3, #12
 80023de:	7812      	ldrb	r2, [r2, #0]
 80023e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80023fa:	e011      	b.n	8002420 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023fc:	f7fe ffce 	bl	800139c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d803      	bhi.n	8002414 <HAL_SPI_Transmit+0x1f4>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002412:	d102      	bne.n	800241a <HAL_SPI_Transmit+0x1fa>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800241e:	e026      	b.n	800246e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1cd      	bne.n	80023c6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	6839      	ldr	r1, [r7, #0]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fa36 	bl	80028a0 <SPI_EndRxTxTransaction>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	77fb      	strb	r3, [r7, #31]
 800246a:	e000      	b.n	800246e <HAL_SPI_Transmit+0x24e>
  }

error:
 800246c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800247e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	; 0x30
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002496:	2301      	movs	r3, #1
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_SPI_TransmitReceive+0x26>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e18a      	b.n	80027c4 <HAL_SPI_TransmitReceive+0x33c>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024b6:	f7fe ff71 	bl	800139c <HAL_GetTick>
 80024ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d00f      	beq.n	80024f8 <HAL_SPI_TransmitReceive+0x70>
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024de:	d107      	bne.n	80024f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d103      	bne.n	80024f0 <HAL_SPI_TransmitReceive+0x68>
 80024e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d003      	beq.n	80024f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
 80024f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024f6:	e15b      	b.n	80027b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_SPI_TransmitReceive+0x82>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_SPI_TransmitReceive+0x82>
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002510:	e14e      	b.n	80027b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b04      	cmp	r3, #4
 800251c:	d003      	beq.n	8002526 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2205      	movs	r2, #5
 8002522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	887a      	ldrh	r2, [r7, #2]
 8002536:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	887a      	ldrh	r2, [r7, #2]
 800254e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	d007      	beq.n	800257a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002582:	d178      	bne.n	8002676 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_SPI_TransmitReceive+0x10a>
 800258c:	8b7b      	ldrh	r3, [r7, #26]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d166      	bne.n	8002660 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	881a      	ldrh	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	1c9a      	adds	r2, r3, #2
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b6:	e053      	b.n	8002660 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d11b      	bne.n	80025fe <HAL_SPI_TransmitReceive+0x176>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d016      	beq.n	80025fe <HAL_SPI_TransmitReceive+0x176>
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d113      	bne.n	80025fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	881a      	ldrh	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	1c9a      	adds	r2, r3, #2
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d119      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x1b8>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d014      	beq.n	8002640 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	b292      	uxth	r2, r2
 8002622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	1c9a      	adds	r2, r3, #2
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800263c:	2301      	movs	r3, #1
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002640:	f7fe feac 	bl	800139c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800264c:	429a      	cmp	r2, r3
 800264e:	d807      	bhi.n	8002660 <HAL_SPI_TransmitReceive+0x1d8>
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d003      	beq.n	8002660 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800265e:	e0a7      	b.n	80027b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1a6      	bne.n	80025b8 <HAL_SPI_TransmitReceive+0x130>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1a1      	bne.n	80025b8 <HAL_SPI_TransmitReceive+0x130>
 8002674:	e07c      	b.n	8002770 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_SPI_TransmitReceive+0x1fc>
 800267e:	8b7b      	ldrh	r3, [r7, #26]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d16b      	bne.n	800275c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	330c      	adds	r3, #12
 800268e:	7812      	ldrb	r2, [r2, #0]
 8002690:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026aa:	e057      	b.n	800275c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d11c      	bne.n	80026f4 <HAL_SPI_TransmitReceive+0x26c>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d017      	beq.n	80026f4 <HAL_SPI_TransmitReceive+0x26c>
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d114      	bne.n	80026f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d119      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x2ae>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d014      	beq.n	8002736 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002732:	2301      	movs	r3, #1
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002736:	f7fe fe31 	bl	800139c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002742:	429a      	cmp	r2, r3
 8002744:	d803      	bhi.n	800274e <HAL_SPI_TransmitReceive+0x2c6>
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d102      	bne.n	8002754 <HAL_SPI_TransmitReceive+0x2cc>
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	2b00      	cmp	r3, #0
 8002752:	d103      	bne.n	800275c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800275a:	e029      	b.n	80027b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1a2      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x224>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d19d      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f893 	bl	80028a0 <SPI_EndRxTxTransaction>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800278c:	e010      	b.n	80027b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	e000      	b.n	80027b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3730      	adds	r7, #48	; 0x30
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027dc:	e04c      	b.n	8002878 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d048      	beq.n	8002878 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80027e6:	f7fe fdd9 	bl	800139c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d902      	bls.n	80027fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d13d      	bne.n	8002878 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800280a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002814:	d111      	bne.n	800283a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800281e:	d004      	beq.n	800282a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002828:	d107      	bne.n	800283a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002838:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002842:	d10f      	bne.n	8002864 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002862:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e00f      	b.n	8002898 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4013      	ands	r3, r2
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	429a      	cmp	r2, r3
 8002894:	d1a3      	bne.n	80027de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <SPI_EndRxTxTransaction+0x7c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <SPI_EndRxTxTransaction+0x80>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0d5b      	lsrs	r3, r3, #21
 80028b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ca:	d112      	bne.n	80028f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f7ff ff78 	bl	80027cc <SPI_WaitFlagStateUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e00f      	b.n	8002912 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d0f2      	beq.n	80028f2 <SPI_EndRxTxTransaction+0x52>
 800290c:	e000      	b.n	8002910 <SPI_EndRxTxTransaction+0x70>
        break;
 800290e:	bf00      	nop
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000004 	.word	0x20000004
 8002920:	165e9f81 	.word	0x165e9f81

08002924 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002928:	4904      	ldr	r1, [pc, #16]	; (800293c <MX_FATFS_Init+0x18>)
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <MX_FATFS_Init+0x1c>)
 800292c:	f002 ff76 	bl	800581c <FATFS_LinkDriver>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <MX_FATFS_Init+0x20>)
 8002936:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200002d8 	.word	0x200002d8
 8002940:	20000010 	.word	0x20000010
 8002944:	200002dc 	.word	0x200002dc

08002948 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800294c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd ff6b 	bl	8000840 <SD_disk_initialize>
 800296a:	4603      	mov	r3, r0
 800296c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe f842 	bl	8000a0c <SD_disk_status>
 8002988:	4603      	mov	r3, r0
 800298a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	4603      	mov	r3, r0
 80029a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80029a4:	7bf8      	ldrb	r0, [r7, #15]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	f7fe f844 	bl	8000a38 <SD_disk_read>
 80029b0:	4603      	mov	r3, r0
 80029b2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4603      	mov	r3, r0
 80029ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80029cc:	7bf8      	ldrb	r0, [r7, #15]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	f7fe f89a 	bl	8000b0c <SD_disk_write>
 80029d8:	4603      	mov	r3, r0
 80029da:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	603a      	str	r2, [r7, #0]
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	460b      	mov	r3, r1
 80029f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	79b9      	ldrb	r1, [r7, #6]
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe f90a 	bl	8000c14 <SD_disk_ioctl>
 8002a00:	4603      	mov	r3, r0
 8002a02:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	4a08      	ldr	r2, [pc, #32]	; (8002a3c <disk_status+0x30>)
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	79fa      	ldrb	r2, [r7, #7]
 8002a24:	4905      	ldr	r1, [pc, #20]	; (8002a3c <disk_status+0x30>)
 8002a26:	440a      	add	r2, r1
 8002a28:	7a12      	ldrb	r2, [r2, #8]
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4798      	blx	r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	2000026c 	.word	0x2000026c

08002a40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <disk_initialize+0x48>)
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d111      	bne.n	8002a7c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <disk_initialize+0x48>)
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <disk_initialize+0x48>)
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	79fa      	ldrb	r2, [r7, #7]
 8002a6e:	4906      	ldr	r1, [pc, #24]	; (8002a88 <disk_initialize+0x48>)
 8002a70:	440a      	add	r2, r1
 8002a72:	7a12      	ldrb	r2, [r2, #8]
 8002a74:	4610      	mov	r0, r2
 8002a76:	4798      	blx	r3
 8002a78:	4603      	mov	r3, r0
 8002a7a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	2000026c 	.word	0x2000026c

08002a8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4603      	mov	r3, r0
 8002a9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <disk_read+0x3c>)
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	689c      	ldr	r4, [r3, #8]
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <disk_read+0x3c>)
 8002aac:	4413      	add	r3, r2
 8002aae:	7a18      	ldrb	r0, [r3, #8]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	47a0      	blx	r4
 8002ab8:	4603      	mov	r3, r0
 8002aba:	75fb      	strb	r3, [r7, #23]
  return res;
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd90      	pop	{r4, r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2000026c 	.word	0x2000026c

08002acc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	4603      	mov	r3, r0
 8002ada:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <disk_write+0x3c>)
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	68dc      	ldr	r4, [r3, #12]
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <disk_write+0x3c>)
 8002aec:	4413      	add	r3, r2
 8002aee:	7a18      	ldrb	r0, [r3, #8]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	47a0      	blx	r4
 8002af8:	4603      	mov	r3, r0
 8002afa:	75fb      	strb	r3, [r7, #23]
  return res;
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000026c 	.word	0x2000026c

08002b0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	603a      	str	r2, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <disk_ioctl+0x38>)
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	79fa      	ldrb	r2, [r7, #7]
 8002b2a:	4906      	ldr	r1, [pc, #24]	; (8002b44 <disk_ioctl+0x38>)
 8002b2c:	440a      	add	r2, r1
 8002b2e:	7a10      	ldrb	r0, [r2, #8]
 8002b30:	79b9      	ldrb	r1, [r7, #6]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4798      	blx	r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	73fb      	strb	r3, [r7, #15]
  return res;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	2000026c 	.word	0x2000026c

08002b48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3301      	adds	r3, #1
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002b58:	89fb      	ldrh	r3, [r7, #14]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	b21a      	sxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b21b      	sxth	r3, r3
 8002b64:	4313      	orrs	r3, r2
 8002b66:	b21b      	sxth	r3, r3
 8002b68:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002b6a:	89fb      	ldrh	r3, [r7, #14]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3303      	adds	r3, #3
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	3202      	adds	r2, #2
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	3201      	adds	r2, #1
 8002b9e:	7812      	ldrb	r2, [r2, #0]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	7812      	ldrb	r2, [r2, #0]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
	return rv;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	887a      	ldrh	r2, [r7, #2]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	887a      	ldrh	r2, [r7, #2]
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	701a      	strb	r2, [r3, #0]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	1c53      	adds	r3, r2, #1
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1c59      	adds	r1, r3, #1
 8002c70:	6179      	str	r1, [r7, #20]
 8002c72:	7812      	ldrb	r2, [r2, #0]
 8002c74:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f1      	bne.n	8002c66 <mem_cpy+0x1a>
	}
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002c8e:	b480      	push	{r7}
 8002c90:	b087      	sub	sp, #28
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	617a      	str	r2, [r7, #20]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f3      	bne.n	8002c9e <mem_set+0x10>
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002cc2:	b480      	push	{r7}
 8002cc4:	b089      	sub	sp, #36	; 0x24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	61fa      	str	r2, [r7, #28]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	61ba      	str	r2, [r7, #24]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	1acb      	subs	r3, r1, r3
 8002cee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <mem_cmp+0x40>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0eb      	beq.n	8002cda <mem_cmp+0x18>

	return r;
 8002d02:	697b      	ldr	r3, [r7, #20]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3724      	adds	r7, #36	; 0x24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002d1a:	e002      	b.n	8002d22 <chk_chr+0x12>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	607b      	str	r3, [r7, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <chk_chr+0x26>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d1f2      	bne.n	8002d1c <chk_chr+0xc>
	return *str;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	781b      	ldrb	r3, [r3, #0]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e029      	b.n	8002db0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002d5c:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <chk_lock+0xb4>)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	4413      	add	r3, r2
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01d      	beq.n	8002da6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002d6a:	4a24      	ldr	r2, [pc, #144]	; (8002dfc <chk_lock+0xb4>)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	4413      	add	r3, r2
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d116      	bne.n	8002daa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <chk_lock+0xb4>)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	4413      	add	r3, r2
 8002d84:	3304      	adds	r3, #4
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d10c      	bne.n	8002daa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002d90:	4a1a      	ldr	r2, [pc, #104]	; (8002dfc <chk_lock+0xb4>)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	4413      	add	r3, r2
 8002d98:	3308      	adds	r3, #8
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d102      	bne.n	8002daa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002da4:	e007      	b.n	8002db6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002da6:	2301      	movs	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3301      	adds	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d9d2      	bls.n	8002d5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d109      	bne.n	8002dd0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <chk_lock+0x80>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d101      	bne.n	8002dcc <chk_lock+0x84>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e010      	b.n	8002dee <chk_lock+0xa6>
 8002dcc:	2312      	movs	r3, #18
 8002dce:	e00e      	b.n	8002dee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d108      	bne.n	8002de8 <chk_lock+0xa0>
 8002dd6:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <chk_lock+0xb4>)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	4413      	add	r3, r2
 8002dde:	330c      	adds	r3, #12
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de6:	d101      	bne.n	8002dec <chk_lock+0xa4>
 8002de8:	2310      	movs	r3, #16
 8002dea:	e000      	b.n	8002dee <chk_lock+0xa6>
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	2000004c 	.word	0x2000004c

08002e00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	e002      	b.n	8002e12 <enq_lock+0x12>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d806      	bhi.n	8002e26 <enq_lock+0x26>
 8002e18:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <enq_lock+0x40>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	4413      	add	r3, r2
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f2      	bne.n	8002e0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	2000004c 	.word	0x2000004c

08002e44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	e01f      	b.n	8002e94 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002e54:	4a41      	ldr	r2, [pc, #260]	; (8002f5c <inc_lock+0x118>)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	4413      	add	r3, r2
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d113      	bne.n	8002e8e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002e66:	4a3d      	ldr	r2, [pc, #244]	; (8002f5c <inc_lock+0x118>)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3304      	adds	r3, #4
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d109      	bne.n	8002e8e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002e7a:	4a38      	ldr	r2, [pc, #224]	; (8002f5c <inc_lock+0x118>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	4413      	add	r3, r2
 8002e82:	3308      	adds	r3, #8
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d006      	beq.n	8002e9c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3301      	adds	r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d9dc      	bls.n	8002e54 <inc_lock+0x10>
 8002e9a:	e000      	b.n	8002e9e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002e9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d132      	bne.n	8002f0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	e002      	b.n	8002eb0 <inc_lock+0x6c>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3301      	adds	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d806      	bhi.n	8002ec4 <inc_lock+0x80>
 8002eb6:	4a29      	ldr	r2, [pc, #164]	; (8002f5c <inc_lock+0x118>)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	4413      	add	r3, r2
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f2      	bne.n	8002eaa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d101      	bne.n	8002ece <inc_lock+0x8a>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e040      	b.n	8002f50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	4922      	ldr	r1, [pc, #136]	; (8002f5c <inc_lock+0x118>)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	440b      	add	r3, r1
 8002eda:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	491e      	ldr	r1, [pc, #120]	; (8002f5c <inc_lock+0x118>)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3304      	adds	r3, #4
 8002eea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	491a      	ldr	r1, [pc, #104]	; (8002f5c <inc_lock+0x118>)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3308      	adds	r3, #8
 8002efa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <inc_lock+0x118>)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	4413      	add	r3, r2
 8002f04:	330c      	adds	r3, #12
 8002f06:	2200      	movs	r2, #0
 8002f08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d009      	beq.n	8002f24 <inc_lock+0xe0>
 8002f10:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <inc_lock+0x118>)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	4413      	add	r3, r2
 8002f18:	330c      	adds	r3, #12
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <inc_lock+0xe0>
 8002f20:	2300      	movs	r3, #0
 8002f22:	e015      	b.n	8002f50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d108      	bne.n	8002f3c <inc_lock+0xf8>
 8002f2a:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <inc_lock+0x118>)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	4413      	add	r3, r2
 8002f32:	330c      	adds	r3, #12
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	e001      	b.n	8002f40 <inc_lock+0xfc>
 8002f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f40:	4906      	ldr	r1, [pc, #24]	; (8002f5c <inc_lock+0x118>)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	440b      	add	r3, r1
 8002f48:	330c      	adds	r3, #12
 8002f4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3301      	adds	r3, #1
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	2000004c 	.word	0x2000004c

08002f60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d825      	bhi.n	8002fc0 <dec_lock+0x60>
		n = Files[i].ctr;
 8002f74:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <dec_lock+0x74>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	4413      	add	r3, r2
 8002f7c:	330c      	adds	r3, #12
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002f82:	89fb      	ldrh	r3, [r7, #14]
 8002f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f88:	d101      	bne.n	8002f8e <dec_lock+0x2e>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002f8e:	89fb      	ldrh	r3, [r7, #14]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <dec_lock+0x3a>
 8002f94:	89fb      	ldrh	r3, [r7, #14]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002f9a:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <dec_lock+0x74>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	4413      	add	r3, r2
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	89fa      	ldrh	r2, [r7, #14]
 8002fa6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002fa8:	89fb      	ldrh	r3, [r7, #14]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <dec_lock+0x5a>
 8002fae:	4a09      	ldr	r2, [pc, #36]	; (8002fd4 <dec_lock+0x74>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	4413      	add	r3, r2
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	737b      	strb	r3, [r7, #13]
 8002fbe:	e001      	b.n	8002fc4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002fc4:	7b7b      	ldrb	r3, [r7, #13]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	2000004c 	.word	0x2000004c

08002fd8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e010      	b.n	8003008 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002fe6:	4a0d      	ldr	r2, [pc, #52]	; (800301c <clear_lock+0x44>)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	4413      	add	r3, r2
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d105      	bne.n	8003002 <clear_lock+0x2a>
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <clear_lock+0x44>)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	4413      	add	r3, r2
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3301      	adds	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d9eb      	bls.n	8002fe6 <clear_lock+0xe>
	}
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	2000004c 	.word	0x2000004c

08003020 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	78db      	ldrb	r3, [r3, #3]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d034      	beq.n	800309e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003038:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7858      	ldrb	r0, [r3, #1]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003044:	2301      	movs	r3, #1
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	f7ff fd40 	bl	8002acc <disk_write>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	e022      	b.n	800309e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	1ad2      	subs	r2, r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	429a      	cmp	r2, r3
 800306c:	d217      	bcs.n	800309e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	789b      	ldrb	r3, [r3, #2]
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	e010      	b.n	8003098 <sync_window+0x78>
					wsect += fs->fsize;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4413      	add	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	7858      	ldrb	r0, [r3, #1]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800308a:	2301      	movs	r3, #1
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	f7ff fd1d 	bl	8002acc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	3b01      	subs	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d8eb      	bhi.n	8003076 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d01b      	beq.n	80030f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ffad 	bl	8003020 <sync_window>
 80030c6:	4603      	mov	r3, r0
 80030c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d113      	bne.n	80030f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7858      	ldrb	r0, [r3, #1]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80030da:	2301      	movs	r3, #1
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	f7ff fcd5 	bl	8002a8c <disk_read>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ff87 	bl	8003020 <sync_window>
 8003112:	4603      	mov	r3, r0
 8003114:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d159      	bne.n	80031d0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d149      	bne.n	80031b8 <sync_fs+0xb4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	791b      	ldrb	r3, [r3, #4]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d145      	bne.n	80031b8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	899b      	ldrh	r3, [r3, #12]
 8003136:	461a      	mov	r2, r3
 8003138:	2100      	movs	r1, #0
 800313a:	f7ff fda8 	bl	8002c8e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3338      	adds	r3, #56	; 0x38
 8003142:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003146:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fd37 	bl	8002bbe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3338      	adds	r3, #56	; 0x38
 8003154:	4921      	ldr	r1, [pc, #132]	; (80031dc <sync_fs+0xd8>)
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fd4c 	bl	8002bf4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3338      	adds	r3, #56	; 0x38
 8003160:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003164:	491e      	ldr	r1, [pc, #120]	; (80031e0 <sync_fs+0xdc>)
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fd44 	bl	8002bf4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3338      	adds	r3, #56	; 0x38
 8003170:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f7ff fd3a 	bl	8002bf4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3338      	adds	r3, #56	; 0x38
 8003184:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f7ff fd30 	bl	8002bf4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7858      	ldrb	r0, [r3, #1]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ac:	2301      	movs	r3, #1
 80031ae:	f7ff fc8d 	bl	8002acc <disk_write>
			fs->fsi_flag = 0;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	785b      	ldrb	r3, [r3, #1]
 80031bc:	2200      	movs	r2, #0
 80031be:	2100      	movs	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fca3 	bl	8002b0c <disk_ioctl>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <sync_fs+0xcc>
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	41615252 	.word	0x41615252
 80031e0:	61417272 	.word	0x61417272

080031e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	3b02      	subs	r3, #2
 80031f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	3b02      	subs	r3, #2
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d301      	bcc.n	8003204 <clust2sect+0x20>
 8003200:	2300      	movs	r3, #0
 8003202:	e008      	b.n	8003216 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	895b      	ldrh	r3, [r3, #10]
 8003208:	461a      	mov	r2, r3
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	fb03 f202 	mul.w	r2, r3, r2
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	4413      	add	r3, r2
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b086      	sub	sp, #24
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d904      	bls.n	8003242 <get_fat+0x20>
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003242:	2301      	movs	r3, #1
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	e0b7      	b.n	80033b8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003248:	f04f 33ff 	mov.w	r3, #4294967295
 800324c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d05a      	beq.n	800330c <get_fat+0xea>
 8003256:	2b03      	cmp	r3, #3
 8003258:	d07d      	beq.n	8003356 <get_fat+0x134>
 800325a:	2b01      	cmp	r3, #1
 800325c:	f040 80a2 	bne.w	80033a4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	899b      	ldrh	r3, [r3, #12]
 8003276:	4619      	mov	r1, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	fbb3 f3f1 	udiv	r3, r3, r1
 800327e:	4413      	add	r3, r2
 8003280:	4619      	mov	r1, r3
 8003282:	6938      	ldr	r0, [r7, #16]
 8003284:	f7ff ff10 	bl	80030a8 <move_window>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 808d 	bne.w	80033aa <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	60fa      	str	r2, [r7, #12]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	8992      	ldrh	r2, [r2, #12]
 800329a:	fbb3 f1f2 	udiv	r1, r3, r2
 800329e:	fb02 f201 	mul.w	r2, r2, r1
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	899b      	ldrh	r3, [r3, #12]
 80032b6:	4619      	mov	r1, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80032be:	4413      	add	r3, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	6938      	ldr	r0, [r7, #16]
 80032c4:	f7ff fef0 	bl	80030a8 <move_window>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d16f      	bne.n	80033ae <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	899b      	ldrh	r3, [r3, #12]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80032da:	fb02 f201 	mul.w	r2, r2, r1
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	461a      	mov	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <get_fat+0xe0>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	e002      	b.n	8003308 <get_fat+0xe6>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003308:	617b      	str	r3, [r7, #20]
			break;
 800330a:	e055      	b.n	80033b8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	899b      	ldrh	r3, [r3, #12]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	4619      	mov	r1, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003320:	4413      	add	r3, r2
 8003322:	4619      	mov	r1, r3
 8003324:	6938      	ldr	r0, [r7, #16]
 8003326:	f7ff febf 	bl	80030a8 <move_window>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d140      	bne.n	80033b2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	8992      	ldrh	r2, [r2, #12]
 800333e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003342:	fb02 f200 	mul.w	r2, r2, r0
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	440b      	add	r3, r1
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fbfc 	bl	8002b48 <ld_word>
 8003350:	4603      	mov	r3, r0
 8003352:	617b      	str	r3, [r7, #20]
			break;
 8003354:	e030      	b.n	80033b8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	899b      	ldrh	r3, [r3, #12]
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	b29b      	uxth	r3, r3
 8003362:	4619      	mov	r1, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	fbb3 f3f1 	udiv	r3, r3, r1
 800336a:	4413      	add	r3, r2
 800336c:	4619      	mov	r1, r3
 800336e:	6938      	ldr	r0, [r7, #16]
 8003370:	f7ff fe9a 	bl	80030a8 <move_window>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d11d      	bne.n	80033b6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	8992      	ldrh	r2, [r2, #12]
 8003388:	fbb3 f0f2 	udiv	r0, r3, r2
 800338c:	fb02 f200 	mul.w	r2, r2, r0
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	440b      	add	r3, r1
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fbef 	bl	8002b78 <ld_dword>
 800339a:	4603      	mov	r3, r0
 800339c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80033a0:	617b      	str	r3, [r7, #20]
			break;
 80033a2:	e009      	b.n	80033b8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80033a4:	2301      	movs	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e006      	b.n	80033b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033aa:	bf00      	nop
 80033ac:	e004      	b.n	80033b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033ae:	bf00      	nop
 80033b0:	e002      	b.n	80033b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80033b2:	bf00      	nop
 80033b4:	e000      	b.n	80033b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80033b6:	bf00      	nop
		}
	}

	return val;
 80033b8:	697b      	ldr	r3, [r7, #20]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80033c2:	b590      	push	{r4, r7, lr}
 80033c4:	b089      	sub	sp, #36	; 0x24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80033ce:	2302      	movs	r3, #2
 80033d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f240 8106 	bls.w	80035e6 <put_fat+0x224>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	f080 8100 	bcs.w	80035e6 <put_fat+0x224>
		switch (fs->fs_type) {
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	f000 8088 	beq.w	8003500 <put_fat+0x13e>
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	f000 80b0 	beq.w	8003556 <put_fat+0x194>
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	f040 80f5 	bne.w	80035e6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	085b      	lsrs	r3, r3, #1
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4413      	add	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	899b      	ldrh	r3, [r3, #12]
 8003412:	4619      	mov	r1, r3
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	fbb3 f3f1 	udiv	r3, r3, r1
 800341a:	4413      	add	r3, r2
 800341c:	4619      	mov	r1, r3
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f7ff fe42 	bl	80030a8 <move_window>
 8003424:	4603      	mov	r3, r0
 8003426:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003428:	7ffb      	ldrb	r3, [r7, #31]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 80d4 	bne.w	80035d8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	61ba      	str	r2, [r7, #24]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	8992      	ldrh	r2, [r2, #12]
 8003440:	fbb3 f0f2 	udiv	r0, r3, r2
 8003444:	fb02 f200 	mul.w	r2, r2, r0
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	440b      	add	r3, r1
 800344c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <put_fat+0xb2>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	b25b      	sxtb	r3, r3
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	b25a      	sxtb	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	b25b      	sxtb	r3, r3
 800346c:	4313      	orrs	r3, r2
 800346e:	b25b      	sxtb	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e001      	b.n	8003478 <put_fat+0xb6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	899b      	ldrh	r3, [r3, #12]
 800348a:	4619      	mov	r1, r3
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003492:	4413      	add	r3, r2
 8003494:	4619      	mov	r1, r3
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f7ff fe06 	bl	80030a8 <move_window>
 800349c:	4603      	mov	r3, r0
 800349e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80034a0:	7ffb      	ldrb	r3, [r7, #31]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 809a 	bne.w	80035dc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	899b      	ldrh	r3, [r3, #12]
 80034b2:	461a      	mov	r2, r3
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80034ba:	fb02 f200 	mul.w	r2, r2, r0
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	440b      	add	r3, r1
 80034c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <put_fat+0x114>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e00e      	b.n	80034f4 <put_fat+0x132>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b25b      	sxtb	r3, r3
 80034dc:	f023 030f 	bic.w	r3, r3, #15
 80034e0:	b25a      	sxtb	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	b25b      	sxtb	r3, r3
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	b25b      	sxtb	r3, r3
 80034ee:	4313      	orrs	r3, r2
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2201      	movs	r2, #1
 80034fc:	70da      	strb	r2, [r3, #3]
			break;
 80034fe:	e072      	b.n	80035e6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	899b      	ldrh	r3, [r3, #12]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	b29b      	uxth	r3, r3
 800350c:	4619      	mov	r1, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	fbb3 f3f1 	udiv	r3, r3, r1
 8003514:	4413      	add	r3, r2
 8003516:	4619      	mov	r1, r3
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff fdc5 	bl	80030a8 <move_window>
 800351e:	4603      	mov	r3, r0
 8003520:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003522:	7ffb      	ldrb	r3, [r7, #31]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d15b      	bne.n	80035e0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	8992      	ldrh	r2, [r2, #12]
 8003536:	fbb3 f0f2 	udiv	r0, r3, r2
 800353a:	fb02 f200 	mul.w	r2, r2, r0
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	440b      	add	r3, r1
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	b292      	uxth	r2, r2
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fb38 	bl	8002bbe <st_word>
			fs->wflag = 1;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	70da      	strb	r2, [r3, #3]
			break;
 8003554:	e047      	b.n	80035e6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	899b      	ldrh	r3, [r3, #12]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	b29b      	uxth	r3, r3
 8003562:	4619      	mov	r1, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	fbb3 f3f1 	udiv	r3, r3, r1
 800356a:	4413      	add	r3, r2
 800356c:	4619      	mov	r1, r3
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff fd9a 	bl	80030a8 <move_window>
 8003574:	4603      	mov	r3, r0
 8003576:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003578:	7ffb      	ldrb	r3, [r7, #31]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d132      	bne.n	80035e4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	8992      	ldrh	r2, [r2, #12]
 8003592:	fbb3 f0f2 	udiv	r0, r3, r2
 8003596:	fb02 f200 	mul.w	r2, r2, r0
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	440b      	add	r3, r1
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff faea 	bl	8002b78 <ld_dword>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035aa:	4323      	orrs	r3, r4
 80035ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	8992      	ldrh	r2, [r2, #12]
 80035bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80035c0:	fb02 f200 	mul.w	r2, r2, r0
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fb12 	bl	8002bf4 <st_dword>
			fs->wflag = 1;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	70da      	strb	r2, [r3, #3]
			break;
 80035d6:	e006      	b.n	80035e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80035d8:	bf00      	nop
 80035da:	e004      	b.n	80035e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80035dc:	bf00      	nop
 80035de:	e002      	b.n	80035e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80035e0:	bf00      	nop
 80035e2:	e000      	b.n	80035e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80035e4:	bf00      	nop
		}
	}
	return res;
 80035e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3724      	adds	r7, #36	; 0x24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd90      	pop	{r4, r7, pc}

080035f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d904      	bls.n	8003616 <remove_chain+0x26>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	d301      	bcc.n	800361a <remove_chain+0x2a>
 8003616:	2302      	movs	r3, #2
 8003618:	e04b      	b.n	80036b2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00c      	beq.n	800363a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003620:	f04f 32ff 	mov.w	r2, #4294967295
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	69b8      	ldr	r0, [r7, #24]
 8003628:	f7ff fecb 	bl	80033c2 <put_fat>
 800362c:	4603      	mov	r3, r0
 800362e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003630:	7ffb      	ldrb	r3, [r7, #31]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <remove_chain+0x4a>
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	e03b      	b.n	80036b2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff fdf0 	bl	8003222 <get_fat>
 8003642:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d031      	beq.n	80036ae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <remove_chain+0x64>
 8003650:	2302      	movs	r3, #2
 8003652:	e02e      	b.n	80036b2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d101      	bne.n	8003660 <remove_chain+0x70>
 800365c:	2301      	movs	r3, #1
 800365e:	e028      	b.n	80036b2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003660:	2200      	movs	r2, #0
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	69b8      	ldr	r0, [r7, #24]
 8003666:	f7ff feac 	bl	80033c2 <put_fat>
 800366a:	4603      	mov	r3, r0
 800366c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800366e:	7ffb      	ldrb	r3, [r7, #31]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <remove_chain+0x88>
 8003674:	7ffb      	ldrb	r3, [r7, #31]
 8003676:	e01c      	b.n	80036b2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	699a      	ldr	r2, [r3, #24]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	3b02      	subs	r3, #2
 8003682:	429a      	cmp	r2, r3
 8003684:	d20b      	bcs.n	800369e <remove_chain+0xae>
			fs->free_clst++;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	791b      	ldrb	r3, [r3, #4]
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	b2da      	uxtb	r2, r3
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3c6      	bcc.n	800363a <remove_chain+0x4a>
 80036ac:	e000      	b.n	80036b0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80036ae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b088      	sub	sp, #32
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10d      	bne.n	80036ec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <create_chain+0x2c>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d31b      	bcc.n	800371e <create_chain+0x64>
 80036e6:	2301      	movs	r3, #1
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	e018      	b.n	800371e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fd97 	bl	8003222 <get_fat>
 80036f4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d801      	bhi.n	8003700 <create_chain+0x46>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e070      	b.n	80037e2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d101      	bne.n	800370c <create_chain+0x52>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	e06a      	b.n	80037e2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	429a      	cmp	r2, r3
 8003714:	d201      	bcs.n	800371a <create_chain+0x60>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	e063      	b.n	80037e2 <create_chain+0x128>
		scl = clst;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3301      	adds	r3, #1
 8003726:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	429a      	cmp	r2, r3
 8003730:	d307      	bcc.n	8003742 <create_chain+0x88>
				ncl = 2;
 8003732:	2302      	movs	r3, #2
 8003734:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	429a      	cmp	r2, r3
 800373c:	d901      	bls.n	8003742 <create_chain+0x88>
 800373e:	2300      	movs	r3, #0
 8003740:	e04f      	b.n	80037e2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003742:	69f9      	ldr	r1, [r7, #28]
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff fd6c 	bl	8003222 <get_fat>
 800374a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00e      	beq.n	8003770 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d003      	beq.n	8003760 <create_chain+0xa6>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d101      	bne.n	8003764 <create_chain+0xaa>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	e03e      	b.n	80037e2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	429a      	cmp	r2, r3
 800376a:	d1da      	bne.n	8003722 <create_chain+0x68>
 800376c:	2300      	movs	r3, #0
 800376e:	e038      	b.n	80037e2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003770:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003772:	f04f 32ff 	mov.w	r2, #4294967295
 8003776:	69f9      	ldr	r1, [r7, #28]
 8003778:	6938      	ldr	r0, [r7, #16]
 800377a:	f7ff fe22 	bl	80033c2 <put_fat>
 800377e:	4603      	mov	r3, r0
 8003780:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <create_chain+0xe2>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d006      	beq.n	800379c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800378e:	69fa      	ldr	r2, [r7, #28]
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	6938      	ldr	r0, [r7, #16]
 8003794:	f7ff fe15 	bl	80033c2 <put_fat>
 8003798:	4603      	mov	r3, r0
 800379a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d116      	bne.n	80037d0 <create_chain+0x116>
		fs->last_clst = ncl;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	699a      	ldr	r2, [r3, #24]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	3b02      	subs	r3, #2
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d804      	bhi.n	80037c0 <create_chain+0x106>
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	1e5a      	subs	r2, r3, #1
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	791b      	ldrb	r3, [r3, #4]
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	711a      	strb	r2, [r3, #4]
 80037ce:	e007      	b.n	80037e0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d102      	bne.n	80037dc <create_chain+0x122>
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	e000      	b.n	80037de <create_chain+0x124>
 80037dc:	2301      	movs	r3, #1
 80037de:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80037e0:	69fb      	ldr	r3, [r7, #28]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b087      	sub	sp, #28
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	3304      	adds	r3, #4
 8003800:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	899b      	ldrh	r3, [r3, #12]
 8003806:	461a      	mov	r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	fbb3 f3f2 	udiv	r3, r3, r2
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	8952      	ldrh	r2, [r2, #10]
 8003812:	fbb3 f3f2 	udiv	r3, r3, r2
 8003816:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1d1a      	adds	r2, r3, #4
 800381c:	613a      	str	r2, [r7, #16]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <clmt_clust+0x42>
 8003828:	2300      	movs	r3, #0
 800382a:	e010      	b.n	800384e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	d307      	bcc.n	8003844 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	3304      	adds	r3, #4
 8003840:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003842:	e7e9      	b.n	8003818 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8003844:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4413      	add	r3, r2
}
 800384e:	4618      	mov	r0, r3
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003870:	d204      	bcs.n	800387c <dir_sdi+0x22>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <dir_sdi+0x26>
		return FR_INT_ERR;
 800387c:	2302      	movs	r3, #2
 800387e:	e071      	b.n	8003964 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <dir_sdi+0x46>
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d902      	bls.n	80038a0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10c      	bne.n	80038c0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	8912      	ldrh	r2, [r2, #8]
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d301      	bcc.n	80038b6 <dir_sdi+0x5c>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e056      	b.n	8003964 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	61da      	str	r2, [r3, #28]
 80038be:	e02d      	b.n	800391c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	895b      	ldrh	r3, [r3, #10]
 80038c4:	461a      	mov	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	899b      	ldrh	r3, [r3, #12]
 80038ca:	fb03 f302 	mul.w	r3, r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80038d0:	e019      	b.n	8003906 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6979      	ldr	r1, [r7, #20]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fca3 	bl	8003222 <get_fat>
 80038dc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d101      	bne.n	80038ea <dir_sdi+0x90>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e03c      	b.n	8003964 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d904      	bls.n	80038fa <dir_sdi+0xa0>
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d301      	bcc.n	80038fe <dir_sdi+0xa4>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e032      	b.n	8003964 <dir_sdi+0x10a>
			ofs -= csz;
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	429a      	cmp	r2, r3
 800390c:	d2e1      	bcs.n	80038d2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800390e:	6979      	ldr	r1, [r7, #20]
 8003910:	6938      	ldr	r0, [r7, #16]
 8003912:	f7ff fc67 	bl	80031e4 <clust2sect>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <dir_sdi+0xd4>
 800392a:	2302      	movs	r3, #2
 800392c:	e01a      	b.n	8003964 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	899b      	ldrh	r3, [r3, #12]
 8003936:	4619      	mov	r1, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	fbb3 f3f1 	udiv	r3, r3, r1
 800393e:	441a      	add	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	899b      	ldrh	r3, [r3, #12]
 800394e:	461a      	mov	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	fbb3 f0f2 	udiv	r0, r3, r2
 8003956:	fb02 f200 	mul.w	r2, r2, r0
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	18ca      	adds	r2, r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	3320      	adds	r3, #32
 8003982:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <dir_next+0x28>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003992:	d301      	bcc.n	8003998 <dir_next+0x2c>
 8003994:	2304      	movs	r3, #4
 8003996:	e0bb      	b.n	8003b10 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	899b      	ldrh	r3, [r3, #12]
 800399c:	461a      	mov	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80039a4:	fb02 f201 	mul.w	r2, r2, r1
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 809d 	bne.w	8003aea <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10b      	bne.n	80039da <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	8912      	ldrh	r2, [r2, #8]
 80039ca:	4293      	cmp	r3, r2
 80039cc:	f0c0 808d 	bcc.w	8003aea <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
 80039d6:	2304      	movs	r3, #4
 80039d8:	e09a      	b.n	8003b10 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	899b      	ldrh	r3, [r3, #12]
 80039de:	461a      	mov	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	8952      	ldrh	r2, [r2, #10]
 80039ea:	3a01      	subs	r2, #1
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d17b      	bne.n	8003aea <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f7ff fc11 	bl	8003222 <get_fat>
 8003a00:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d801      	bhi.n	8003a0c <dir_next+0xa0>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e081      	b.n	8003b10 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d101      	bne.n	8003a18 <dir_next+0xac>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e07b      	b.n	8003b10 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d359      	bcc.n	8003ad6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d104      	bne.n	8003a32 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	61da      	str	r2, [r3, #28]
 8003a2e:	2304      	movs	r3, #4
 8003a30:	e06e      	b.n	8003b10 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f7ff fe3d 	bl	80036ba <create_chain>
 8003a40:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <dir_next+0xe0>
 8003a48:	2307      	movs	r3, #7
 8003a4a:	e061      	b.n	8003b10 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <dir_next+0xea>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e05c      	b.n	8003b10 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d101      	bne.n	8003a62 <dir_next+0xf6>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e056      	b.n	8003b10 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff fadc 	bl	8003020 <sync_window>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <dir_next+0x106>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e04e      	b.n	8003b10 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	899b      	ldrh	r3, [r3, #12]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2100      	movs	r1, #0
 8003a80:	f7ff f905 	bl	8002c8e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	6979      	ldr	r1, [r7, #20]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff fbaa 	bl	80031e4 <clust2sect>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	635a      	str	r2, [r3, #52]	; 0x34
 8003a96:	e012      	b.n	8003abe <dir_next+0x152>
						fs->wflag = 1;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f7ff fabe 	bl	8003020 <sync_window>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <dir_next+0x142>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e030      	b.n	8003b10 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	895b      	ldrh	r3, [r3, #10]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d3e6      	bcc.n	8003a98 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad2      	subs	r2, r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003adc:	6979      	ldr	r1, [r7, #20]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7ff fb80 	bl	80031e4 <clust2sect>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	899b      	ldrh	r3, [r3, #12]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b02:	fb02 f200 	mul.w	r2, r2, r0
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	18ca      	adds	r2, r1, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003b28:	2100      	movs	r1, #0
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fe95 	bl	800385a <dir_sdi>
 8003b30:	4603      	mov	r3, r0
 8003b32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d12b      	bne.n	8003b92 <dir_alloc+0x7a>
		n = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	4619      	mov	r1, r3
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f7ff faaf 	bl	80030a8 <move_window>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d11d      	bne.n	8003b90 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2be5      	cmp	r3, #229	; 0xe5
 8003b5c:	d004      	beq.n	8003b68 <dir_alloc+0x50>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d102      	bne.n	8003b7c <dir_alloc+0x64>
 8003b76:	e00c      	b.n	8003b92 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff fef4 	bl	800396c <dir_next>
 8003b84:	4603      	mov	r3, r0
 8003b86:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0d7      	beq.n	8003b3e <dir_alloc+0x26>
 8003b8e:	e000      	b.n	8003b92 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003b90:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d101      	bne.n	8003b9c <dir_alloc+0x84>
 8003b98:	2307      	movs	r3, #7
 8003b9a:	75fb      	strb	r3, [r7, #23]
	return res;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	331a      	adds	r3, #26
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe ffc7 	bl	8002b48 <ld_word>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d109      	bne.n	8003bda <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	3314      	adds	r3, #20
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe ffbc 	bl	8002b48 <ld_word>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	331a      	adds	r3, #26
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe ffdf 	bl	8002bbe <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d109      	bne.n	8003c1c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f103 0214 	add.w	r2, r3, #20
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f7fe ffd1 	bl	8002bbe <st_word>
	}
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	331a      	adds	r3, #26
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe ff88 	bl	8002b48 <ld_word>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <cmp_lfn+0x1e>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e059      	b.n	8003cf6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c4a:	1e5a      	subs	r2, r3, #1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003c58:	2301      	movs	r3, #1
 8003c5a:	81fb      	strh	r3, [r7, #14]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	e033      	b.n	8003cca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003c62:	4a27      	ldr	r2, [pc, #156]	; (8003d00 <cmp_lfn+0xdc>)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4413      	add	r3, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe ff69 	bl	8002b48 <ld_word>
 8003c76:	4603      	mov	r3, r0
 8003c78:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8003c7a:	89fb      	ldrh	r3, [r7, #14]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01a      	beq.n	8003cb6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2bfe      	cmp	r3, #254	; 0xfe
 8003c84:	d812      	bhi.n	8003cac <cmp_lfn+0x88>
 8003c86:	89bb      	ldrh	r3, [r7, #12]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f001 fe13 	bl	80058b4 <ff_wtoupper>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	461c      	mov	r4, r3
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	617a      	str	r2, [r7, #20]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 fe07 	bl	80058b4 <ff_wtoupper>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	429c      	cmp	r4, r3
 8003caa:	d001      	beq.n	8003cb0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8003cac:	2300      	movs	r3, #0
 8003cae:	e022      	b.n	8003cf6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8003cb0:	89bb      	ldrh	r3, [r7, #12]
 8003cb2:	81fb      	strh	r3, [r7, #14]
 8003cb4:	e006      	b.n	8003cc4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003cb6:	89bb      	ldrh	r3, [r7, #12]
 8003cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d001      	beq.n	8003cc4 <cmp_lfn+0xa0>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e018      	b.n	8003cf6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	d9c8      	bls.n	8003c62 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <cmp_lfn+0xd0>
 8003cdc:	89fb      	ldrh	r3, [r7, #14]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <cmp_lfn+0xd0>
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <cmp_lfn+0xd0>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8003cf4:	2301      	movs	r3, #1
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd90      	pop	{r4, r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	08005b34 	.word	0x08005b34

08003d04 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	461a      	mov	r2, r3
 8003d12:	460b      	mov	r3, r1
 8003d14:	71fb      	strb	r3, [r7, #7]
 8003d16:	4613      	mov	r3, r2
 8003d18:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	330d      	adds	r3, #13
 8003d1e:	79ba      	ldrb	r2, [r7, #6]
 8003d20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	330b      	adds	r3, #11
 8003d26:	220f      	movs	r2, #15
 8003d28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	331a      	adds	r3, #26
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe ff40 	bl	8002bbe <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	1e5a      	subs	r2, r3, #1
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	82fb      	strh	r3, [r7, #22]
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003d56:	8afb      	ldrh	r3, [r7, #22]
 8003d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <put_lfn+0x6c>
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	61fa      	str	r2, [r7, #28]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003d70:	4a17      	ldr	r2, [pc, #92]	; (8003dd0 <put_lfn+0xcc>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	4413      	add	r3, r2
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	8afa      	ldrh	r2, [r7, #22]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe ff1b 	bl	8002bbe <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8003d88:	8afb      	ldrh	r3, [r7, #22]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <put_lfn+0x90>
 8003d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d92:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	3301      	adds	r3, #1
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d9da      	bls.n	8003d56 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003da0:	8afb      	ldrh	r3, [r7, #22]
 8003da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d006      	beq.n	8003db8 <put_lfn+0xb4>
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d103      	bne.n	8003dc0 <put_lfn+0xbc>
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	79fa      	ldrb	r2, [r7, #7]
 8003dc4:	701a      	strb	r2, [r3, #0]
}
 8003dc6:	bf00      	nop
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	08005b34 	.word	0x08005b34

08003dd4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08c      	sub	sp, #48	; 0x30
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8003de2:	220b      	movs	r2, #11
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7fe ff30 	bl	8002c4c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d92b      	bls.n	8003e4a <gen_numname+0x76>
		sr = seq;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8003df6:	e022      	b.n	8003e3e <gen_numname+0x6a>
			wc = *lfn++;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	1c9a      	adds	r2, r3, #2
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8003e02:	2300      	movs	r3, #0
 8003e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e06:	e017      	b.n	8003e38 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005a      	lsls	r2, r3, #1
 8003e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8003e16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e18:	085b      	lsrs	r3, r3, #1
 8003e1a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <gen_numname+0x5e>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8003e2c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8003e30:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	3301      	adds	r3, #1
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	2b0f      	cmp	r3, #15
 8003e3c:	d9e4      	bls.n	8003e08 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1d8      	bne.n	8003df8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8003e4a:	2307      	movs	r3, #7
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	3330      	adds	r3, #48	; 0x30
 8003e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8003e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e62:	2b39      	cmp	r3, #57	; 0x39
 8003e64:	d904      	bls.n	8003e70 <gen_numname+0x9c>
 8003e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e6a:	3307      	adds	r3, #7
 8003e6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	1e5a      	subs	r2, r3, #1
 8003e74:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003e80:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	603b      	str	r3, [r7, #0]
	} while (seq);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1de      	bne.n	8003e4e <gen_numname+0x7a>
	ns[i] = '~';
 8003e90:	f107 0214 	add.w	r2, r7, #20
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	4413      	add	r3, r2
 8003e98:	227e      	movs	r2, #126	; 0x7e
 8003e9a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea0:	e002      	b.n	8003ea8 <gen_numname+0xd4>
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d205      	bcs.n	8003ebc <gen_numname+0xe8>
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	4413      	add	r3, r2
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d1f2      	bne.n	8003ea2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	2b07      	cmp	r3, #7
 8003ec0:	d808      	bhi.n	8003ed4 <gen_numname+0x100>
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ec8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ecc:	4413      	add	r3, r2
 8003ece:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8003ed2:	e000      	b.n	8003ed6 <gen_numname+0x102>
 8003ed4:	2120      	movs	r1, #32
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	627a      	str	r2, [r7, #36]	; 0x24
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	460a      	mov	r2, r1
 8003ee2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	2b07      	cmp	r3, #7
 8003ee8:	d9e8      	bls.n	8003ebc <gen_numname+0xe8>
}
 8003eea:	bf00      	nop
 8003eec:	3730      	adds	r7, #48	; 0x30
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8003efe:	230b      	movs	r3, #11
 8003f00:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	0852      	lsrs	r2, r2, #1
 8003f08:	01db      	lsls	r3, r3, #7
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	1c59      	adds	r1, r3, #1
 8003f12:	6079      	str	r1, [r7, #4]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1ed      	bne.n	8003f02 <sum_sfn+0x10>
	return sum;
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003f42:	2100      	movs	r1, #0
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fc88 	bl	800385a <dir_sdi>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <dir_find+0x24>
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	e0a9      	b.n	80040ac <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003f58:	23ff      	movs	r3, #255	; 0xff
 8003f5a:	753b      	strb	r3, [r7, #20]
 8003f5c:	7d3b      	ldrb	r3, [r7, #20]
 8003f5e:	757b      	strb	r3, [r7, #21]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f04f 32ff 	mov.w	r2, #4294967295
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6938      	ldr	r0, [r7, #16]
 8003f70:	f7ff f89a 	bl	80030a8 <move_window>
 8003f74:	4603      	mov	r3, r0
 8003f76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 8090 	bne.w	80040a0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003f88:	7dbb      	ldrb	r3, [r7, #22]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <dir_find+0x60>
 8003f8e:	2304      	movs	r3, #4
 8003f90:	75fb      	strb	r3, [r7, #23]
 8003f92:	e08a      	b.n	80040aa <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	330b      	adds	r3, #11
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003fa8:	7dbb      	ldrb	r3, [r7, #22]
 8003faa:	2be5      	cmp	r3, #229	; 0xe5
 8003fac:	d007      	beq.n	8003fbe <dir_find+0x8a>
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <dir_find+0x98>
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d006      	beq.n	8003fcc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003fbe:	23ff      	movs	r3, #255	; 0xff
 8003fc0:	757b      	strb	r3, [r7, #21]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8003fca:	e05e      	b.n	800408a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b0f      	cmp	r3, #15
 8003fd0:	d136      	bne.n	8004040 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d154      	bne.n	800408a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003fe0:	7dbb      	ldrb	r3, [r7, #22]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	7b5b      	ldrb	r3, [r3, #13]
 8003ff0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8003ff2:	7dbb      	ldrb	r3, [r7, #22]
 8003ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff8:	75bb      	strb	r3, [r7, #22]
 8003ffa:	7dbb      	ldrb	r3, [r7, #22]
 8003ffc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004006:	7dba      	ldrb	r2, [r7, #22]
 8004008:	7d7b      	ldrb	r3, [r7, #21]
 800400a:	429a      	cmp	r2, r3
 800400c:	d115      	bne.n	800403a <dir_find+0x106>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	330d      	adds	r3, #13
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	7d3a      	ldrb	r2, [r7, #20]
 8004018:	429a      	cmp	r2, r3
 800401a:	d10e      	bne.n	800403a <dir_find+0x106>
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f7ff fdfc 	bl	8003c24 <cmp_lfn>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <dir_find+0x106>
 8004032:	7d7b      	ldrb	r3, [r7, #21]
 8004034:	3b01      	subs	r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	e000      	b.n	800403c <dir_find+0x108>
 800403a:	23ff      	movs	r3, #255	; 0xff
 800403c:	757b      	strb	r3, [r7, #21]
 800403e:	e024      	b.n	800408a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004040:	7d7b      	ldrb	r3, [r7, #21]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <dir_find+0x126>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ff51 	bl	8003ef2 <sum_sfn>
 8004050:	4603      	mov	r3, r0
 8004052:	461a      	mov	r2, r3
 8004054:	7d3b      	ldrb	r3, [r7, #20]
 8004056:	4293      	cmp	r3, r2
 8004058:	d024      	beq.n	80040a4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <dir_find+0x14a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a18      	ldr	r0, [r3, #32]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3324      	adds	r3, #36	; 0x24
 8004070:	220b      	movs	r2, #11
 8004072:	4619      	mov	r1, r3
 8004074:	f7fe fe25 	bl	8002cc2 <mem_cmp>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d014      	beq.n	80040a8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800407e:	23ff      	movs	r3, #255	; 0xff
 8004080:	757b      	strb	r3, [r7, #21]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f04f 32ff 	mov.w	r2, #4294967295
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800408a:	2100      	movs	r1, #0
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fc6d 	bl	800396c <dir_next>
 8004092:	4603      	mov	r3, r0
 8004094:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004096:	7dfb      	ldrb	r3, [r7, #23]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f43f af65 	beq.w	8003f68 <dir_find+0x34>
 800409e:	e004      	b.n	80040aa <dir_find+0x176>
		if (res != FR_OK) break;
 80040a0:	bf00      	nop
 80040a2:	e002      	b.n	80040aa <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80040a4:	bf00      	nop
 80040a6:	e000      	b.n	80040aa <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80040a8:	bf00      	nop

	return res;
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08c      	sub	sp, #48	; 0x30
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80040c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <dir_register+0x20>
 80040d0:	2306      	movs	r3, #6
 80040d2:	e0e0      	b.n	8004296 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80040d4:	2300      	movs	r3, #0
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
 80040d8:	e002      	b.n	80040e0 <dir_register+0x2c>
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	3301      	adds	r3, #1
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f4      	bne.n	80040da <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80040f6:	f107 030c 	add.w	r3, r7, #12
 80040fa:	220c      	movs	r2, #12
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fe fda5 	bl	8002c4c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d032      	beq.n	8004172 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2240      	movs	r2, #64	; 0x40
 8004110:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8004114:	2301      	movs	r3, #1
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28
 8004118:	e016      	b.n	8004148 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	f107 010c 	add.w	r1, r7, #12
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	f7ff fe53 	bl	8003dd4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ff00 	bl	8003f34 <dir_find>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800413a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	3301      	adds	r3, #1
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	2b63      	cmp	r3, #99	; 0x63
 800414c:	d9e5      	bls.n	800411a <dir_register+0x66>
 800414e:	e000      	b.n	8004152 <dir_register+0x9e>
			if (res != FR_OK) break;
 8004150:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	2b64      	cmp	r3, #100	; 0x64
 8004156:	d101      	bne.n	800415c <dir_register+0xa8>
 8004158:	2307      	movs	r3, #7
 800415a:	e09c      	b.n	8004296 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800415c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004160:	2b04      	cmp	r3, #4
 8004162:	d002      	beq.n	800416a <dir_register+0xb6>
 8004164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004168:	e095      	b.n	8004296 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800416a:	7dfa      	ldrb	r2, [r7, #23]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <dir_register+0xd8>
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	330c      	adds	r3, #12
 8004180:	4a47      	ldr	r2, [pc, #284]	; (80042a0 <dir_register+0x1ec>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	3301      	adds	r3, #1
 800418a:	e000      	b.n	800418e <dir_register+0xda>
 800418c:	2301      	movs	r3, #1
 800418e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004190:	6a39      	ldr	r1, [r7, #32]
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fcc0 	bl	8003b18 <dir_alloc>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800419e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d148      	bne.n	8004238 <dir_register+0x184>
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d042      	beq.n	8004238 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	015b      	lsls	r3, r3, #5
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff fb4b 	bl	800385a <dir_sdi>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80041ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d132      	bne.n	8004238 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3324      	adds	r3, #36	; 0x24
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fe8b 	bl	8003ef2 <sum_sfn>
 80041dc:	4603      	mov	r3, r0
 80041de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	4619      	mov	r1, r3
 80041e6:	69f8      	ldr	r0, [r7, #28]
 80041e8:	f7fe ff5e 	bl	80030a8 <move_window>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80041f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d11d      	bne.n	8004236 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	6918      	ldr	r0, [r3, #16]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a19      	ldr	r1, [r3, #32]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	7efb      	ldrb	r3, [r7, #27]
 8004208:	f7ff fd7c 	bl	8003d04 <put_lfn>
				fs->wflag = 1;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2201      	movs	r2, #1
 8004210:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004212:	2100      	movs	r1, #0
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fba9 	bl	800396c <dir_next>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004220:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004224:	2b00      	cmp	r3, #0
 8004226:	d107      	bne.n	8004238 <dir_register+0x184>
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	3b01      	subs	r3, #1
 800422c:	623b      	str	r3, [r7, #32]
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1d5      	bne.n	80041e0 <dir_register+0x12c>
 8004234:	e000      	b.n	8004238 <dir_register+0x184>
				if (res != FR_OK) break;
 8004236:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800423c:	2b00      	cmp	r3, #0
 800423e:	d128      	bne.n	8004292 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	4619      	mov	r1, r3
 8004246:	69f8      	ldr	r0, [r7, #28]
 8004248:	f7fe ff2e 	bl	80030a8 <move_window>
 800424c:	4603      	mov	r3, r0
 800424e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004256:	2b00      	cmp	r3, #0
 8004258:	d11b      	bne.n	8004292 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	2220      	movs	r2, #32
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fd13 	bl	8002c8e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a18      	ldr	r0, [r3, #32]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3324      	adds	r3, #36	; 0x24
 8004270:	220b      	movs	r2, #11
 8004272:	4619      	mov	r1, r3
 8004274:	f7fe fcea 	bl	8002c4c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	330c      	adds	r3, #12
 8004284:	f002 0218 	and.w	r2, r2, #24
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2201      	movs	r2, #1
 8004290:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004296:	4618      	mov	r0, r3
 8004298:	3730      	adds	r7, #48	; 0x30
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	4ec4ec4f 	.word	0x4ec4ec4f

080042a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	; 0x28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	61ba      	str	r2, [r7, #24]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4413      	add	r3, r2
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80042d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042d4:	2b1f      	cmp	r3, #31
 80042d6:	d940      	bls.n	800435a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80042d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042da:	2b2f      	cmp	r3, #47	; 0x2f
 80042dc:	d006      	beq.n	80042ec <create_name+0x48>
 80042de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042e0:	2b5c      	cmp	r3, #92	; 0x5c
 80042e2:	d110      	bne.n	8004306 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80042e4:	e002      	b.n	80042ec <create_name+0x48>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	3301      	adds	r3, #1
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4413      	add	r3, r2
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b2f      	cmp	r3, #47	; 0x2f
 80042f6:	d0f6      	beq.n	80042e6 <create_name+0x42>
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	4413      	add	r3, r2
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b5c      	cmp	r3, #92	; 0x5c
 8004302:	d0f0      	beq.n	80042e6 <create_name+0x42>
			break;
 8004304:	e02a      	b.n	800435c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2bfe      	cmp	r3, #254	; 0xfe
 800430a:	d901      	bls.n	8004310 <create_name+0x6c>
 800430c:	2306      	movs	r3, #6
 800430e:	e177      	b.n	8004600 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004312:	b2db      	uxtb	r3, r3
 8004314:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004318:	2101      	movs	r1, #1
 800431a:	4618      	mov	r0, r3
 800431c:	f001 fa8e 	bl	800583c <ff_convert>
 8004320:	4603      	mov	r3, r0
 8004322:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <create_name+0x8a>
 800432a:	2306      	movs	r3, #6
 800432c:	e168      	b.n	8004600 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800432e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004330:	2b7f      	cmp	r3, #127	; 0x7f
 8004332:	d809      	bhi.n	8004348 <create_name+0xa4>
 8004334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004336:	4619      	mov	r1, r3
 8004338:	48b3      	ldr	r0, [pc, #716]	; (8004608 <create_name+0x364>)
 800433a:	f7fe fce9 	bl	8002d10 <chk_chr>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <create_name+0xa4>
 8004344:	2306      	movs	r3, #6
 8004346:	e15b      	b.n	8004600 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	617a      	str	r2, [r7, #20]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004356:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004358:	e7b4      	b.n	80042c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800435a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	441a      	add	r2, r3
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004368:	2b1f      	cmp	r3, #31
 800436a:	d801      	bhi.n	8004370 <create_name+0xcc>
 800436c:	2304      	movs	r3, #4
 800436e:	e000      	b.n	8004372 <create_name+0xce>
 8004370:	2300      	movs	r3, #0
 8004372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004376:	e011      	b.n	800439c <create_name+0xf8>
		w = lfn[di - 1];
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800437e:	3b01      	subs	r3, #1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800438a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800438c:	2b20      	cmp	r3, #32
 800438e:	d002      	beq.n	8004396 <create_name+0xf2>
 8004390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004392:	2b2e      	cmp	r3, #46	; 0x2e
 8004394:	d106      	bne.n	80043a4 <create_name+0x100>
		di--;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	3b01      	subs	r3, #1
 800439a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1ea      	bne.n	8004378 <create_name+0xd4>
 80043a2:	e000      	b.n	80043a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80043a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	2200      	movs	r2, #0
 80043b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <create_name+0x118>
 80043b8:	2306      	movs	r3, #6
 80043ba:	e121      	b.n	8004600 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3324      	adds	r3, #36	; 0x24
 80043c0:	220b      	movs	r2, #11
 80043c2:	2120      	movs	r1, #32
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fc62 	bl	8002c8e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	e002      	b.n	80043d6 <create_name+0x132>
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4413      	add	r3, r2
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d0f5      	beq.n	80043d0 <create_name+0x12c>
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	2b2e      	cmp	r3, #46	; 0x2e
 80043f0:	d0ee      	beq.n	80043d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d009      	beq.n	800440c <create_name+0x168>
 80043f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043fc:	f043 0303 	orr.w	r3, r3, #3
 8004400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004404:	e002      	b.n	800440c <create_name+0x168>
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3b01      	subs	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <create_name+0x182>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004418:	3b01      	subs	r3, #1
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	2b2e      	cmp	r3, #46	; 0x2e
 8004424:	d1ef      	bne.n	8004406 <create_name+0x162>

	i = b = 0; ni = 8;
 8004426:	2300      	movs	r3, #0
 8004428:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800442c:	2300      	movs	r3, #0
 800442e:	623b      	str	r3, [r7, #32]
 8004430:	2308      	movs	r3, #8
 8004432:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	61ba      	str	r2, [r7, #24]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8090 	beq.w	800456c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800444c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800444e:	2b20      	cmp	r3, #32
 8004450:	d006      	beq.n	8004460 <create_name+0x1bc>
 8004452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004454:	2b2e      	cmp	r3, #46	; 0x2e
 8004456:	d10a      	bne.n	800446e <create_name+0x1ca>
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	429a      	cmp	r2, r3
 800445e:	d006      	beq.n	800446e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004464:	f043 0303 	orr.w	r3, r3, #3
 8004468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800446c:	e07d      	b.n	800456a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	429a      	cmp	r2, r3
 8004474:	d203      	bcs.n	800447e <create_name+0x1da>
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	429a      	cmp	r2, r3
 800447c:	d123      	bne.n	80044c6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2b0b      	cmp	r3, #11
 8004482:	d106      	bne.n	8004492 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004488:	f043 0303 	orr.w	r3, r3, #3
 800448c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004490:	e06f      	b.n	8004572 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	429a      	cmp	r2, r3
 8004498:	d005      	beq.n	80044a6 <create_name+0x202>
 800449a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800449e:	f043 0303 	orr.w	r3, r3, #3
 80044a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d860      	bhi.n	8004570 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	2308      	movs	r3, #8
 80044b4:	623b      	str	r3, [r7, #32]
 80044b6:	230b      	movs	r3, #11
 80044b8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80044ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80044c4:	e051      	b.n	800456a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80044c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044c8:	2b7f      	cmp	r3, #127	; 0x7f
 80044ca:	d914      	bls.n	80044f6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80044cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 f9b3 	bl	800583c <ff_convert>
 80044d6:	4603      	mov	r3, r0
 80044d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80044da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <create_name+0x246>
 80044e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044e2:	3b80      	subs	r3, #128	; 0x80
 80044e4:	4a49      	ldr	r2, [pc, #292]	; (800460c <create_name+0x368>)
 80044e6:	5cd3      	ldrb	r3, [r2, r3]
 80044e8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80044ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044ee:	f043 0302 	orr.w	r3, r3, #2
 80044f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80044f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <create_name+0x268>
 80044fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044fe:	4619      	mov	r1, r3
 8004500:	4843      	ldr	r0, [pc, #268]	; (8004610 <create_name+0x36c>)
 8004502:	f7fe fc05 	bl	8002d10 <chk_chr>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800450c:	235f      	movs	r3, #95	; 0x5f
 800450e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004514:	f043 0303 	orr.w	r3, r3, #3
 8004518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800451c:	e01b      	b.n	8004556 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800451e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d909      	bls.n	8004538 <create_name+0x294>
 8004524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004526:	2b5a      	cmp	r3, #90	; 0x5a
 8004528:	d806      	bhi.n	8004538 <create_name+0x294>
					b |= 2;
 800452a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800452e:	f043 0302 	orr.w	r3, r3, #2
 8004532:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004536:	e00e      	b.n	8004556 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800453a:	2b60      	cmp	r3, #96	; 0x60
 800453c:	d90b      	bls.n	8004556 <create_name+0x2b2>
 800453e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004540:	2b7a      	cmp	r3, #122	; 0x7a
 8004542:	d808      	bhi.n	8004556 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8004544:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004552:	3b20      	subs	r3, #32
 8004554:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	623a      	str	r2, [r7, #32]
 800455c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800455e:	b2d1      	uxtb	r1, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	460a      	mov	r2, r1
 8004566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800456a:	e763      	b.n	8004434 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8004570:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004578:	2be5      	cmp	r3, #229	; 0xe5
 800457a:	d103      	bne.n	8004584 <create_name+0x2e0>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2205      	movs	r2, #5
 8004580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2b08      	cmp	r3, #8
 8004588:	d104      	bne.n	8004594 <create_name+0x2f0>
 800458a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d005      	beq.n	80045ac <create_name+0x308>
 80045a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d105      	bne.n	80045b8 <create_name+0x314>
 80045ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045b0:	f043 0302 	orr.w	r3, r3, #2
 80045b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80045b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d117      	bne.n	80045f4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80045c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d105      	bne.n	80045dc <create_name+0x338>
 80045d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045d4:	f043 0310 	orr.w	r3, r3, #16
 80045d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80045dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d105      	bne.n	80045f4 <create_name+0x350>
 80045e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ec:	f043 0308 	orr.w	r3, r3, #8
 80045f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80045fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80045fe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8004600:	4618      	mov	r0, r3
 8004602:	3728      	adds	r7, #40	; 0x28
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	08005a5c 	.word	0x08005a5c
 800460c:	08005ab4 	.word	0x08005ab4
 8004610:	08005a68 	.word	0x08005a68

08004614 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004628:	e002      	b.n	8004630 <follow_path+0x1c>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b2f      	cmp	r3, #47	; 0x2f
 8004636:	d0f8      	beq.n	800462a <follow_path+0x16>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b5c      	cmp	r3, #92	; 0x5c
 800463e:	d0f4      	beq.n	800462a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b1f      	cmp	r3, #31
 800464c:	d80a      	bhi.n	8004664 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2280      	movs	r2, #128	; 0x80
 8004652:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004656:	2100      	movs	r1, #0
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff f8fe 	bl	800385a <dir_sdi>
 800465e:	4603      	mov	r3, r0
 8004660:	75fb      	strb	r3, [r7, #23]
 8004662:	e048      	b.n	80046f6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004664:	463b      	mov	r3, r7
 8004666:	4619      	mov	r1, r3
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff fe1b 	bl	80042a4 <create_name>
 800466e:	4603      	mov	r3, r0
 8004670:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d139      	bne.n	80046ec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff fc5b 	bl	8003f34 <dir_find>
 800467e:	4603      	mov	r3, r0
 8004680:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004688:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800468a:	7dfb      	ldrb	r3, [r7, #23]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d12c      	bne.n	80046f0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004696:	7afb      	ldrb	r3, [r7, #11]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d127      	bne.n	80046f0 <follow_path+0xdc>
 80046a0:	2305      	movs	r3, #5
 80046a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80046a4:	e024      	b.n	80046f0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80046a6:	7afb      	ldrb	r3, [r7, #11]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d121      	bne.n	80046f4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	799b      	ldrb	r3, [r3, #6]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80046bc:	2305      	movs	r3, #5
 80046be:	75fb      	strb	r3, [r7, #23]
 80046c0:	e019      	b.n	80046f6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	8992      	ldrh	r2, [r2, #12]
 80046d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80046d4:	fb02 f200 	mul.w	r2, r2, r0
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	440b      	add	r3, r1
 80046dc:	4619      	mov	r1, r3
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff fa61 	bl	8003ba6 <ld_clust>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80046ea:	e7bb      	b.n	8004664 <follow_path+0x50>
			if (res != FR_OK) break;
 80046ec:	bf00      	nop
 80046ee:	e002      	b.n	80046f6 <follow_path+0xe2>
				break;
 80046f0:	bf00      	nop
 80046f2:	e000      	b.n	80046f6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80046f4:	bf00      	nop
			}
		}
	}

	return res;
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004708:	f04f 33ff 	mov.w	r3, #4294967295
 800470c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d031      	beq.n	800477a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	e002      	b.n	8004724 <get_ldnumber+0x24>
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	3301      	adds	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b1f      	cmp	r3, #31
 800472a:	d903      	bls.n	8004734 <get_ldnumber+0x34>
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b3a      	cmp	r3, #58	; 0x3a
 8004732:	d1f4      	bne.n	800471e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b3a      	cmp	r3, #58	; 0x3a
 800473a:	d11c      	bne.n	8004776 <get_ldnumber+0x76>
			tp = *path;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	60fa      	str	r2, [r7, #12]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	3b30      	subs	r3, #48	; 0x30
 800474c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b09      	cmp	r3, #9
 8004752:	d80e      	bhi.n	8004772 <get_ldnumber+0x72>
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	429a      	cmp	r2, r3
 800475a:	d10a      	bne.n	8004772 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d107      	bne.n	8004772 <get_ldnumber+0x72>
					vol = (int)i;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	3301      	adds	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	e002      	b.n	800477c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800477a:	693b      	ldr	r3, [r7, #16]
}
 800477c:	4618      	mov	r0, r3
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	70da      	strb	r2, [r3, #3]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f04f 32ff 	mov.w	r2, #4294967295
 800479e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80047a0:	6839      	ldr	r1, [r7, #0]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fe fc80 	bl	80030a8 <move_window>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <check_fs+0x2a>
 80047ae:	2304      	movs	r3, #4
 80047b0:	e038      	b.n	8004824 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3338      	adds	r3, #56	; 0x38
 80047b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe f9c4 	bl	8002b48 <ld_word>
 80047c0:	4603      	mov	r3, r0
 80047c2:	461a      	mov	r2, r3
 80047c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <check_fs+0x48>
 80047cc:	2303      	movs	r3, #3
 80047ce:	e029      	b.n	8004824 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047d6:	2be9      	cmp	r3, #233	; 0xe9
 80047d8:	d009      	beq.n	80047ee <check_fs+0x66>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047e0:	2beb      	cmp	r3, #235	; 0xeb
 80047e2:	d11e      	bne.n	8004822 <check_fs+0x9a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047ea:	2b90      	cmp	r3, #144	; 0x90
 80047ec:	d119      	bne.n	8004822 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3338      	adds	r3, #56	; 0x38
 80047f2:	3336      	adds	r3, #54	; 0x36
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe f9bf 	bl	8002b78 <ld_dword>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004800:	4a0a      	ldr	r2, [pc, #40]	; (800482c <check_fs+0xa4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <check_fs+0x82>
 8004806:	2300      	movs	r3, #0
 8004808:	e00c      	b.n	8004824 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3338      	adds	r3, #56	; 0x38
 800480e:	3352      	adds	r3, #82	; 0x52
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe f9b1 	bl	8002b78 <ld_dword>
 8004816:	4602      	mov	r2, r0
 8004818:	4b05      	ldr	r3, [pc, #20]	; (8004830 <check_fs+0xa8>)
 800481a:	429a      	cmp	r2, r3
 800481c:	d101      	bne.n	8004822 <check_fs+0x9a>
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004822:	2302      	movs	r3, #2
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	00544146 	.word	0x00544146
 8004830:	33544146 	.word	0x33544146

08004834 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b096      	sub	sp, #88	; 0x58
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	4613      	mov	r3, r2
 8004840:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7ff ff59 	bl	8004700 <get_ldnumber>
 800484e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004852:	2b00      	cmp	r3, #0
 8004854:	da01      	bge.n	800485a <find_volume+0x26>
 8004856:	230b      	movs	r3, #11
 8004858:	e268      	b.n	8004d2c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800485a:	4ab0      	ldr	r2, [pc, #704]	; (8004b1c <find_volume+0x2e8>)
 800485c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004862:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <find_volume+0x3a>
 800486a:	230c      	movs	r3, #12
 800486c:	e25e      	b.n	8004d2c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004872:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01a      	beq.n	80048ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	4618      	mov	r0, r3
 800488a:	f7fe f8bf 	bl	8002a0c <disk_status>
 800488e:	4603      	mov	r3, r0
 8004890:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004894:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10c      	bne.n	80048ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <find_volume+0x82>
 80048a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80048b2:	230a      	movs	r3, #10
 80048b4:	e23a      	b.n	8004d2c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80048b6:	2300      	movs	r3, #0
 80048b8:	e238      	b.n	8004d2c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80048c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80048c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fe f8b7 	bl	8002a40 <disk_initialize>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80048d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80048e4:	2303      	movs	r3, #3
 80048e6:	e221      	b.n	8004d2c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <find_volume+0xca>
 80048ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80048fa:	230a      	movs	r3, #10
 80048fc:	e216      	b.n	8004d2c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	7858      	ldrb	r0, [r3, #1]
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	330c      	adds	r3, #12
 8004906:	461a      	mov	r2, r3
 8004908:	2102      	movs	r1, #2
 800490a:	f7fe f8ff 	bl	8002b0c <disk_ioctl>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <find_volume+0xe4>
 8004914:	2301      	movs	r3, #1
 8004916:	e209      	b.n	8004d2c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	899b      	ldrh	r3, [r3, #12]
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004920:	d80d      	bhi.n	800493e <find_volume+0x10a>
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	899b      	ldrh	r3, [r3, #12]
 8004926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492a:	d308      	bcc.n	800493e <find_volume+0x10a>
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	899b      	ldrh	r3, [r3, #12]
 8004930:	461a      	mov	r2, r3
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	899b      	ldrh	r3, [r3, #12]
 8004936:	3b01      	subs	r3, #1
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <find_volume+0x10e>
 800493e:	2301      	movs	r3, #1
 8004940:	e1f4      	b.n	8004d2c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004946:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004948:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800494a:	f7ff ff1d 	bl	8004788 <check_fs>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004954:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004958:	2b02      	cmp	r3, #2
 800495a:	d14b      	bne.n	80049f4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800495c:	2300      	movs	r3, #0
 800495e:	643b      	str	r3, [r7, #64]	; 0x40
 8004960:	e01f      	b.n	80049a2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004970:	4413      	add	r3, r2
 8004972:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	3304      	adds	r3, #4
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d006      	beq.n	800498c <find_volume+0x158>
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	3308      	adds	r3, #8
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe f8f8 	bl	8002b78 <ld_dword>
 8004988:	4602      	mov	r2, r0
 800498a:	e000      	b.n	800498e <find_volume+0x15a>
 800498c:	2200      	movs	r2, #0
 800498e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004996:	440b      	add	r3, r1
 8004998:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800499c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800499e:	3301      	adds	r3, #1
 80049a0:	643b      	str	r3, [r7, #64]	; 0x40
 80049a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d9dc      	bls.n	8004962 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80049a8:	2300      	movs	r3, #0
 80049aa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80049ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <find_volume+0x184>
 80049b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b4:	3b01      	subs	r3, #1
 80049b6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80049b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80049c0:	4413      	add	r3, r2
 80049c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80049c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <find_volume+0x1a6>
 80049ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049d2:	f7ff fed9 	bl	8004788 <check_fs>
 80049d6:	4603      	mov	r3, r0
 80049d8:	e000      	b.n	80049dc <find_volume+0x1a8>
 80049da:	2303      	movs	r3, #3
 80049dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80049e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d905      	bls.n	80049f4 <find_volume+0x1c0>
 80049e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ea:	3301      	adds	r3, #1
 80049ec:	643b      	str	r3, [r7, #64]	; 0x40
 80049ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d9e1      	bls.n	80049b8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80049f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d101      	bne.n	8004a00 <find_volume+0x1cc>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e195      	b.n	8004d2c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004a00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d901      	bls.n	8004a0c <find_volume+0x1d8>
 8004a08:	230d      	movs	r3, #13
 8004a0a:	e18f      	b.n	8004d2c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0e:	3338      	adds	r3, #56	; 0x38
 8004a10:	330b      	adds	r3, #11
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe f898 	bl	8002b48 <ld_word>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	899b      	ldrh	r3, [r3, #12]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <find_volume+0x1f4>
 8004a24:	230d      	movs	r3, #13
 8004a26:	e181      	b.n	8004d2c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	3338      	adds	r3, #56	; 0x38
 8004a2c:	3316      	adds	r3, #22
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe f88a 	bl	8002b48 <ld_word>
 8004a34:	4603      	mov	r3, r0
 8004a36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <find_volume+0x218>
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	3338      	adds	r3, #56	; 0x38
 8004a42:	3324      	adds	r3, #36	; 0x24
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fe f897 	bl	8002b78 <ld_dword>
 8004a4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a50:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5e:	789b      	ldrb	r3, [r3, #2]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d005      	beq.n	8004a70 <find_volume+0x23c>
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	789b      	ldrb	r3, [r3, #2]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d001      	beq.n	8004a70 <find_volume+0x23c>
 8004a6c:	230d      	movs	r3, #13
 8004a6e:	e15d      	b.n	8004d2c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	789b      	ldrb	r3, [r3, #2]
 8004a74:	461a      	mov	r2, r3
 8004a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a78:	fb02 f303 	mul.w	r3, r2, r3
 8004a7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	895b      	ldrh	r3, [r3, #10]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <find_volume+0x270>
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	895b      	ldrh	r3, [r3, #10]
 8004a96:	461a      	mov	r2, r3
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	895b      	ldrh	r3, [r3, #10]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <find_volume+0x274>
 8004aa4:	230d      	movs	r3, #13
 8004aa6:	e141      	b.n	8004d2c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aaa:	3338      	adds	r3, #56	; 0x38
 8004aac:	3311      	adds	r3, #17
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe f84a 	bl	8002b48 <ld_word>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	891b      	ldrh	r3, [r3, #8]
 8004ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ac2:	8992      	ldrh	r2, [r2, #12]
 8004ac4:	0952      	lsrs	r2, r2, #5
 8004ac6:	b292      	uxth	r2, r2
 8004ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004acc:	fb02 f201 	mul.w	r2, r2, r1
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <find_volume+0x2a8>
 8004ad8:	230d      	movs	r3, #13
 8004ada:	e127      	b.n	8004d2c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	3338      	adds	r3, #56	; 0x38
 8004ae0:	3313      	adds	r3, #19
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe f830 	bl	8002b48 <ld_word>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <find_volume+0x2cc>
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	3338      	adds	r3, #56	; 0x38
 8004af6:	3320      	adds	r3, #32
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe f83d 	bl	8002b78 <ld_dword>
 8004afe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	3338      	adds	r3, #56	; 0x38
 8004b04:	330e      	adds	r3, #14
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fe f81e 	bl	8002b48 <ld_word>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004b10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <find_volume+0x2ec>
 8004b16:	230d      	movs	r3, #13
 8004b18:	e108      	b.n	8004d2c <find_volume+0x4f8>
 8004b1a:	bf00      	nop
 8004b1c:	20000044 	.word	0x20000044

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004b20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b24:	4413      	add	r3, r2
 8004b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b28:	8911      	ldrh	r1, [r2, #8]
 8004b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b2c:	8992      	ldrh	r2, [r2, #12]
 8004b2e:	0952      	lsrs	r2, r2, #5
 8004b30:	b292      	uxth	r2, r2
 8004b32:	fbb1 f2f2 	udiv	r2, r1, r2
 8004b36:	b292      	uxth	r2, r2
 8004b38:	4413      	add	r3, r2
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d201      	bcs.n	8004b48 <find_volume+0x314>
 8004b44:	230d      	movs	r3, #13
 8004b46:	e0f1      	b.n	8004d2c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b50:	8952      	ldrh	r2, [r2, #10]
 8004b52:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <find_volume+0x32e>
 8004b5e:	230d      	movs	r3, #13
 8004b60:	e0e4      	b.n	8004d2c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8004b62:	2303      	movs	r3, #3
 8004b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d802      	bhi.n	8004b78 <find_volume+0x344>
 8004b72:	2302      	movs	r3, #2
 8004b74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d802      	bhi.n	8004b88 <find_volume+0x354>
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004b96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9a:	441a      	add	r2, r3
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8004ba0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	441a      	add	r2, r3
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8004baa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d11e      	bne.n	8004bf0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	3338      	adds	r3, #56	; 0x38
 8004bb6:	332a      	adds	r3, #42	; 0x2a
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fd ffc5 	bl	8002b48 <ld_word>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <find_volume+0x394>
 8004bc4:	230d      	movs	r3, #13
 8004bc6:	e0b1      	b.n	8004d2c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bca:	891b      	ldrh	r3, [r3, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <find_volume+0x3a0>
 8004bd0:	230d      	movs	r3, #13
 8004bd2:	e0ab      	b.n	8004d2c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	3338      	adds	r3, #56	; 0x38
 8004bd8:	332c      	adds	r3, #44	; 0x2c
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fd ffcc 	bl	8002b78 <ld_dword>
 8004be0:	4602      	mov	r2, r0
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	647b      	str	r3, [r7, #68]	; 0x44
 8004bee:	e01f      	b.n	8004c30 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	891b      	ldrh	r3, [r3, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <find_volume+0x3c8>
 8004bf8:	230d      	movs	r3, #13
 8004bfa:	e097      	b.n	8004d2c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c02:	441a      	add	r2, r3
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d103      	bne.n	8004c18 <find_volume+0x3e4>
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	e00a      	b.n	8004c2e <find_volume+0x3fa>
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	4413      	add	r3, r2
 8004c22:	085a      	lsrs	r2, r3, #1
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004c2e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	6a1a      	ldr	r2, [r3, #32]
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	899b      	ldrh	r3, [r3, #12]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3c:	440b      	add	r3, r1
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c42:	8989      	ldrh	r1, [r1, #12]
 8004c44:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d201      	bcs.n	8004c50 <find_volume+0x41c>
 8004c4c:	230d      	movs	r3, #13
 8004c4e:	e06d      	b.n	8004d2c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	f04f 32ff 	mov.w	r2, #4294967295
 8004c56:	619a      	str	r2, [r3, #24]
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	699a      	ldr	r2, [r3, #24]
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8004c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c62:	2280      	movs	r2, #128	; 0x80
 8004c64:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004c66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d149      	bne.n	8004d02 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	3338      	adds	r3, #56	; 0x38
 8004c72:	3330      	adds	r3, #48	; 0x30
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fd ff67 	bl	8002b48 <ld_word>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d140      	bne.n	8004d02 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c82:	3301      	adds	r3, #1
 8004c84:	4619      	mov	r1, r3
 8004c86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c88:	f7fe fa0e 	bl	80030a8 <move_window>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d137      	bne.n	8004d02 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	2200      	movs	r2, #0
 8004c96:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	3338      	adds	r3, #56	; 0x38
 8004c9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fd ff51 	bl	8002b48 <ld_word>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d127      	bne.n	8004d02 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	3338      	adds	r3, #56	; 0x38
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fd ff5e 	bl	8002b78 <ld_dword>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <find_volume+0x500>)
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d11e      	bne.n	8004d02 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	3338      	adds	r3, #56	; 0x38
 8004cc8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fd ff53 	bl	8002b78 <ld_dword>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b18      	ldr	r3, [pc, #96]	; (8004d38 <find_volume+0x504>)
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d113      	bne.n	8004d02 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	3338      	adds	r3, #56	; 0x38
 8004cde:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fd ff48 	bl	8002b78 <ld_dword>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cec:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	3338      	adds	r3, #56	; 0x38
 8004cf2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fd ff3e 	bl	8002b78 <ld_dword>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004d08:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <find_volume+0x508>)
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <find_volume+0x508>)
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <find_volume+0x508>)
 8004d18:	881a      	ldrh	r2, [r3, #0]
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	4a07      	ldr	r2, [pc, #28]	; (8004d40 <find_volume+0x50c>)
 8004d22:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004d24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d26:	f7fe f957 	bl	8002fd8 <clear_lock>
#endif
	return FR_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3758      	adds	r7, #88	; 0x58
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	41615252 	.word	0x41615252
 8004d38:	61417272 	.word	0x61417272
 8004d3c:	20000048 	.word	0x20000048
 8004d40:	2000006c 	.word	0x2000006c

08004d44 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004d4e:	2309      	movs	r3, #9
 8004d50:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01c      	beq.n	8004d92 <validate+0x4e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d018      	beq.n	8004d92 <validate+0x4e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d013      	beq.n	8004d92 <validate+0x4e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	889a      	ldrh	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	88db      	ldrh	r3, [r3, #6]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d10c      	bne.n	8004d92 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd fe44 	bl	8002a0c <disk_status>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <validate+0x4e>
			res = FR_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <validate+0x5a>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	e000      	b.n	8004da0 <validate+0x5c>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	6013      	str	r3, [r2, #0]
	return res;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004dc2:	f107 0310 	add.w	r3, r7, #16
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fc9a 	bl	8004700 <get_ldnumber>
 8004dcc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	da01      	bge.n	8004dd8 <f_mount+0x28>
 8004dd4:	230b      	movs	r3, #11
 8004dd6:	e02b      	b.n	8004e30 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004dd8:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <f_mount+0x88>)
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004de8:	69b8      	ldr	r0, [r7, #24]
 8004dea:	f7fe f8f5 	bl	8002fd8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2200      	movs	r2, #0
 8004df2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	490d      	ldr	r1, [pc, #52]	; (8004e38 <f_mount+0x88>)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <f_mount+0x66>
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d001      	beq.n	8004e1a <f_mount+0x6a>
 8004e16:	2300      	movs	r3, #0
 8004e18:	e00a      	b.n	8004e30 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004e1a:	f107 010c 	add.w	r1, r7, #12
 8004e1e:	f107 0308 	add.w	r3, r7, #8
 8004e22:	2200      	movs	r2, #0
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fd05 	bl	8004834 <find_volume>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3720      	adds	r7, #32
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000044 	.word	0x20000044

08004e3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b09a      	sub	sp, #104	; 0x68
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <f_open+0x18>
 8004e50:	2309      	movs	r3, #9
 8004e52:	e1bb      	b.n	80051cc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e5a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004e5c:	79fa      	ldrb	r2, [r7, #7]
 8004e5e:	f107 0114 	add.w	r1, r7, #20
 8004e62:	f107 0308 	add.w	r3, r7, #8
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fce4 	bl	8004834 <find_volume>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8004e72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 819f 	bne.w	80051ba <f_open+0x37e>
		dj.obj.fs = fs;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	f107 0318 	add.w	r3, r7, #24
 8004e86:	4611      	mov	r1, r2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fbc3 	bl	8004614 <follow_path>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004e94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d11a      	bne.n	8004ed2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004e9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ea0:	b25b      	sxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	da03      	bge.n	8004eae <f_open+0x72>
				res = FR_INVALID_NAME;
 8004ea6:	2306      	movs	r3, #6
 8004ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004eac:	e011      	b.n	8004ed2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f107 0318 	add.w	r3, r7, #24
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fd ff3e 	bl	8002d48 <chk_lock>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	f003 031c 	and.w	r3, r3, #28
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d07f      	beq.n	8004fdc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004edc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d017      	beq.n	8004f14 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004ee4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d10e      	bne.n	8004f0a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004eec:	f7fd ff88 	bl	8002e00 <enq_lock>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d006      	beq.n	8004f04 <f_open+0xc8>
 8004ef6:	f107 0318 	add.w	r3, r7, #24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff f8da 	bl	80040b4 <dir_register>
 8004f00:	4603      	mov	r3, r0
 8004f02:	e000      	b.n	8004f06 <f_open+0xca>
 8004f04:	2312      	movs	r3, #18
 8004f06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	f043 0308 	orr.w	r3, r3, #8
 8004f10:	71fb      	strb	r3, [r7, #7]
 8004f12:	e010      	b.n	8004f36 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004f14:	7fbb      	ldrb	r3, [r7, #30]
 8004f16:	f003 0311 	and.w	r3, r3, #17
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <f_open+0xea>
					res = FR_DENIED;
 8004f1e:	2307      	movs	r3, #7
 8004f20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004f24:	e007      	b.n	8004f36 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <f_open+0xfa>
 8004f30:	2308      	movs	r3, #8
 8004f32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004f36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d168      	bne.n	8005010 <f_open+0x1d4>
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d063      	beq.n	8005010 <f_open+0x1d4>
				dw = GET_FATTIME();
 8004f48:	f7fd fcfe 	bl	8002948 <get_fattime>
 8004f4c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	330e      	adds	r3, #14
 8004f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fd fe4d 	bl	8002bf4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	3316      	adds	r3, #22
 8004f5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fd fe47 	bl	8002bf4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	330b      	adds	r3, #11
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f72:	4611      	mov	r1, r2
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fe fe16 	bl	8003ba6 <ld_clust>
 8004f7a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f80:	2200      	movs	r2, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe fe2e 	bl	8003be4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8a:	331c      	adds	r3, #28
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd fe30 	bl	8002bf4 <st_dword>
					fs->wflag = 1;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2201      	movs	r2, #1
 8004f98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d037      	beq.n	8005010 <f_open+0x1d4>
						dw = fs->winsect;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8004fa6:	f107 0318 	add.w	r3, r7, #24
 8004faa:	2200      	movs	r2, #0
 8004fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fb1e 	bl	80035f0 <remove_chain>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8004fba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d126      	bne.n	8005010 <f_open+0x1d4>
							res = move_window(fs, dw);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe f86e 	bl	80030a8 <move_window>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fd6:	3a01      	subs	r2, #1
 8004fd8:	615a      	str	r2, [r3, #20]
 8004fda:	e019      	b.n	8005010 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004fdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d115      	bne.n	8005010 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004fe4:	7fbb      	ldrb	r3, [r7, #30]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8004fee:	2304      	movs	r3, #4
 8004ff0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004ff4:	e00c      	b.n	8005010 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <f_open+0x1d4>
 8005000:	7fbb      	ldrb	r3, [r7, #30]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <f_open+0x1d4>
						res = FR_DENIED;
 800500a:	2307      	movs	r3, #7
 800500c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005010:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005014:	2b00      	cmp	r3, #0
 8005016:	d128      	bne.n	800506a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005028:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf14      	ite	ne
 8005042:	2301      	movne	r3, #1
 8005044:	2300      	moveq	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	f107 0318 	add.w	r3, r7, #24
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd fef7 	bl	8002e44 <inc_lock>
 8005056:	4602      	mov	r2, r0
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <f_open+0x22e>
 8005064:	2302      	movs	r3, #2
 8005066:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800506a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 80a3 	bne.w	80051ba <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fd93 	bl	8003ba6 <ld_clust>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	331c      	adds	r3, #28
 800508a:	4618      	mov	r0, r3
 800508c:	f7fd fd74 	bl	8002b78 <ld_dword>
 8005090:	4602      	mov	r2, r0
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	88da      	ldrh	r2, [r3, #6]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	79fa      	ldrb	r2, [r7, #7]
 80050ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3330      	adds	r3, #48	; 0x30
 80050c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050ca:	2100      	movs	r1, #0
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fd fdde 	bl	8002c8e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d06e      	beq.n	80051ba <f_open+0x37e>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d06a      	beq.n	80051ba <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	895b      	ldrh	r3, [r3, #10]
 80050f0:	461a      	mov	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	899b      	ldrh	r3, [r3, #12]
 80050f6:	fb03 f302 	mul.w	r3, r3, r2
 80050fa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005108:	e016      	b.n	8005138 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe f887 	bl	8003222 <get_fat>
 8005114:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005118:	2b01      	cmp	r3, #1
 800511a:	d802      	bhi.n	8005122 <f_open+0x2e6>
 800511c:	2302      	movs	r3, #2
 800511e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d102      	bne.n	8005130 <f_open+0x2f4>
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005138:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800513c:	2b00      	cmp	r3, #0
 800513e:	d103      	bne.n	8005148 <f_open+0x30c>
 8005140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005144:	429a      	cmp	r2, r3
 8005146:	d8e0      	bhi.n	800510a <f_open+0x2ce>
				}
				fp->clust = clst;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800514c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800514e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005152:	2b00      	cmp	r3, #0
 8005154:	d131      	bne.n	80051ba <f_open+0x37e>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	899b      	ldrh	r3, [r3, #12]
 800515a:	461a      	mov	r2, r3
 800515c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800515e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005162:	fb02 f201 	mul.w	r2, r2, r1
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d026      	beq.n	80051ba <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe f837 	bl	80031e4 <clust2sect>
 8005176:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <f_open+0x34a>
						res = FR_INT_ERR;
 800517e:	2302      	movs	r3, #2
 8005180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005184:	e019      	b.n	80051ba <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	899b      	ldrh	r3, [r3, #12]
 800518a:	461a      	mov	r2, r3
 800518c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800518e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005194:	441a      	add	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	7858      	ldrb	r0, [r3, #1]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	2301      	movs	r3, #1
 80051aa:	f7fd fc6f 	bl	8002a8c <disk_read>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <f_open+0x37e>
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80051ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <f_open+0x38c>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80051c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3768      	adds	r7, #104	; 0x68
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08c      	sub	sp, #48	; 0x30
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f107 0210 	add.w	r2, r7, #16
 80051f2:	4611      	mov	r1, r2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fda5 	bl	8004d44 <validate>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005204:	2b00      	cmp	r3, #0
 8005206:	d107      	bne.n	8005218 <f_write+0x44>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	7d5b      	ldrb	r3, [r3, #21]
 800520c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <f_write+0x4a>
 8005218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800521c:	e16a      	b.n	80054f4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	7d1b      	ldrb	r3, [r3, #20]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <f_write+0x5a>
 800522a:	2307      	movs	r3, #7
 800522c:	e162      	b.n	80054f4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	441a      	add	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	429a      	cmp	r2, r3
 800523c:	f080 814c 	bcs.w	80054d8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	43db      	mvns	r3, r3
 8005246:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005248:	e146      	b.n	80054d8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	8992      	ldrh	r2, [r2, #12]
 8005252:	fbb3 f1f2 	udiv	r1, r3, r2
 8005256:	fb02 f201 	mul.w	r2, r2, r1
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	2b00      	cmp	r3, #0
 800525e:	f040 80f1 	bne.w	8005444 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	8992      	ldrh	r2, [r2, #12]
 800526a:	fbb3 f3f2 	udiv	r3, r3, r2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	8952      	ldrh	r2, [r2, #10]
 8005272:	3a01      	subs	r2, #1
 8005274:	4013      	ands	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d143      	bne.n	8005306 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10c      	bne.n	80052a0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11a      	bne.n	80052c8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2100      	movs	r1, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fa0f 	bl	80036ba <create_chain>
 800529c:	62b8      	str	r0, [r7, #40]	; 0x28
 800529e:	e013      	b.n	80052c8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	4619      	mov	r1, r3
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7fe fa9b 	bl	80037ea <clmt_clust>
 80052b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80052b6:	e007      	b.n	80052c8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f7fe f9fa 	bl	80036ba <create_chain>
 80052c6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8109 	beq.w	80054e2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d104      	bne.n	80052e0 <f_write+0x10c>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2202      	movs	r2, #2
 80052da:	755a      	strb	r2, [r3, #21]
 80052dc:	2302      	movs	r3, #2
 80052de:	e109      	b.n	80054f4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d104      	bne.n	80052f2 <f_write+0x11e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	755a      	strb	r2, [r3, #21]
 80052ee:	2301      	movs	r3, #1
 80052f0:	e100      	b.n	80054f4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d102      	bne.n	8005306 <f_write+0x132>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005304:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	7d1b      	ldrb	r3, [r3, #20]
 800530a:	b25b      	sxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	da18      	bge.n	8005342 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	7858      	ldrb	r0, [r3, #1]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	2301      	movs	r3, #1
 8005320:	f7fd fbd4 	bl	8002acc <disk_write>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <f_write+0x160>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	755a      	strb	r2, [r3, #21]
 8005330:	2301      	movs	r3, #1
 8005332:	e0df      	b.n	80054f4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	7d1b      	ldrb	r3, [r3, #20]
 8005338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	4619      	mov	r1, r3
 800534a:	4610      	mov	r0, r2
 800534c:	f7fd ff4a 	bl	80031e4 <clust2sect>
 8005350:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <f_write+0x18e>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2202      	movs	r2, #2
 800535c:	755a      	strb	r2, [r3, #21]
 800535e:	2302      	movs	r3, #2
 8005360:	e0c8      	b.n	80054f4 <f_write+0x320>
			sect += csect;
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	4413      	add	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	899b      	ldrh	r3, [r3, #12]
 800536e:	461a      	mov	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	fbb3 f3f2 	udiv	r3, r3, r2
 8005376:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d043      	beq.n	8005406 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	4413      	add	r3, r2
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	8952      	ldrh	r2, [r2, #10]
 8005388:	4293      	cmp	r3, r2
 800538a:	d905      	bls.n	8005398 <f_write+0x1c4>
					cc = fs->csize - csect;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	895b      	ldrh	r3, [r3, #10]
 8005390:	461a      	mov	r2, r3
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	7858      	ldrb	r0, [r3, #1]
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	69f9      	ldr	r1, [r7, #28]
 80053a2:	f7fd fb93 	bl	8002acc <disk_write>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <f_write+0x1e2>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	755a      	strb	r2, [r3, #21]
 80053b2:	2301      	movs	r3, #1
 80053b4:	e09e      	b.n	80054f4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	6a3a      	ldr	r2, [r7, #32]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d918      	bls.n	80053f6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a1a      	ldr	r2, [r3, #32]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	8992      	ldrh	r2, [r2, #12]
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	18d1      	adds	r1, r2, r3
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	899b      	ldrh	r3, [r3, #12]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f7fd fc32 	bl	8002c4c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	7d1b      	ldrb	r3, [r3, #20]
 80053ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	899b      	ldrh	r3, [r3, #12]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005404:	e04b      	b.n	800549e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	429a      	cmp	r2, r3
 800540e:	d016      	beq.n	800543e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005418:	429a      	cmp	r2, r3
 800541a:	d210      	bcs.n	800543e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	7858      	ldrb	r0, [r3, #1]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005426:	2301      	movs	r3, #1
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	f7fd fb2f 	bl	8002a8c <disk_read>
 800542e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	755a      	strb	r2, [r3, #21]
 800543a:	2301      	movs	r3, #1
 800543c:	e05a      	b.n	80054f4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	899b      	ldrh	r3, [r3, #12]
 8005448:	4618      	mov	r0, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	8992      	ldrh	r2, [r2, #12]
 8005452:	fbb3 f1f2 	udiv	r1, r3, r2
 8005456:	fb02 f201 	mul.w	r2, r2, r1
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	1ac3      	subs	r3, r0, r3
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d901      	bls.n	800546c <f_write+0x298>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	8992      	ldrh	r2, [r2, #12]
 800547a:	fbb3 f0f2 	udiv	r0, r3, r2
 800547e:	fb02 f200 	mul.w	r2, r2, r0
 8005482:	1a9b      	subs	r3, r3, r2
 8005484:	440b      	add	r3, r1
 8005486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005488:	69f9      	ldr	r1, [r7, #28]
 800548a:	4618      	mov	r0, r3
 800548c:	f7fd fbde 	bl	8002c4c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	7d1b      	ldrb	r3, [r3, #20]
 8005494:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005498:	b2da      	uxtb	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	4413      	add	r3, r2
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	441a      	add	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	619a      	str	r2, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf38      	it	cc
 80054be:	461a      	movcc	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	60da      	str	r2, [r3, #12]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	441a      	add	r2, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f47f aeb5 	bne.w	800524a <f_write+0x76>
 80054e0:	e000      	b.n	80054e4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80054e2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	7d1b      	ldrb	r3, [r3, #20]
 80054e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3730      	adds	r7, #48	; 0x30
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f107 0208 	add.w	r2, r7, #8
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fc19 	bl	8004d44 <validate>
 8005512:	4603      	mov	r3, r0
 8005514:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005516:	7dfb      	ldrb	r3, [r7, #23]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d168      	bne.n	80055ee <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	7d1b      	ldrb	r3, [r3, #20]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d062      	beq.n	80055ee <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	7d1b      	ldrb	r3, [r3, #20]
 800552c:	b25b      	sxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	da15      	bge.n	800555e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	7858      	ldrb	r0, [r3, #1]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	2301      	movs	r3, #1
 8005542:	f7fd fac3 	bl	8002acc <disk_write>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <f_sync+0x54>
 800554c:	2301      	movs	r3, #1
 800554e:	e04f      	b.n	80055f0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	7d1b      	ldrb	r3, [r3, #20]
 8005554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005558:	b2da      	uxtb	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800555e:	f7fd f9f3 	bl	8002948 <get_fattime>
 8005562:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f7fd fd9b 	bl	80030a8 <move_window>
 8005572:	4603      	mov	r3, r0
 8005574:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005576:	7dfb      	ldrb	r3, [r7, #23]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d138      	bne.n	80055ee <f_sync+0xf2>
					dir = fp->dir_ptr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	330b      	adds	r3, #11
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	330b      	adds	r3, #11
 800558c:	f042 0220 	orr.w	r2, r2, #32
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	461a      	mov	r2, r3
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	f7fe fb20 	bl	8003be4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f103 021c 	add.w	r2, r3, #28
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f7fd fb1f 	bl	8002bf4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3316      	adds	r3, #22
 80055ba:	6939      	ldr	r1, [r7, #16]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fd fb19 	bl	8002bf4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3312      	adds	r3, #18
 80055c6:	2100      	movs	r1, #0
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fd faf8 	bl	8002bbe <st_word>
					fs->wflag = 1;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2201      	movs	r2, #1
 80055d2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fd fd94 	bl	8003104 <sync_fs>
 80055dc:	4603      	mov	r3, r0
 80055de:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	7d1b      	ldrb	r3, [r3, #20]
 80055e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff ff7b 	bl	80054fc <f_sync>
 8005606:	4603      	mov	r3, r0
 8005608:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d118      	bne.n	8005642 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f107 0208 	add.w	r2, r7, #8
 8005616:	4611      	mov	r1, r2
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fb93 	bl	8004d44 <validate>
 800561e:	4603      	mov	r3, r0
 8005620:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10c      	bne.n	8005642 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	4618      	mov	r0, r3
 800562e:	f7fd fc97 	bl	8002f60 <dec_lock>
 8005632:	4603      	mov	r3, r0
 8005634:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005642:	7bfb      	ldrb	r3, [r7, #15]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	2b0a      	cmp	r3, #10
 800565c:	d103      	bne.n	8005666 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800565e:	210d      	movs	r1, #13
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff fff3 	bl	800564c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	db25      	blt.n	80056be <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	60fa      	str	r2, [r7, #12]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4413      	add	r3, r2
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b3c      	cmp	r3, #60	; 0x3c
 8005684:	dd12      	ble.n	80056ac <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f103 010c 	add.w	r1, r3, #12
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	f107 0308 	add.w	r3, r7, #8
 8005696:	f7ff fd9d 	bl	80051d4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d101      	bne.n	80056a6 <putc_bfd+0x5a>
 80056a2:	2300      	movs	r3, #0
 80056a4:	e001      	b.n	80056aa <putc_bfd+0x5e>
 80056a6:	f04f 33ff 	mov.w	r3, #4294967295
 80056aa:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	609a      	str	r2, [r3, #8]
 80056bc:	e000      	b.n	80056c0 <putc_bfd+0x74>
	if (i < 0) return;
 80056be:	bf00      	nop
}
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	db17      	blt.n	8005706 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f103 010c 	add.w	r1, r3, #12
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	461a      	mov	r2, r3
 80056e6:	f107 030c 	add.w	r3, r7, #12
 80056ea:	f7ff fd73 	bl	80051d4 <f_write>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d108      	bne.n	8005706 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	461a      	mov	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d102      	bne.n	8005706 <putc_flush+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	e001      	b.n	800570a <putc_flush+0x44>
	return EOF;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	605a      	str	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	609a      	str	r2, [r3, #8]
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b096      	sub	sp, #88	; 0x58
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8005746:	f107 030c 	add.w	r3, r7, #12
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff ffe0 	bl	8005712 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8005752:	e009      	b.n	8005768 <f_puts+0x2c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	607a      	str	r2, [r7, #4]
 800575a:	781a      	ldrb	r2, [r3, #0]
 800575c:	f107 030c 	add.w	r3, r7, #12
 8005760:	4611      	mov	r1, r2
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff ff72 	bl	800564c <putc_bfd>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f1      	bne.n	8005754 <f_puts+0x18>
	return putc_flush(&pb);
 8005770:	f107 030c 	add.w	r3, r7, #12
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff ffa6 	bl	80056c6 <putc_flush>
 800577a:	4603      	mov	r3, r0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3758      	adds	r7, #88	; 0x58
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005792:	2301      	movs	r3, #1
 8005794:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800579a:	4b1f      	ldr	r3, [pc, #124]	; (8005818 <FATFS_LinkDriverEx+0x94>)
 800579c:	7a5b      	ldrb	r3, [r3, #9]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d131      	bne.n	8005808 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80057a4:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <FATFS_LinkDriverEx+0x94>)
 80057a6:	7a5b      	ldrb	r3, [r3, #9]
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <FATFS_LinkDriverEx+0x94>)
 80057ae:	2100      	movs	r1, #0
 80057b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80057b2:	4b19      	ldr	r3, [pc, #100]	; (8005818 <FATFS_LinkDriverEx+0x94>)
 80057b4:	7a5b      	ldrb	r3, [r3, #9]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	4a17      	ldr	r2, [pc, #92]	; (8005818 <FATFS_LinkDriverEx+0x94>)
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <FATFS_LinkDriverEx+0x94>)
 80057c4:	7a5b      	ldrb	r3, [r3, #9]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b13      	ldr	r3, [pc, #76]	; (8005818 <FATFS_LinkDriverEx+0x94>)
 80057cc:	4413      	add	r3, r2
 80057ce:	79fa      	ldrb	r2, [r7, #7]
 80057d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <FATFS_LinkDriverEx+0x94>)
 80057d4:	7a5b      	ldrb	r3, [r3, #9]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	b2d1      	uxtb	r1, r2
 80057dc:	4a0e      	ldr	r2, [pc, #56]	; (8005818 <FATFS_LinkDriverEx+0x94>)
 80057de:	7251      	strb	r1, [r2, #9]
 80057e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80057e2:	7dbb      	ldrb	r3, [r7, #22]
 80057e4:	3330      	adds	r3, #48	; 0x30
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	3301      	adds	r3, #1
 80057f0:	223a      	movs	r2, #58	; 0x3a
 80057f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	3302      	adds	r3, #2
 80057f8:	222f      	movs	r2, #47	; 0x2f
 80057fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	3303      	adds	r3, #3
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005808:	7dfb      	ldrb	r3, [r7, #23]
}
 800580a:	4618      	mov	r0, r3
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	2000026c 	.word	0x2000026c

0800581c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005826:	2200      	movs	r2, #0
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff ffaa 	bl	8005784 <FATFS_LinkDriverEx>
 8005830:	4603      	mov	r3, r0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	6039      	str	r1, [r7, #0]
 8005846:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	2b7f      	cmp	r3, #127	; 0x7f
 800584c:	d802      	bhi.n	8005854 <ff_convert+0x18>
		c = chr;
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	81fb      	strh	r3, [r7, #14]
 8005852:	e025      	b.n	80058a0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00b      	beq.n	8005872 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	2bff      	cmp	r3, #255	; 0xff
 800585e:	d805      	bhi.n	800586c <ff_convert+0x30>
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	3b80      	subs	r3, #128	; 0x80
 8005864:	4a12      	ldr	r2, [pc, #72]	; (80058b0 <ff_convert+0x74>)
 8005866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800586a:	e000      	b.n	800586e <ff_convert+0x32>
 800586c:	2300      	movs	r3, #0
 800586e:	81fb      	strh	r3, [r7, #14]
 8005870:	e016      	b.n	80058a0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005872:	2300      	movs	r3, #0
 8005874:	81fb      	strh	r3, [r7, #14]
 8005876:	e009      	b.n	800588c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005878:	89fb      	ldrh	r3, [r7, #14]
 800587a:	4a0d      	ldr	r2, [pc, #52]	; (80058b0 <ff_convert+0x74>)
 800587c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005880:	88fa      	ldrh	r2, [r7, #6]
 8005882:	429a      	cmp	r2, r3
 8005884:	d006      	beq.n	8005894 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8005886:	89fb      	ldrh	r3, [r7, #14]
 8005888:	3301      	adds	r3, #1
 800588a:	81fb      	strh	r3, [r7, #14]
 800588c:	89fb      	ldrh	r3, [r7, #14]
 800588e:	2b7f      	cmp	r3, #127	; 0x7f
 8005890:	d9f2      	bls.n	8005878 <ff_convert+0x3c>
 8005892:	e000      	b.n	8005896 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005894:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8005896:	89fb      	ldrh	r3, [r7, #14]
 8005898:	3380      	adds	r3, #128	; 0x80
 800589a:	b29b      	uxth	r3, r3
 800589c:	b2db      	uxtb	r3, r3
 800589e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80058a0:	89fb      	ldrh	r3, [r7, #14]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	08005b44 	.word	0x08005b44

080058b4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c4:	d201      	bcs.n	80058ca <ff_wtoupper+0x16>
 80058c6:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <ff_wtoupper+0x10c>)
 80058c8:	e000      	b.n	80058cc <ff_wtoupper+0x18>
 80058ca:	4b3e      	ldr	r3, [pc, #248]	; (80059c4 <ff_wtoupper+0x110>)
 80058cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	1c9a      	adds	r2, r3, #2
 80058d2:	617a      	str	r2, [r7, #20]
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80058d8:	8a7b      	ldrh	r3, [r7, #18]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d068      	beq.n	80059b0 <ff_wtoupper+0xfc>
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	8a7b      	ldrh	r3, [r7, #18]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d364      	bcc.n	80059b0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	617a      	str	r2, [r7, #20]
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	823b      	strh	r3, [r7, #16]
 80058f0:	8a3b      	ldrh	r3, [r7, #16]
 80058f2:	0a1b      	lsrs	r3, r3, #8
 80058f4:	81fb      	strh	r3, [r7, #14]
 80058f6:	8a3b      	ldrh	r3, [r7, #16]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80058fc:	88fa      	ldrh	r2, [r7, #6]
 80058fe:	8a79      	ldrh	r1, [r7, #18]
 8005900:	8a3b      	ldrh	r3, [r7, #16]
 8005902:	440b      	add	r3, r1
 8005904:	429a      	cmp	r2, r3
 8005906:	da49      	bge.n	800599c <ff_wtoupper+0xe8>
			switch (cmd) {
 8005908:	89fb      	ldrh	r3, [r7, #14]
 800590a:	2b08      	cmp	r3, #8
 800590c:	d84f      	bhi.n	80059ae <ff_wtoupper+0xfa>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <ff_wtoupper+0x60>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005939 	.word	0x08005939
 8005918:	0800594b 	.word	0x0800594b
 800591c:	08005961 	.word	0x08005961
 8005920:	08005969 	.word	0x08005969
 8005924:	08005971 	.word	0x08005971
 8005928:	08005979 	.word	0x08005979
 800592c:	08005981 	.word	0x08005981
 8005930:	08005989 	.word	0x08005989
 8005934:	08005991 	.word	0x08005991
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005938:	88fa      	ldrh	r2, [r7, #6]
 800593a:	8a7b      	ldrh	r3, [r7, #18]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	80fb      	strh	r3, [r7, #6]
 8005948:	e027      	b.n	800599a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	8a7b      	ldrh	r3, [r7, #18]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	b29b      	uxth	r3, r3
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	b29b      	uxth	r3, r3
 8005958:	88fa      	ldrh	r2, [r7, #6]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	80fb      	strh	r3, [r7, #6]
 800595e:	e01c      	b.n	800599a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005960:	88fb      	ldrh	r3, [r7, #6]
 8005962:	3b10      	subs	r3, #16
 8005964:	80fb      	strh	r3, [r7, #6]
 8005966:	e018      	b.n	800599a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	3b20      	subs	r3, #32
 800596c:	80fb      	strh	r3, [r7, #6]
 800596e:	e014      	b.n	800599a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	3b30      	subs	r3, #48	; 0x30
 8005974:	80fb      	strh	r3, [r7, #6]
 8005976:	e010      	b.n	800599a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	3b1a      	subs	r3, #26
 800597c:	80fb      	strh	r3, [r7, #6]
 800597e:	e00c      	b.n	800599a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	3308      	adds	r3, #8
 8005984:	80fb      	strh	r3, [r7, #6]
 8005986:	e008      	b.n	800599a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	3b50      	subs	r3, #80	; 0x50
 800598c:	80fb      	strh	r3, [r7, #6]
 800598e:	e004      	b.n	800599a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8005996:	80fb      	strh	r3, [r7, #6]
 8005998:	bf00      	nop
			}
			break;
 800599a:	e008      	b.n	80059ae <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800599c:	89fb      	ldrh	r3, [r7, #14]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d195      	bne.n	80058ce <ff_wtoupper+0x1a>
 80059a2:	8a3b      	ldrh	r3, [r7, #16]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4413      	add	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80059ac:	e78f      	b.n	80058ce <ff_wtoupper+0x1a>
			break;
 80059ae:	bf00      	nop
	}

	return chr;
 80059b0:	88fb      	ldrh	r3, [r7, #6]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	08005c44 	.word	0x08005c44
 80059c4:	08005e38 	.word	0x08005e38

080059c8 <__libc_init_array>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	4e0d      	ldr	r6, [pc, #52]	; (8005a00 <__libc_init_array+0x38>)
 80059cc:	4c0d      	ldr	r4, [pc, #52]	; (8005a04 <__libc_init_array+0x3c>)
 80059ce:	1ba4      	subs	r4, r4, r6
 80059d0:	10a4      	asrs	r4, r4, #2
 80059d2:	2500      	movs	r5, #0
 80059d4:	42a5      	cmp	r5, r4
 80059d6:	d109      	bne.n	80059ec <__libc_init_array+0x24>
 80059d8:	4e0b      	ldr	r6, [pc, #44]	; (8005a08 <__libc_init_array+0x40>)
 80059da:	4c0c      	ldr	r4, [pc, #48]	; (8005a0c <__libc_init_array+0x44>)
 80059dc:	f000 f820 	bl	8005a20 <_init>
 80059e0:	1ba4      	subs	r4, r4, r6
 80059e2:	10a4      	asrs	r4, r4, #2
 80059e4:	2500      	movs	r5, #0
 80059e6:	42a5      	cmp	r5, r4
 80059e8:	d105      	bne.n	80059f6 <__libc_init_array+0x2e>
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059f0:	4798      	blx	r3
 80059f2:	3501      	adds	r5, #1
 80059f4:	e7ee      	b.n	80059d4 <__libc_init_array+0xc>
 80059f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059fa:	4798      	blx	r3
 80059fc:	3501      	adds	r5, #1
 80059fe:	e7f2      	b.n	80059e6 <__libc_init_array+0x1e>
 8005a00:	08005efc 	.word	0x08005efc
 8005a04:	08005efc 	.word	0x08005efc
 8005a08:	08005efc 	.word	0x08005efc
 8005a0c:	08005f00 	.word	0x08005f00

08005a10 <memset>:
 8005a10:	4402      	add	r2, r0
 8005a12:	4603      	mov	r3, r0
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d100      	bne.n	8005a1a <memset+0xa>
 8005a18:	4770      	bx	lr
 8005a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a1e:	e7f9      	b.n	8005a14 <memset+0x4>

08005a20 <_init>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	bf00      	nop
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr

08005a2c <_fini>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	bf00      	nop
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr
