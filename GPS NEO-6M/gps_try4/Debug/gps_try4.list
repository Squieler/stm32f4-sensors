
gps_try4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008324  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080084c8  080084c8  000184c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088dc  080088dc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080088dc  080088dc  000188dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088e4  080088e4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088e4  080088e4  000188e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088e8  080088e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080088ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001dc  08008ac8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08008ac8  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b43  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001623  00000000  00000000  00027d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  00029378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000610  00000000  00000000  00029a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015892  00000000  00000000  0002a050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000060d5  00000000  00000000  0003f8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008591e  00000000  00000000  000459b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb2d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d5c  00000000  00000000  000cb350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084ac 	.word	0x080084ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080084ac 	.word	0x080084ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_UART_RxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

	/* Eğer huart1 buffer dolduysa, bayrağı işaretle. */
	flag = 1;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_UART_RxCpltCallback+0x1c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]

}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200001f8 	.word	0x200001f8

08000fb8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8000fc6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fca:	eddf 6a20 	vldr	s13, [pc, #128]	; 800104c <GPS_nmea_to_dec+0x94>
 8000fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd6:	ee17 3a90 	vmov	r3, s15
 8000fda:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	2264      	movs	r2, #100	; 0x64
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fec:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff4:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8000ff8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ffc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001050 <GPS_nmea_to_dec+0x98>
 8001000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001004:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	ed97 7a02 	vldr	s14, [r7, #8]
 8001016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	2b53      	cmp	r3, #83	; 0x53
 8001022:	d002      	beq.n	800102a <GPS_nmea_to_dec+0x72>
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b57      	cmp	r3, #87	; 0x57
 8001028:	d105      	bne.n	8001036 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800102a:	edd7 7a05 	vldr	s15, [r7, #20]
 800102e:	eef1 7a67 	vneg.f32	s15, s15
 8001032:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	ee07 3a90 	vmov	s15, r3
}
 800103c:	eeb0 0a67 	vmov.f32	s0, s15
 8001040:	371c      	adds	r7, #28
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	42c80000 	.word	0x42c80000
 8001050:	42700000 	.word	0x42700000

08001054 <nmea0183_checksum>:
int nmea0183_checksum(char *msg) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]


	int checksum = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]

	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001064:	2301      	movs	r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	e00a      	b.n	8001080 <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4053      	eors	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3301      	adds	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff f8ad 	bl	80001e0 <strlen>
 8001086:	4603      	mov	r3, r0
 8001088:	1f1a      	subs	r2, r3, #4
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8ec      	bhi.n	800106a <nmea0183_checksum+0x16>
	}

	return checksum;
 8001090:	68fb      	ldr	r3, [r7, #12]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <serialPrint>:

void serialPrint(const char *fmt, ...) {
 800109c:	b40f      	push	{r0, r1, r2, r3}
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b2:	480a      	ldr	r0, [pc, #40]	; (80010dc <serialPrint+0x40>)
 80010b4:	f004 fe80 	bl	8005db8 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), -1); // UART defined at huart2 for serial communication with computer.
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <serialPrint+0x40>)
 80010ba:	f7ff f891 	bl	80001e0 <strlen>
 80010be:	4603      	mov	r3, r0
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	4905      	ldr	r1, [pc, #20]	; (80010dc <serialPrint+0x40>)
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <serialPrint+0x44>)
 80010ca:	f001 ffd4 	bl	8003076 <HAL_UART_Transmit>

}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010d8:	b004      	add	sp, #16
 80010da:	4770      	bx	lr
 80010dc:	200001fc 	.word	0x200001fc
 80010e0:	200003a8 	.word	0x200003a8

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010e8:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 80010ec:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ee:	f000 fc7d 	bl	80019ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f2:	f000 f9ed 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f6:	f000 fac7 	bl	8001688 <MX_GPIO_Init>
  MX_DMA_Init();
 80010fa:	f000 faa5 	bl	8001648 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010fe:	f000 fa79 	bl	80015f4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001102:	f000 fa4d 	bl	80015a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Recieve buffer */
	uint8_t gpsRx[SIZE];
	memset(gpsRx, 0, SIZE); // Bufferı temizle.
 8001106:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800110a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f002 ffab 	bl	800406c <memset>

	/* DMA'yı huart1 için başlat; circular mode */
	HAL_UART_Receive_DMA(&huart1, gpsRx, SIZE);
 8001116:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800111a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800111e:	4619      	mov	r1, r3
 8001120:	4878      	ldr	r0, [pc, #480]	; (8001304 <main+0x220>)
 8001122:	f002 f841 	bl	80031a8 <HAL_UART_Receive_DMA>

	/* Gerekli değişkenler */
	char stringBuffer[SIZE + 1]; // stringBuffer --> Integer gelen uart verisini, char'a çevirip saklamak için. (+1 eklentisi, en sona NULL eklemek için.)
	memset(stringBuffer, 0, SIZE + 1); // Buffer gereksiz veriden temizleniyor.
 8001126:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800112a:	f240 122d 	movw	r2, #301	; 0x12d
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f002 ff9b 	bl	800406c <memset>

	char nmeaStr[100]; // NMEA verisini saklayacağımız değişken.
	memset(nmeaStr, 0, 100); // Buffer temizleniyor.
 8001136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800113a:	2264      	movs	r2, #100	; 0x64
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f002 ff94 	bl	800406c <memset>
	    // GLL
	    char gll_status;

	} GPS_t;
	GPS_t gpsData;
	gpsData.date = 00000000;
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		/* Eğer buffer dolduysa devam et. */
		if (flag == 1) {
 800114a:	4b6f      	ldr	r3, [pc, #444]	; (8001308 <main+0x224>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d1fb      	bne.n	800114a <main+0x66>

			/* Gelen veriyi bilgisayara yolla. */
			//HAL_UART_Transmit(&huart2, gpsRx, SIZE, 200); // Debug maksatlı, istenilirse kapatılabilir.

			/* Integer buffer ---> string buffer */
			sprintf(stringBuffer, "%s", gpsRx);
 8001152:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8001156:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f003 fee2 	bl	8004f26 <strcpy>

			/* Gelen veri, char'a çeviliyor. (Integer'den) */
			string = strdup(stringBuffer); // stringFree ile işimiz bitince belleği geri bırakacağız.
 8001162:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001166:	4618      	mov	r0, r3
 8001168:	f003 fee6 	bl	8004f38 <strdup>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001174:	601a      	str	r2, [r3, #0]

			stringFree = string;
 8001176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc

			/* Gelen NMEA verisini, satır sonuna göre bölünüyor. (\n) */
			while( (token = strsep(&string, "\n")) != NULL ){
 8001180:	e16f      	b.n	8001462 <main+0x37e>

				memset(nmeaStr, 0, 100); // Eski verileri siliyoruz.
 8001182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001186:	2264      	movs	r2, #100	; 0x64
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f002 ff6e 	bl	800406c <memset>
				sprintf(nmeaStr, "%s", token); // Token verisi, işlenmek üzere char array'e aktarılıyor.
 8001190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001194:	f8d7 12f8 	ldr.w	r1, [r7, #760]	; 0x2f8
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fec4 	bl	8004f26 <strcpy>

				/* Cümlelere bölünen verileri, istediğimize göre filtreleyeceğiz. */
				/* İyi bir NMEA cümlesi $GPRMC ile başlar, * ile biter ve en az 49 karakter uzunluğunda olur. */
				if ((strstr(nmeaStr, "$GPRMC") != 0) && strlen(nmeaStr) > 49 && strstr(nmeaStr, "*") != 0) {
 800119e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a2:	495a      	ldr	r1, [pc, #360]	; (800130c <main+0x228>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fee7 	bl	8004f78 <strstr>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 8158 	beq.w	8001462 <main+0x37e>
 80011b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f812 	bl	80001e0 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b31      	cmp	r3, #49	; 0x31
 80011c0:	f240 814f 	bls.w	8001462 <main+0x37e>
 80011c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c8:	212a      	movs	r1, #42	; 0x2a
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fe9e 	bl	8004f0c <strchr>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8145 	beq.w	8001462 <main+0x37e>

					/* NMEA checksum */
					rawSum = strstr(nmeaStr, "*"); // * ile başlyan checksum verisi depolanır.
 80011d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011dc:	212a      	movs	r1, #42	; 0x2a
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 fe94 	bl	8004f0c <strchr>
 80011e4:	f8c7 02f4 	str.w	r0, [r7, #756]	; 0x2f4
					memcpy(smNmbr, &rawSum[1], 2); // *'dan sonrası smNmbr değişkenine kopyalanır.
 80011e8:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80011ec:	3301      	adds	r3, #1
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f6:	801a      	strh	r2, [r3, #0]
					smNmbr[2] = '\0'; // smNmbr değişkenin sonuna satır sonu işaretçisi eklenir.
 80011f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fc:	2200      	movs	r2, #0
 80011fe:	709a      	strb	r2, [r3, #2]
					intSum = nmea0183_checksum(nmeaStr); // Checksum hesabı yapıyoruz.
 8001200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff25 	bl	8001054 <nmea0183_checksum>
 800120a:	4603      	mov	r3, r0
 800120c:	f887 32f3 	strb.w	r3, [r7, #755]	; 0x2f3
					sprintf(hex, "%X", intSum); // Kıyaslayabilmek için checksum'u hex formatında kaydediyoruz.
 8001210:	f897 22f3 	ldrb.w	r2, [r7, #755]	; 0x2f3
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	493d      	ldr	r1, [pc, #244]	; (8001310 <main+0x22c>)
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fe2a 	bl	8004e74 <siprintf>

					/* Checksum kontrolü. */
					if (strstr(smNmbr, hex) != NULL) {
 8001220:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fea4 	bl	8004f78 <strstr>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d072      	beq.n	800131c <main+0x238>
						/* Gelen veriyi bilgisayara aktarmak için... */
						//HAL_UART_Transmit(&huart2, (uint8_t*) nmeaStr, 100, 70);
						//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 200);

						/* Chekcsum doğru, gelen NMEA cümlesinde hata yok. Cümleyi parçalara bölebiliriz. */
						sscanf(nmeaStr, "$GPRMC,%f,%c,%f,%c,%f,%c,%f,,%d", &gpsData.utc_time, &gpsData.gll_status, &gpsData.nmea_latitude, &gpsData.ns, &gpsData.nmea_longitude, &gpsData.ew, &gpsData.speed_k, &gpsData.date);
 8001236:	463b      	mov	r3, r7
 8001238:	f103 0120 	add.w	r1, r3, #32
 800123c:	463b      	mov	r3, r7
 800123e:	f103 0210 	add.w	r2, r3, #16
 8001242:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001246:	463b      	mov	r3, r7
 8001248:	331c      	adds	r3, #28
 800124a:	9305      	str	r3, [sp, #20]
 800124c:	463b      	mov	r3, r7
 800124e:	3318      	adds	r3, #24
 8001250:	9304      	str	r3, [sp, #16]
 8001252:	463b      	mov	r3, r7
 8001254:	3315      	adds	r3, #21
 8001256:	9303      	str	r3, [sp, #12]
 8001258:	463b      	mov	r3, r7
 800125a:	3308      	adds	r3, #8
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	463b      	mov	r3, r7
 8001260:	3314      	adds	r3, #20
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	463b      	mov	r3, r7
 8001266:	330c      	adds	r3, #12
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	460b      	mov	r3, r1
 800126c:	4929      	ldr	r1, [pc, #164]	; (8001314 <main+0x230>)
 800126e:	f003 fe21 	bl	8004eb4 <siscanf>
						/* Enlem ve boylam bilgisini, yerkürenin bulunduğumuz tarafına göre anlamlandırıp standart formata getiriyoruz. */
						gpsData.dec_latitude = GPS_nmea_to_dec(gpsData.nmea_latitude, gpsData.ns);
 8001272:	463b      	mov	r3, r7
 8001274:	edd3 7a03 	vldr	s15, [r3, #12]
 8001278:	463b      	mov	r3, r7
 800127a:	7d1b      	ldrb	r3, [r3, #20]
 800127c:	4618      	mov	r0, r3
 800127e:	eeb0 0a67 	vmov.f32	s0, s15
 8001282:	f7ff fe99 	bl	8000fb8 <GPS_nmea_to_dec>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	463b      	mov	r3, r7
 800128c:	edc3 7a01 	vstr	s15, [r3, #4]
						gpsData.dec_longitude = GPS_nmea_to_dec(gpsData.nmea_longitude, gpsData.ew);
 8001290:	463b      	mov	r3, r7
 8001292:	edd3 7a02 	vldr	s15, [r3, #8]
 8001296:	463b      	mov	r3, r7
 8001298:	7d5b      	ldrb	r3, [r3, #21]
 800129a:	4618      	mov	r0, r3
 800129c:	eeb0 0a67 	vmov.f32	s0, s15
 80012a0:	f7ff fe8a 	bl	8000fb8 <GPS_nmea_to_dec>
 80012a4:	eef0 7a40 	vmov.f32	s15, s0
 80012a8:	463b      	mov	r3, r7
 80012aa:	edc3 7a00 	vstr	s15, [r3]

						/* Gelen, anlamlandırılmış veriyi bilgisayara anlatmak için. */
						serialPrint("Lat.: %f, Lon.: %f, Speed (knot): %f, UTC: %f, Date: %d\r\n", gpsData.dec_latitude, gpsData.dec_longitude, gpsData.speed_k, gpsData.utc_time, gpsData.date);
 80012ae:	463b      	mov	r3, r7
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f950 	bl	8000558 <__aeabi_f2d>
 80012b8:	4682      	mov	sl, r0
 80012ba:	468b      	mov	fp, r1
 80012bc:	463b      	mov	r3, r7
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f949 	bl	8000558 <__aeabi_f2d>
 80012c6:	4604      	mov	r4, r0
 80012c8:	460d      	mov	r5, r1
 80012ca:	463b      	mov	r3, r7
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f942 	bl	8000558 <__aeabi_f2d>
 80012d4:	4680      	mov	r8, r0
 80012d6:	4689      	mov	r9, r1
 80012d8:	463b      	mov	r3, r7
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f93b 	bl	8000558 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4639      	mov	r1, r7
 80012e8:	69c9      	ldr	r1, [r1, #28]
 80012ea:	9106      	str	r1, [sp, #24]
 80012ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80012f4:	e9cd 4500 	strd	r4, r5, [sp]
 80012f8:	4652      	mov	r2, sl
 80012fa:	465b      	mov	r3, fp
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <main+0x234>)
 80012fe:	f7ff fecd 	bl	800109c <serialPrint>
 8001302:	e0ae      	b.n	8001462 <main+0x37e>
 8001304:	20000368 	.word	0x20000368
 8001308:	200001f8 	.word	0x200001f8
 800130c:	080084c8 	.word	0x080084c8
 8001310:	080084d0 	.word	0x080084d0
 8001314:	080084d4 	.word	0x080084d4
 8001318:	080084f4 	.word	0x080084f4

					} else if((strstr(nmeaStr, "$GNGLL") != 0) && strlen(nmeaStr) > 49 && strstr(nmeaStr, "*") != 0) {
 800131c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001320:	4964      	ldr	r1, [pc, #400]	; (80014b4 <main+0x3d0>)
 8001322:	4618      	mov	r0, r3
 8001324:	f003 fe28 	bl	8004f78 <strstr>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8099 	beq.w	8001462 <main+0x37e>
 8001330:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff53 	bl	80001e0 <strlen>
 800133a:	4603      	mov	r3, r0
 800133c:	2b31      	cmp	r3, #49	; 0x31
 800133e:	f240 8090 	bls.w	8001462 <main+0x37e>
 8001342:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001346:	212a      	movs	r1, #42	; 0x2a
 8001348:	4618      	mov	r0, r3
 800134a:	f003 fddf 	bl	8004f0c <strchr>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8086 	beq.w	8001462 <main+0x37e>

						/* NMEA checksum */
						rawSum = strstr(nmeaStr, "*"); // * ile başlyan checksum verisi depolanır.
 8001356:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800135a:	212a      	movs	r1, #42	; 0x2a
 800135c:	4618      	mov	r0, r3
 800135e:	f003 fdd5 	bl	8004f0c <strchr>
 8001362:	f8c7 02f4 	str.w	r0, [r7, #756]	; 0x2f4
						memcpy(smNmbr, &rawSum[1], 2); // *'dan sonrası smNmbr değişkenine kopyalanır.
 8001366:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800136a:	3301      	adds	r3, #1
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	b29a      	uxth	r2, r3
 8001370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001374:	801a      	strh	r2, [r3, #0]
						smNmbr[2] = '\0'; // smNmbr değişkenin sonuna satır sonu işaretçisi eklenir.
 8001376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137a:	2200      	movs	r2, #0
 800137c:	709a      	strb	r2, [r3, #2]
						intSum = nmea0183_checksum(nmeaStr); // Checksum hesabı yapıyoruz.
 800137e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe66 	bl	8001054 <nmea0183_checksum>
 8001388:	4603      	mov	r3, r0
 800138a:	f887 32f3 	strb.w	r3, [r7, #755]	; 0x2f3
						sprintf(hex, "%X", intSum); // Kıyaslayabilmek için checksum'u hex formatında kaydediyoruz.
 800138e:	f897 22f3 	ldrb.w	r2, [r7, #755]	; 0x2f3
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	4948      	ldr	r1, [pc, #288]	; (80014b8 <main+0x3d4>)
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fd6b 	bl	8004e74 <siprintf>

						/* Checksum kontrolü. */
						if (strstr(smNmbr, hex) != NULL) {
 800139e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80013a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 fde5 	bl	8004f78 <strstr>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d056      	beq.n	8001462 <main+0x37e>
							/* Gelen veriyi bilgisayara aktarmak için... */
							//HAL_UART_Transmit(&huart2, (uint8_t*) nmeaStr, 100, 70);
							//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 200);

							/* Chekcsum doğru, gelen NMEA cümlesinde hata yok. Cümleyi parçalara bölebiliriz. */
							sscanf(nmeaStr, "$GPGLL,%f,%c,%f,%c,%f,%c", &gpsData.nmea_latitude, &gpsData.ns, &gpsData.nmea_longitude, &gpsData.ew, &gpsData.utc_time, &gpsData.gll_status);
 80013b4:	463b      	mov	r3, r7
 80013b6:	f103 0114 	add.w	r1, r3, #20
 80013ba:	463b      	mov	r3, r7
 80013bc:	f103 020c 	add.w	r2, r3, #12
 80013c0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80013c4:	463b      	mov	r3, r7
 80013c6:	3320      	adds	r3, #32
 80013c8:	9303      	str	r3, [sp, #12]
 80013ca:	463b      	mov	r3, r7
 80013cc:	3310      	adds	r3, #16
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	463b      	mov	r3, r7
 80013d2:	3315      	adds	r3, #21
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	463b      	mov	r3, r7
 80013d8:	3308      	adds	r3, #8
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	460b      	mov	r3, r1
 80013de:	4937      	ldr	r1, [pc, #220]	; (80014bc <main+0x3d8>)
 80013e0:	f003 fd68 	bl	8004eb4 <siscanf>
							/* Enlem ve boylam bilgisini, yerkürenin bulunduğumuz tarafına göre anlamlandırıp standart formata getiriyoruz. */
							gpsData.dec_latitude = GPS_nmea_to_dec(gpsData.nmea_latitude, gpsData.ns);
 80013e4:	463b      	mov	r3, r7
 80013e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013ea:	463b      	mov	r3, r7
 80013ec:	7d1b      	ldrb	r3, [r3, #20]
 80013ee:	4618      	mov	r0, r3
 80013f0:	eeb0 0a67 	vmov.f32	s0, s15
 80013f4:	f7ff fde0 	bl	8000fb8 <GPS_nmea_to_dec>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	463b      	mov	r3, r7
 80013fe:	edc3 7a01 	vstr	s15, [r3, #4]
							gpsData.dec_longitude = GPS_nmea_to_dec(gpsData.nmea_longitude, gpsData.ew);
 8001402:	463b      	mov	r3, r7
 8001404:	edd3 7a02 	vldr	s15, [r3, #8]
 8001408:	463b      	mov	r3, r7
 800140a:	7d5b      	ldrb	r3, [r3, #21]
 800140c:	4618      	mov	r0, r3
 800140e:	eeb0 0a67 	vmov.f32	s0, s15
 8001412:	f7ff fdd1 	bl	8000fb8 <GPS_nmea_to_dec>
 8001416:	eef0 7a40 	vmov.f32	s15, s0
 800141a:	463b      	mov	r3, r7
 800141c:	edc3 7a00 	vstr	s15, [r3]

							/* Gelen, anlamlandırılmış veriyi bilgisayara anlatmak için. */
							serialPrint("Lat.: %f, Lon.: %f, UTC: %f, Date: %d\r\n", gpsData.dec_latitude, gpsData.dec_longitude, gpsData.utc_time, gpsData.date);
 8001420:	463b      	mov	r3, r7
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f897 	bl	8000558 <__aeabi_f2d>
 800142a:	4680      	mov	r8, r0
 800142c:	4689      	mov	r9, r1
 800142e:	463b      	mov	r3, r7
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f890 	bl	8000558 <__aeabi_f2d>
 8001438:	4604      	mov	r4, r0
 800143a:	460d      	mov	r5, r1
 800143c:	463b      	mov	r3, r7
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f889 	bl	8000558 <__aeabi_f2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4639      	mov	r1, r7
 800144c:	69c9      	ldr	r1, [r1, #28]
 800144e:	9104      	str	r1, [sp, #16]
 8001450:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001454:	e9cd 4500 	strd	r4, r5, [sp]
 8001458:	4642      	mov	r2, r8
 800145a:	464b      	mov	r3, r9
 800145c:	4818      	ldr	r0, [pc, #96]	; (80014c0 <main+0x3dc>)
 800145e:	f7ff fe1d 	bl	800109c <serialPrint>
			while( (token = strsep(&string, "\n")) != NULL ){
 8001462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001466:	4917      	ldr	r1, [pc, #92]	; (80014c4 <main+0x3e0>)
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fd80 	bl	8004f6e <strsep>
 800146e:	f8c7 02f8 	str.w	r0, [r7, #760]	; 0x2f8
 8001472:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8001476:	2b00      	cmp	r3, #0
 8001478:	f47f ae83 	bne.w	8001182 <main+0x9e>


			} // "\n" ile gelen veriyi cümlelere ayırma bitti.

			/* Bellekte gerekisz yer kaplayan değişkeni temizliyoruz. (Eğer aşağısı yorum olarak kayıt edildiyse, sebebi aşağıdaki fonksiyonların işlemcide kritik hataya sebep olmasıdır.) */
			free(token);
 800147c:	f8d7 02f8 	ldr.w	r0, [r7, #760]	; 0x2f8
 8001480:	f002 fdec 	bl	800405c <free>
			free(stringFree);
 8001484:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001488:	f002 fde8 	bl	800405c <free>

			/* Yeni veri almaya hazırız. */
			flag = 0;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <main+0x3e4>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
			memset(gpsRx, 0, SIZE);
 8001492:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001496:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fde5 	bl	800406c <memset>
			HAL_UART_Receive_DMA(&huart1, gpsRx, SIZE);
 80014a2:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80014a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <main+0x3e8>)
 80014ae:	f001 fe7b 	bl	80031a8 <HAL_UART_Receive_DMA>
		if (flag == 1) {
 80014b2:	e64a      	b.n	800114a <main+0x66>
 80014b4:	08008530 	.word	0x08008530
 80014b8:	080084d0 	.word	0x080084d0
 80014bc:	08008538 	.word	0x08008538
 80014c0:	08008554 	.word	0x08008554
 80014c4:	0800857c 	.word	0x0800857c
 80014c8:	200001f8 	.word	0x200001f8
 80014cc:	20000368 	.word	0x20000368

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	; 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2230      	movs	r2, #48	; 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fdc4 	bl	800406c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <SystemClock_Config+0xc8>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a26      	ldr	r2, [pc, #152]	; (8001598 <SystemClock_Config+0xc8>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <SystemClock_Config+0xc8>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <SystemClock_Config+0xcc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a20      	ldr	r2, [pc, #128]	; (800159c <SystemClock_Config+0xcc>)
 800151a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <SystemClock_Config+0xcc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2310      	movs	r3, #16
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	2302      	movs	r3, #2
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001540:	2308      	movs	r3, #8
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001548:	2302      	movs	r3, #2
 800154a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800154c:	2304      	movs	r3, #4
 800154e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	4618      	mov	r0, r3
 8001556:	f001 f8df 	bl	8002718 <HAL_RCC_OscConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001560:	f000 f8ac 	bl	80016bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	230f      	movs	r3, #15
 8001566:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001568:	2302      	movs	r3, #2
 800156a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	2103      	movs	r1, #3
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fb39 	bl	8002bf8 <HAL_RCC_ClockConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800158c:	f000 f896 	bl	80016bc <Error_Handler>
  }
}
 8001590:	bf00      	nop
 8001592:	3750      	adds	r7, #80	; 0x50
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000

080015a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <MX_USART1_UART_Init+0x50>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015d8:	f001 fd00 	bl	8002fdc <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015e2:	f000 f86b 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000368 	.word	0x20000368
 80015f0:	40011000 	.word	0x40011000

080015f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_USART2_UART_Init+0x50>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800162c:	f001 fcd6 	bl	8002fdc <HAL_UART_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001636:	f000 f841 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200003a8 	.word	0x200003a8
 8001644:	40004400 	.word	0x40004400

08001648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_DMA_Init+0x3c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <MX_DMA_Init+0x3c>)
 8001658:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_DMA_Init+0x3c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	203a      	movs	r0, #58	; 0x3a
 8001670:	f000 fb09 	bl	8001c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001674:	203a      	movs	r0, #58	; 0x3a
 8001676:	f000 fb22 	bl	8001cbe <HAL_NVIC_EnableIRQ>

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_GPIO_Init+0x30>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <MX_GPIO_Init+0x30>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_GPIO_Init+0x30>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016c2:	e7fe      	b.n	80016c2 <Error_Handler+0x6>

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001702:	2007      	movs	r0, #7
 8001704:	f000 fab4 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4e      	ldr	r2, [pc, #312]	; (800186c <HAL_UART_MspInit+0x158>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d165      	bne.n	8001802 <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	4b4d      	ldr	r3, [pc, #308]	; (8001870 <HAL_UART_MspInit+0x15c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a4c      	ldr	r2, [pc, #304]	; (8001870 <HAL_UART_MspInit+0x15c>)
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <HAL_UART_MspInit+0x15c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	4b46      	ldr	r3, [pc, #280]	; (8001870 <HAL_UART_MspInit+0x15c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a45      	ldr	r2, [pc, #276]	; (8001870 <HAL_UART_MspInit+0x15c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b43      	ldr	r3, [pc, #268]	; (8001870 <HAL_UART_MspInit+0x15c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800176e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001780:	2307      	movs	r3, #7
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	483a      	ldr	r0, [pc, #232]	; (8001874 <HAL_UART_MspInit+0x160>)
 800178c:	f000 fe42 	bl	8002414 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001790:	4b39      	ldr	r3, [pc, #228]	; (8001878 <HAL_UART_MspInit+0x164>)
 8001792:	4a3a      	ldr	r2, [pc, #232]	; (800187c <HAL_UART_MspInit+0x168>)
 8001794:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001796:	4b38      	ldr	r3, [pc, #224]	; (8001878 <HAL_UART_MspInit+0x164>)
 8001798:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800179c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179e:	4b36      	ldr	r3, [pc, #216]	; (8001878 <HAL_UART_MspInit+0x164>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a4:	4b34      	ldr	r3, [pc, #208]	; (8001878 <HAL_UART_MspInit+0x164>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017aa:	4b33      	ldr	r3, [pc, #204]	; (8001878 <HAL_UART_MspInit+0x164>)
 80017ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b2:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_UART_MspInit+0x164>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_UART_MspInit+0x164>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_UART_MspInit+0x164>)
 80017c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80017c6:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <HAL_UART_MspInit+0x164>)
 80017c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017cc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_UART_MspInit+0x164>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017d4:	4828      	ldr	r0, [pc, #160]	; (8001878 <HAL_UART_MspInit+0x164>)
 80017d6:	f000 fa8d 	bl	8001cf4 <HAL_DMA_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80017e0:	f7ff ff6c 	bl	80016bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a24      	ldr	r2, [pc, #144]	; (8001878 <HAL_UART_MspInit+0x164>)
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ea:	4a23      	ldr	r2, [pc, #140]	; (8001878 <HAL_UART_MspInit+0x164>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2100      	movs	r1, #0
 80017f4:	2025      	movs	r0, #37	; 0x25
 80017f6:	f000 fa46 	bl	8001c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017fa:	2025      	movs	r0, #37	; 0x25
 80017fc:	f000 fa5f 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001800:	e030      	b.n	8001864 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1e      	ldr	r2, [pc, #120]	; (8001880 <HAL_UART_MspInit+0x16c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d12b      	bne.n	8001864 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_UART_MspInit+0x15c>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a16      	ldr	r2, [pc, #88]	; (8001870 <HAL_UART_MspInit+0x15c>)
 8001816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_UART_MspInit+0x15c>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_UART_MspInit+0x15c>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HAL_UART_MspInit+0x15c>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6313      	str	r3, [r2, #48]	; 0x30
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_UART_MspInit+0x15c>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001844:	230c      	movs	r3, #12
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001854:	2307      	movs	r3, #7
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_UART_MspInit+0x160>)
 8001860:	f000 fdd8 	bl	8002414 <HAL_GPIO_Init>
}
 8001864:	bf00      	nop
 8001866:	3730      	adds	r7, #48	; 0x30
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40011000 	.word	0x40011000
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000
 8001878:	20000308 	.word	0x20000308
 800187c:	40026440 	.word	0x40026440
 8001880:	40004400 	.word	0x40004400

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 f8de 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <USART1_IRQHandler+0x10>)
 80018de:	f001 fce3 	bl	80032a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000368 	.word	0x20000368

080018ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <DMA2_Stream2_IRQHandler+0x10>)
 80018f2:	f000 fb27 	bl	8001f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000308 	.word	0x20000308

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d207      	bcs.n	8001940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001930:	f002 fb62 	bl	8003ff8 <__errno>
 8001934:	4602      	mov	r2, r0
 8001936:	230c      	movs	r3, #12
 8001938:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	e009      	b.n	8001954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <_sbrk+0x64>)
 8001950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20020000 	.word	0x20020000
 8001960:	00000400 	.word	0x00000400
 8001964:	200002fc 	.word	0x200002fc
 8001968:	200003f0 	.word	0x200003f0

0800196c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <SystemInit+0x28>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <SystemInit+0x28>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SystemInit+0x28>)
 8001982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001986:	609a      	str	r2, [r3, #8]
#endif
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800199c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800199e:	e003      	b.n	80019a8 <LoopCopyDataInit>

080019a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019a6:	3104      	adds	r1, #4

080019a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019a8:	480b      	ldr	r0, [pc, #44]	; (80019d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019b0:	d3f6      	bcc.n	80019a0 <CopyDataInit>
  ldr  r2, =_sbss
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019b4:	e002      	b.n	80019bc <LoopFillZerobss>

080019b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019b8:	f842 3b04 	str.w	r3, [r2], #4

080019bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019c0:	d3f9      	bcc.n	80019b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019c2:	f7ff ffd3 	bl	800196c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c6:	f002 fb1d 	bl	8004004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ca:	f7ff fb8b 	bl	80010e4 <main>
  bx  lr    
 80019ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019d4:	080088ec 	.word	0x080088ec
  ldr  r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019dc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80019e0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80019e4:	200003f0 	.word	0x200003f0

080019e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC_IRQHandler>
	...

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_Init+0x40>)
 80019f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_Init+0x40>)
 8001a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_Init+0x40>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 f92b 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff fe50 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f943 	bl	8001cda <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 f90b 	bl	8001c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	200003e8 	.word	0x200003e8

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200003e8 	.word	0x200003e8

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4907      	ldr	r1, [pc, #28]	; (8001b6c <__NVIC_EnableIRQ+0x38>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c3c:	d301      	bcc.n	8001c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <SysTick_Config+0x40>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f7ff ff8e 	bl	8001b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <SysTick_Config+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <SysTick_Config+0x40>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff29 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c98:	f7ff ff3e 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f7ff ff8e 	bl	8001bc4 <NVIC_EncodePriority>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff5d 	bl	8001b70 <__NVIC_SetPriority>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff31 	bl	8001b34 <__NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffa2 	bl	8001c2c <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff feda 	bl	8001ab8 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e099      	b.n	8001e44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d30:	e00f      	b.n	8001d52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d32:	f7ff fec1 	bl	8001ab8 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d908      	bls.n	8001d52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2203      	movs	r2, #3
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e078      	b.n	8001e44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e8      	bne.n	8001d32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_DMA_Init+0x158>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d107      	bne.n	8001dbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	4313      	orrs	r3, r2
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f023 0307 	bic.w	r3, r3, #7
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d117      	bne.n	8001e16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00e      	beq.n	8001e16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fa91 	bl	8002320 <DMA_CheckFifoParam>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e12:	2301      	movs	r3, #1
 8001e14:	e016      	b.n	8001e44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fa48 	bl	80022b4 <DMA_CalcBaseAndBitshift>
 8001e24:	4603      	mov	r3, r0
 8001e26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	223f      	movs	r2, #63	; 0x3f
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	f010803f 	.word	0xf010803f

08001e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_DMA_Start_IT+0x26>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e040      	b.n	8001ef8 <HAL_DMA_Start_IT+0xa8>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d12f      	bne.n	8001eea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f9da 	bl	8002258 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	223f      	movs	r2, #63	; 0x3f
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0216 	orr.w	r2, r2, #22
 8001ebe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0208 	orr.w	r2, r2, #8
 8001ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e005      	b.n	8001ef6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d004      	beq.n	8001f1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00c      	b.n	8001f38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2205      	movs	r2, #5
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f50:	4b92      	ldr	r3, [pc, #584]	; (800219c <HAL_DMA_IRQHandler+0x258>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a92      	ldr	r2, [pc, #584]	; (80021a0 <HAL_DMA_IRQHandler+0x25c>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0a9b      	lsrs	r3, r3, #10
 8001f5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	2208      	movs	r2, #8
 8001f70:	409a      	lsls	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01a      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0204 	bic.w	r2, r2, #4
 8001f96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d012      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	2204      	movs	r2, #4
 8001fec:	409a      	lsls	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d012      	beq.n	800201c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2204      	movs	r2, #4
 800200a:	409a      	lsls	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	f043 0204 	orr.w	r2, r3, #4
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2210      	movs	r2, #16
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d043      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03c      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2210      	movs	r2, #16
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d018      	beq.n	8002086 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d108      	bne.n	8002074 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d024      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
 8002072:	e01f      	b.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01b      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
 8002084:	e016      	b.n	80020b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d107      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0208 	bic.w	r2, r2, #8
 80020a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2220      	movs	r2, #32
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 808e 	beq.w	80021e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8086 	beq.w	80021e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2220      	movs	r2, #32
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d136      	bne.n	800215c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0216 	bic.w	r2, r2, #22
 80020fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800210c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d103      	bne.n	800211e <HAL_DMA_IRQHandler+0x1da>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0208 	bic.w	r2, r2, #8
 800212c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002132:	223f      	movs	r2, #63	; 0x3f
 8002134:	409a      	lsls	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214e:	2b00      	cmp	r3, #0
 8002150:	d07d      	beq.n	800224e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
        }
        return;
 800215a:	e078      	b.n	800224e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01c      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d108      	bne.n	800218a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	2b00      	cmp	r3, #0
 800217e:	d030      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
 8002188:	e02b      	b.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d027      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
 800219a:	e022      	b.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
 800219c:	20000000 	.word	0x20000000
 80021a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0210 	bic.w	r2, r2, #16
 80021c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d032      	beq.n	8002250 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d022      	beq.n	800223c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2205      	movs	r2, #5
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3301      	adds	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	429a      	cmp	r2, r3
 8002218:	d307      	bcc.n	800222a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f2      	bne.n	800220e <HAL_DMA_IRQHandler+0x2ca>
 8002228:	e000      	b.n	800222c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800222a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
 800224c:	e000      	b.n	8002250 <HAL_DMA_IRQHandler+0x30c>
        return;
 800224e:	bf00      	nop
    }
  }
}
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop

08002258 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002274:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b40      	cmp	r3, #64	; 0x40
 8002284:	d108      	bne.n	8002298 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002296:	e007      	b.n	80022a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	60da      	str	r2, [r3, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	3b10      	subs	r3, #16
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <DMA_CalcBaseAndBitshift+0x64>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ce:	4a13      	ldr	r2, [pc, #76]	; (800231c <DMA_CalcBaseAndBitshift+0x68>)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d909      	bls.n	80022f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	1d1a      	adds	r2, r3, #4
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	659a      	str	r2, [r3, #88]	; 0x58
 80022f4:	e007      	b.n	8002306 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	aaaaaaab 	.word	0xaaaaaaab
 800231c:	080085a4 	.word	0x080085a4

08002320 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d11f      	bne.n	800237a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d855      	bhi.n	80023ec <DMA_CheckFifoParam+0xcc>
 8002340:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <DMA_CheckFifoParam+0x28>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	08002359 	.word	0x08002359
 800234c:	0800236b 	.word	0x0800236b
 8002350:	08002359 	.word	0x08002359
 8002354:	080023ed 	.word	0x080023ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d045      	beq.n	80023f0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002368:	e042      	b.n	80023f0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002372:	d13f      	bne.n	80023f4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002378:	e03c      	b.n	80023f4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002382:	d121      	bne.n	80023c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d836      	bhi.n	80023f8 <DMA_CheckFifoParam+0xd8>
 800238a:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <DMA_CheckFifoParam+0x70>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	080023a1 	.word	0x080023a1
 8002394:	080023a7 	.word	0x080023a7
 8002398:	080023a1 	.word	0x080023a1
 800239c:	080023b9 	.word	0x080023b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      break;
 80023a4:	e02f      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d024      	beq.n	80023fc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b6:	e021      	b.n	80023fc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023c0:	d11e      	bne.n	8002400 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023c6:	e01b      	b.n	8002400 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d902      	bls.n	80023d4 <DMA_CheckFifoParam+0xb4>
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d003      	beq.n	80023da <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023d2:	e018      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      break;
 80023d8:	e015      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00e      	beq.n	8002404 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
      break;
 80023ea:	e00b      	b.n	8002404 <DMA_CheckFifoParam+0xe4>
      break;
 80023ec:	bf00      	nop
 80023ee:	e00a      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 80023f0:	bf00      	nop
 80023f2:	e008      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 80023f4:	bf00      	nop
 80023f6:	e006      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 80023f8:	bf00      	nop
 80023fa:	e004      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 80023fc:	bf00      	nop
 80023fe:	e002      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;   
 8002400:	bf00      	nop
 8002402:	e000      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 8002404:	bf00      	nop
    }
  } 
  
  return status; 
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e159      	b.n	80026e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8148 	bne.w	80026de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d00b      	beq.n	800246e <HAL_GPIO_Init+0x5a>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d007      	beq.n	800246e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002462:	2b11      	cmp	r3, #17
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b12      	cmp	r3, #18
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0xfc>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b12      	cmp	r3, #18
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a2 	beq.w	80026de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b56      	ldr	r3, [pc, #344]	; (80026f8 <HAL_GPIO_Init+0x2e4>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4a55      	ldr	r2, [pc, #340]	; (80026f8 <HAL_GPIO_Init+0x2e4>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	; 0x44
 80025aa:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_GPIO_Init+0x2e4>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b6:	4a51      	ldr	r2, [pc, #324]	; (80026fc <HAL_GPIO_Init+0x2e8>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a48      	ldr	r2, [pc, #288]	; (8002700 <HAL_GPIO_Init+0x2ec>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x202>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a47      	ldr	r2, [pc, #284]	; (8002704 <HAL_GPIO_Init+0x2f0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x1fe>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a46      	ldr	r2, [pc, #280]	; (8002708 <HAL_GPIO_Init+0x2f4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x1fa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a45      	ldr	r2, [pc, #276]	; (800270c <HAL_GPIO_Init+0x2f8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x1f6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a44      	ldr	r2, [pc, #272]	; (8002710 <HAL_GPIO_Init+0x2fc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x1f2>
 8002602:	2304      	movs	r3, #4
 8002604:	e008      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002606:	2307      	movs	r3, #7
 8002608:	e006      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260a:	2303      	movs	r3, #3
 800260c:	e004      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260e:	2302      	movs	r3, #2
 8002610:	e002      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002616:	2300      	movs	r3, #0
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f002 0203 	and.w	r2, r2, #3
 800261e:	0092      	lsls	r2, r2, #2
 8002620:	4093      	lsls	r3, r2
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002628:	4934      	ldr	r1, [pc, #208]	; (80026fc <HAL_GPIO_Init+0x2e8>)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	3302      	adds	r3, #2
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002636:	4b37      	ldr	r3, [pc, #220]	; (8002714 <HAL_GPIO_Init+0x300>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800265a:	4a2e      	ldr	r2, [pc, #184]	; (8002714 <HAL_GPIO_Init+0x300>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002660:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <HAL_GPIO_Init+0x300>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002684:	4a23      	ldr	r2, [pc, #140]	; (8002714 <HAL_GPIO_Init+0x300>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_GPIO_Init+0x300>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ae:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_GPIO_Init+0x300>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <HAL_GPIO_Init+0x300>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d8:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <HAL_GPIO_Init+0x300>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	f67f aea2 	bls.w	8002430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ec:	bf00      	nop
 80026ee:	3724      	adds	r7, #36	; 0x24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40013c00 	.word	0x40013c00

08002718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e25b      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d075      	beq.n	8002822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002736:	4ba3      	ldr	r3, [pc, #652]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b04      	cmp	r3, #4
 8002740:	d00c      	beq.n	800275c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002742:	4ba0      	ldr	r3, [pc, #640]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274a:	2b08      	cmp	r3, #8
 800274c:	d112      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274e:	4b9d      	ldr	r3, [pc, #628]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275a:	d10b      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	4b99      	ldr	r3, [pc, #612]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05b      	beq.n	8002820 <HAL_RCC_OscConfig+0x108>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d157      	bne.n	8002820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e236      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d106      	bne.n	800278c <HAL_RCC_OscConfig+0x74>
 800277e:	4b91      	ldr	r3, [pc, #580]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a90      	ldr	r2, [pc, #576]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e01d      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x98>
 8002796:	4b8b      	ldr	r3, [pc, #556]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a8a      	ldr	r2, [pc, #552]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a87      	ldr	r2, [pc, #540]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 80027b0:	4b84      	ldr	r3, [pc, #528]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a83      	ldr	r2, [pc, #524]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b81      	ldr	r3, [pc, #516]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a80      	ldr	r2, [pc, #512]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7ff f972 	bl	8001ab8 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7ff f96e 	bl	8001ab8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e1fb      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0xc0>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7ff f95e 	bl	8001ab8 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7ff f95a 	bl	8001ab8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1e7      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	4b6c      	ldr	r3, [pc, #432]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0xe8>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d063      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800282e:	4b65      	ldr	r3, [pc, #404]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283a:	4b62      	ldr	r3, [pc, #392]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002842:	2b08      	cmp	r3, #8
 8002844:	d11c      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b5f      	ldr	r3, [pc, #380]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d116      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	4b5c      	ldr	r3, [pc, #368]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e1bb      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286a:	4b56      	ldr	r3, [pc, #344]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4952      	ldr	r1, [pc, #328]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287e:	e03a      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d020      	beq.n	80028ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002888:	4b4f      	ldr	r3, [pc, #316]	; (80029c8 <HAL_RCC_OscConfig+0x2b0>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7ff f913 	bl	8001ab8 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002896:	f7ff f90f 	bl	8001ab8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e19c      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4940      	ldr	r1, [pc, #256]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
 80028c8:	e015      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ca:	4b3f      	ldr	r3, [pc, #252]	; (80029c8 <HAL_RCC_OscConfig+0x2b0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7ff f8f2 	bl	8001ab8 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d8:	f7ff f8ee 	bl	8001ab8 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e17b      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d030      	beq.n	8002964 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290a:	4b30      	ldr	r3, [pc, #192]	; (80029cc <HAL_RCC_OscConfig+0x2b4>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7ff f8d2 	bl	8001ab8 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002918:	f7ff f8ce 	bl	8001ab8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e15b      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x200>
 8002936:	e015      	b.n	8002964 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002938:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_RCC_OscConfig+0x2b4>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7ff f8bb 	bl	8001ab8 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002946:	f7ff f8b7 	bl	8001ab8 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e144      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800295a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a0 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_OscConfig+0x2b8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d121      	bne.n	80029f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_RCC_OscConfig+0x2b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <HAL_RCC_OscConfig+0x2b8>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ba:	f7ff f87d 	bl	8001ab8 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	e011      	b.n	80029e6 <HAL_RCC_OscConfig+0x2ce>
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	42470000 	.word	0x42470000
 80029cc:	42470e80 	.word	0x42470e80
 80029d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d4:	f7ff f870 	bl	8001ab8 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e0fd      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e6:	4b81      	ldr	r3, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x4d4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d106      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2f0>
 80029fa:	4b7d      	ldr	r3, [pc, #500]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a7c      	ldr	r2, [pc, #496]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
 8002a06:	e01c      	b.n	8002a42 <HAL_RCC_OscConfig+0x32a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d10c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x312>
 8002a10:	4b77      	ldr	r3, [pc, #476]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a76      	ldr	r2, [pc, #472]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	4b74      	ldr	r3, [pc, #464]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a73      	ldr	r2, [pc, #460]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	e00b      	b.n	8002a42 <HAL_RCC_OscConfig+0x32a>
 8002a2a:	4b71      	ldr	r3, [pc, #452]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a70      	ldr	r2, [pc, #448]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	4b6e      	ldr	r3, [pc, #440]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a6d      	ldr	r2, [pc, #436]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d015      	beq.n	8002a76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7ff f835 	bl	8001ab8 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7ff f831 	bl	8001ab8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0bc      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a68:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ee      	beq.n	8002a52 <HAL_RCC_OscConfig+0x33a>
 8002a74:	e014      	b.n	8002aa0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7ff f81f 	bl	8001ab8 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7ff f81b 	bl	8001ab8 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e0a6      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a94:	4b56      	ldr	r3, [pc, #344]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4b52      	ldr	r3, [pc, #328]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a51      	ldr	r2, [pc, #324]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8092 	beq.w	8002be0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002abc:	4b4c      	ldr	r3, [pc, #304]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d05c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d141      	bne.n	8002b54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <HAL_RCC_OscConfig+0x4dc>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe ffef 	bl	8001ab8 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe ffeb 	bl	8001ab8 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e078      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af0:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	019b      	lsls	r3, r3, #6
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	3b01      	subs	r3, #1
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	061b      	lsls	r3, r3, #24
 8002b20:	4933      	ldr	r1, [pc, #204]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b26:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <HAL_RCC_OscConfig+0x4dc>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe ffc4 	bl	8001ab8 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe ffc0 	bl	8001ab8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e04d      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b46:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x41c>
 8002b52:	e045      	b.n	8002be0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_RCC_OscConfig+0x4dc>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe ffad 	bl	8001ab8 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe ffa9 	bl	8001ab8 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e036      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b74:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <HAL_RCC_OscConfig+0x44a>
 8002b80:	e02e      	b.n	8002be0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e029      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_RCC_OscConfig+0x4d8>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d11c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d115      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d10d      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d106      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	42470060 	.word	0x42470060

08002bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0cc      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b68      	ldr	r3, [pc, #416]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d90c      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b65      	ldr	r3, [pc, #404]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b63      	ldr	r3, [pc, #396]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0b8      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a58      	ldr	r2, [pc, #352]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c64:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a52      	ldr	r2, [pc, #328]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c70:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	494d      	ldr	r1, [pc, #308]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d044      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d119      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e07f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e06f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc6:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e067      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd6:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f023 0203 	bic.w	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4934      	ldr	r1, [pc, #208]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce8:	f7fe fee6 	bl	8001ab8 <HAL_GetTick>
 8002cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf0:	f7fe fee2 	bl	8001ab8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e04f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 020c 	and.w	r2, r3, #12
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d1eb      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d20c      	bcs.n	8002d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e032      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4916      	ldr	r1, [pc, #88]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	490e      	ldr	r1, [pc, #56]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d7e:	f000 f821 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002d82:	4601      	mov	r1, r0
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d90:	5cd3      	ldrb	r3, [r2, r3]
 8002d92:	fa21 f303 	lsr.w	r3, r1, r3
 8002d96:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fe46 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023c00 	.word	0x40023c00
 8002db4:	40023800 	.word	0x40023800
 8002db8:	0800858c 	.word	0x0800858c
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	20000004 	.word	0x20000004

08002dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dda:	4b63      	ldr	r3, [pc, #396]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d007      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x32>
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d008      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x38>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 80b4 	bne.w	8002f58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df0:	4b5e      	ldr	r3, [pc, #376]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002df2:	60bb      	str	r3, [r7, #8]
       break;
 8002df4:	e0b3      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002df6:	4b5e      	ldr	r3, [pc, #376]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002df8:	60bb      	str	r3, [r7, #8]
      break;
 8002dfa:	e0b0      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dfc:	4b5a      	ldr	r3, [pc, #360]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e06:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d04a      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e12:	4b55      	ldr	r3, [pc, #340]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	f04f 0400 	mov.w	r4, #0
 8002e1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	ea03 0501 	and.w	r5, r3, r1
 8002e28:	ea04 0602 	and.w	r6, r4, r2
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	4632      	mov	r2, r6
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	f04f 0400 	mov.w	r4, #0
 8002e38:	0154      	lsls	r4, r2, #5
 8002e3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e3e:	014b      	lsls	r3, r1, #5
 8002e40:	4619      	mov	r1, r3
 8002e42:	4622      	mov	r2, r4
 8002e44:	1b49      	subs	r1, r1, r5
 8002e46:	eb62 0206 	sbc.w	r2, r2, r6
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	f04f 0400 	mov.w	r4, #0
 8002e52:	0194      	lsls	r4, r2, #6
 8002e54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e58:	018b      	lsls	r3, r1, #6
 8002e5a:	1a5b      	subs	r3, r3, r1
 8002e5c:	eb64 0402 	sbc.w	r4, r4, r2
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	00e2      	lsls	r2, r4, #3
 8002e6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e6e:	00d9      	lsls	r1, r3, #3
 8002e70:	460b      	mov	r3, r1
 8002e72:	4614      	mov	r4, r2
 8002e74:	195b      	adds	r3, r3, r5
 8002e76:	eb44 0406 	adc.w	r4, r4, r6
 8002e7a:	f04f 0100 	mov.w	r1, #0
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	0262      	lsls	r2, r4, #9
 8002e84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e88:	0259      	lsls	r1, r3, #9
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	4621      	mov	r1, r4
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f04f 0400 	mov.w	r4, #0
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	f7fd fefc 	bl	8000c98 <__aeabi_uldivmod>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e049      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea8:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	f04f 0400 	mov.w	r4, #0
 8002eb2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	ea03 0501 	and.w	r5, r3, r1
 8002ebe:	ea04 0602 	and.w	r6, r4, r2
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	4632      	mov	r2, r6
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	f04f 0400 	mov.w	r4, #0
 8002ece:	0154      	lsls	r4, r2, #5
 8002ed0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ed4:	014b      	lsls	r3, r1, #5
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4622      	mov	r2, r4
 8002eda:	1b49      	subs	r1, r1, r5
 8002edc:	eb62 0206 	sbc.w	r2, r2, r6
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	f04f 0400 	mov.w	r4, #0
 8002ee8:	0194      	lsls	r4, r2, #6
 8002eea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002eee:	018b      	lsls	r3, r1, #6
 8002ef0:	1a5b      	subs	r3, r3, r1
 8002ef2:	eb64 0402 	sbc.w	r4, r4, r2
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	00e2      	lsls	r2, r4, #3
 8002f00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f04:	00d9      	lsls	r1, r3, #3
 8002f06:	460b      	mov	r3, r1
 8002f08:	4614      	mov	r4, r2
 8002f0a:	195b      	adds	r3, r3, r5
 8002f0c:	eb44 0406 	adc.w	r4, r4, r6
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	02a2      	lsls	r2, r4, #10
 8002f1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f1e:	0299      	lsls	r1, r3, #10
 8002f20:	460b      	mov	r3, r1
 8002f22:	4614      	mov	r4, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	4621      	mov	r1, r4
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f04f 0400 	mov.w	r4, #0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4623      	mov	r3, r4
 8002f32:	f7fd feb1 	bl	8000c98 <__aeabi_uldivmod>
 8002f36:	4603      	mov	r3, r0
 8002f38:	460c      	mov	r4, r1
 8002f3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	3301      	adds	r3, #1
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	60bb      	str	r3, [r7, #8]
      break;
 8002f56:	e002      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f5a:	60bb      	str	r3, [r7, #8]
      break;
 8002f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	00f42400 	.word	0x00f42400
 8002f70:	007a1200 	.word	0x007a1200

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000000 	.word	0x20000000

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f90:	f7ff fff0 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f94:	4601      	mov	r1, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0a9b      	lsrs	r3, r3, #10
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	0800859c 	.word	0x0800859c

08002fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fb8:	f7ff ffdc 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4601      	mov	r1, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0b5b      	lsrs	r3, r3, #13
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4a03      	ldr	r2, [pc, #12]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	0800859c 	.word	0x0800859c

08002fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e03f      	b.n	800306e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe fb86 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800301e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fc6d 	bl	8003900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b088      	sub	sp, #32
 800307a:	af02      	add	r7, sp, #8
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b20      	cmp	r3, #32
 8003094:	f040 8083 	bne.w	800319e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_UART_Transmit+0x2e>
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e07b      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Transmit+0x40>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e074      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2221      	movs	r2, #33	; 0x21
 80030c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80030cc:	f7fe fcf4 	bl	8001ab8 <HAL_GetTick>
 80030d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	88fa      	ldrh	r2, [r7, #6]
 80030dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80030e6:	e042      	b.n	800316e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fe:	d122      	bne.n	8003146 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fa76 	bl	80035fc <UART_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e042      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3302      	adds	r3, #2
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	e017      	b.n	800316e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	3301      	adds	r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	e013      	b.n	800316e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fa53 	bl	80035fc <UART_WaitOnFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e01f      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	60ba      	str	r2, [r7, #8]
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1b7      	bne.n	80030e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2200      	movs	r2, #0
 8003180:	2140      	movs	r1, #64	; 0x40
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fa3a 	bl	80035fc <UART_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e006      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	e000      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800319e:	2302      	movs	r3, #2
  }
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d166      	bne.n	8003290 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_UART_Receive_DMA+0x26>
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e05f      	b.n	8003292 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_UART_Receive_DMA+0x38>
 80031dc:	2302      	movs	r3, #2
 80031de:	e058      	b.n	8003292 <HAL_UART_Receive_DMA+0xea>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2222      	movs	r2, #34	; 0x22
 80031fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	4a25      	ldr	r2, [pc, #148]	; (800329c <HAL_UART_Receive_DMA+0xf4>)
 8003208:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	4a24      	ldr	r2, [pc, #144]	; (80032a0 <HAL_UART_Receive_DMA+0xf8>)
 8003210:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	4a23      	ldr	r2, [pc, #140]	; (80032a4 <HAL_UART_Receive_DMA+0xfc>)
 8003218:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321e:	2200      	movs	r2, #0
 8003220:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003222:	f107 0308 	add.w	r3, r7, #8
 8003226:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3304      	adds	r3, #4
 8003232:	4619      	mov	r1, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	f7fe fe09 	bl	8001e50 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800326a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800328a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	080034e5 	.word	0x080034e5
 80032a0:	0800354d 	.word	0x0800354d
 80032a4:	08003569 	.word	0x08003569

080032a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10d      	bne.n	80032fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_UART_IRQHandler+0x52>
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fa82 	bl	80037fc <UART_Receive_IT>
      return;
 80032f8:	e0d1      	b.n	800349e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80b0 	beq.w	8003462 <HAL_UART_IRQHandler+0x1ba>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <HAL_UART_IRQHandler+0x70>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80a5 	beq.w	8003462 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_UART_IRQHandler+0x90>
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	f043 0201 	orr.w	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_UART_IRQHandler+0xb0>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003350:	f043 0202 	orr.w	r2, r3, #2
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_UART_IRQHandler+0xd0>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	f043 0204 	orr.w	r2, r3, #4
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00f      	beq.n	80033a2 <HAL_UART_IRQHandler+0xfa>
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <HAL_UART_IRQHandler+0xee>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	f043 0208 	orr.w	r2, r3, #8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d078      	beq.n	800349c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_UART_IRQHandler+0x11c>
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fa1c 	bl	80037fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	bf0c      	ite	eq
 80033d2:	2301      	moveq	r3, #1
 80033d4:	2300      	movne	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_UART_IRQHandler+0x144>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d031      	beq.n	8003450 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f965 	bl	80036bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d123      	bne.n	8003448 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	2b00      	cmp	r3, #0
 8003416:	d013      	beq.n	8003440 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341c:	4a21      	ldr	r2, [pc, #132]	; (80034a4 <HAL_UART_IRQHandler+0x1fc>)
 800341e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fd6b 	bl	8001f00 <HAL_DMA_Abort_IT>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d016      	beq.n	800345e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800343a:	4610      	mov	r0, r2
 800343c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343e:	e00e      	b.n	800345e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f845 	bl	80034d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003446:	e00a      	b.n	800345e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f841 	bl	80034d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344e:	e006      	b.n	800345e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f83d 	bl	80034d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800345c:	e01e      	b.n	800349c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345e:	bf00      	nop
    return;
 8003460:	e01c      	b.n	800349c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_UART_IRQHandler+0x1d6>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f952 	bl	8003720 <UART_Transmit_IT>
    return;
 800347c:	e00f      	b.n	800349e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_UART_IRQHandler+0x1f6>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f99a 	bl	80037cc <UART_EndTransmit_IT>
    return;
 8003498:	bf00      	nop
 800349a:	e000      	b.n	800349e <HAL_UART_IRQHandler+0x1f6>
    return;
 800349c:	bf00      	nop
  }
}
 800349e:	3720      	adds	r7, #32
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	080036f9 	.word	0x080036f9

080034a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d11e      	bne.n	800353e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003514:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0201 	bic.w	r2, r2, #1
 8003524:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003534:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7fd fd2a 	bl	8000f98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f7ff ffae 	bl	80034bc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b21      	cmp	r3, #33	; 0x21
 800359a:	d108      	bne.n	80035ae <UART_DMAError+0x46>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2200      	movs	r2, #0
 80035a6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80035a8:	68b8      	ldr	r0, [r7, #8]
 80035aa:	f000 f871 	bl	8003690 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b22      	cmp	r3, #34	; 0x22
 80035ce:	d108      	bne.n	80035e2 <UART_DMAError+0x7a>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2200      	movs	r2, #0
 80035da:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80035dc:	68b8      	ldr	r0, [r7, #8]
 80035de:	f000 f86d 	bl	80036bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e6:	f043 0210 	orr.w	r2, r3, #16
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035ee:	68b8      	ldr	r0, [r7, #8]
 80035f0:	f7ff ff6e 	bl	80034d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360c:	e02c      	b.n	8003668 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d028      	beq.n	8003668 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d007      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x30>
 800361c:	f7fe fa4c 	bl	8001ab8 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	429a      	cmp	r2, r3
 800362a:	d21d      	bcs.n	8003668 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800363a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e00f      	b.n	8003688 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4013      	ands	r3, r2
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	429a      	cmp	r2, r3
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	429a      	cmp	r2, r3
 8003684:	d0c3      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80036a6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f7ff fedc 	bl	80034d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b21      	cmp	r3, #33	; 0x21
 8003732:	d144      	bne.n	80037be <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373c:	d11a      	bne.n	8003774 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003752:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	1c9a      	adds	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]
 8003766:	e00e      	b.n	8003786 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]
 8003772:	e008      	b.n	8003786 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	1c59      	adds	r1, r3, #1
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6211      	str	r1, [r2, #32]
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29b      	uxth	r3, r3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4619      	mov	r1, r3
 8003794:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10f      	bne.n	80037ba <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e000      	b.n	80037c0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80037be:	2302      	movs	r3, #2
  }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff fe5b 	bl	80034a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b22      	cmp	r3, #34	; 0x22
 800380e:	d171      	bne.n	80038f4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003818:	d123      	bne.n	8003862 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10e      	bne.n	8003846 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	1c9a      	adds	r2, r3, #2
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
 8003844:	e029      	b.n	800389a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	b29b      	uxth	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	629a      	str	r2, [r3, #40]	; 0x28
 8003860:	e01b      	b.n	800389a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6858      	ldr	r0, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	1c59      	adds	r1, r3, #1
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6291      	str	r1, [r2, #40]	; 0x28
 800387a:	b2c2      	uxtb	r2, r0
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e00c      	b.n	800389a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	1c58      	adds	r0, r3, #1
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	6288      	str	r0, [r1, #40]	; 0x28
 8003892:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	4619      	mov	r1, r3
 80038a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d120      	bne.n	80038f0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0220 	bic.w	r2, r2, #32
 80038bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fb56 	bl	8000f98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e002      	b.n	80038f6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e000      	b.n	80038f6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003942:	f023 030c 	bic.w	r3, r3, #12
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	430b      	orrs	r3, r1
 800394e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396e:	f040 818b 	bne.w	8003c88 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4ac1      	ldr	r2, [pc, #772]	; (8003c7c <UART_SetConfig+0x37c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d005      	beq.n	8003988 <UART_SetConfig+0x88>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4abf      	ldr	r2, [pc, #764]	; (8003c80 <UART_SetConfig+0x380>)
 8003982:	4293      	cmp	r3, r2
 8003984:	f040 80bd 	bne.w	8003b02 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003988:	f7ff fb14 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 800398c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	461d      	mov	r5, r3
 8003992:	f04f 0600 	mov.w	r6, #0
 8003996:	46a8      	mov	r8, r5
 8003998:	46b1      	mov	r9, r6
 800399a:	eb18 0308 	adds.w	r3, r8, r8
 800399e:	eb49 0409 	adc.w	r4, r9, r9
 80039a2:	4698      	mov	r8, r3
 80039a4:	46a1      	mov	r9, r4
 80039a6:	eb18 0805 	adds.w	r8, r8, r5
 80039aa:	eb49 0906 	adc.w	r9, r9, r6
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039c2:	4688      	mov	r8, r1
 80039c4:	4691      	mov	r9, r2
 80039c6:	eb18 0005 	adds.w	r0, r8, r5
 80039ca:	eb49 0106 	adc.w	r1, r9, r6
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	461d      	mov	r5, r3
 80039d4:	f04f 0600 	mov.w	r6, #0
 80039d8:	196b      	adds	r3, r5, r5
 80039da:	eb46 0406 	adc.w	r4, r6, r6
 80039de:	461a      	mov	r2, r3
 80039e0:	4623      	mov	r3, r4
 80039e2:	f7fd f959 	bl	8000c98 <__aeabi_uldivmod>
 80039e6:	4603      	mov	r3, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	461a      	mov	r2, r3
 80039ec:	4ba5      	ldr	r3, [pc, #660]	; (8003c84 <UART_SetConfig+0x384>)
 80039ee:	fba3 2302 	umull	r2, r3, r3, r2
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	461d      	mov	r5, r3
 80039fc:	f04f 0600 	mov.w	r6, #0
 8003a00:	46a9      	mov	r9, r5
 8003a02:	46b2      	mov	sl, r6
 8003a04:	eb19 0309 	adds.w	r3, r9, r9
 8003a08:	eb4a 040a 	adc.w	r4, sl, sl
 8003a0c:	4699      	mov	r9, r3
 8003a0e:	46a2      	mov	sl, r4
 8003a10:	eb19 0905 	adds.w	r9, r9, r5
 8003a14:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a2c:	4689      	mov	r9, r1
 8003a2e:	4692      	mov	sl, r2
 8003a30:	eb19 0005 	adds.w	r0, r9, r5
 8003a34:	eb4a 0106 	adc.w	r1, sl, r6
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	461d      	mov	r5, r3
 8003a3e:	f04f 0600 	mov.w	r6, #0
 8003a42:	196b      	adds	r3, r5, r5
 8003a44:	eb46 0406 	adc.w	r4, r6, r6
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	f7fd f924 	bl	8000c98 <__aeabi_uldivmod>
 8003a50:	4603      	mov	r3, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b8b      	ldr	r3, [pc, #556]	; (8003c84 <UART_SetConfig+0x384>)
 8003a58:	fba3 1302 	umull	r1, r3, r3, r2
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	2164      	movs	r1, #100	; 0x64
 8003a60:	fb01 f303 	mul.w	r3, r1, r3
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	3332      	adds	r3, #50	; 0x32
 8003a6a:	4a86      	ldr	r2, [pc, #536]	; (8003c84 <UART_SetConfig+0x384>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a78:	4498      	add	r8, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	461d      	mov	r5, r3
 8003a7e:	f04f 0600 	mov.w	r6, #0
 8003a82:	46a9      	mov	r9, r5
 8003a84:	46b2      	mov	sl, r6
 8003a86:	eb19 0309 	adds.w	r3, r9, r9
 8003a8a:	eb4a 040a 	adc.w	r4, sl, sl
 8003a8e:	4699      	mov	r9, r3
 8003a90:	46a2      	mov	sl, r4
 8003a92:	eb19 0905 	adds.w	r9, r9, r5
 8003a96:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aae:	4689      	mov	r9, r1
 8003ab0:	4692      	mov	sl, r2
 8003ab2:	eb19 0005 	adds.w	r0, r9, r5
 8003ab6:	eb4a 0106 	adc.w	r1, sl, r6
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	461d      	mov	r5, r3
 8003ac0:	f04f 0600 	mov.w	r6, #0
 8003ac4:	196b      	adds	r3, r5, r5
 8003ac6:	eb46 0406 	adc.w	r4, r6, r6
 8003aca:	461a      	mov	r2, r3
 8003acc:	4623      	mov	r3, r4
 8003ace:	f7fd f8e3 	bl	8000c98 <__aeabi_uldivmod>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b6a      	ldr	r3, [pc, #424]	; (8003c84 <UART_SetConfig+0x384>)
 8003ada:	fba3 1302 	umull	r1, r3, r3, r2
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	2164      	movs	r1, #100	; 0x64
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	3332      	adds	r3, #50	; 0x32
 8003aec:	4a65      	ldr	r2, [pc, #404]	; (8003c84 <UART_SetConfig+0x384>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	f003 0207 	and.w	r2, r3, #7
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4442      	add	r2, r8
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	e26f      	b.n	8003fe2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b02:	f7ff fa43 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8003b06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	461d      	mov	r5, r3
 8003b0c:	f04f 0600 	mov.w	r6, #0
 8003b10:	46a8      	mov	r8, r5
 8003b12:	46b1      	mov	r9, r6
 8003b14:	eb18 0308 	adds.w	r3, r8, r8
 8003b18:	eb49 0409 	adc.w	r4, r9, r9
 8003b1c:	4698      	mov	r8, r3
 8003b1e:	46a1      	mov	r9, r4
 8003b20:	eb18 0805 	adds.w	r8, r8, r5
 8003b24:	eb49 0906 	adc.w	r9, r9, r6
 8003b28:	f04f 0100 	mov.w	r1, #0
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b3c:	4688      	mov	r8, r1
 8003b3e:	4691      	mov	r9, r2
 8003b40:	eb18 0005 	adds.w	r0, r8, r5
 8003b44:	eb49 0106 	adc.w	r1, r9, r6
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	461d      	mov	r5, r3
 8003b4e:	f04f 0600 	mov.w	r6, #0
 8003b52:	196b      	adds	r3, r5, r5
 8003b54:	eb46 0406 	adc.w	r4, r6, r6
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4623      	mov	r3, r4
 8003b5c:	f7fd f89c 	bl	8000c98 <__aeabi_uldivmod>
 8003b60:	4603      	mov	r3, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <UART_SetConfig+0x384>)
 8003b68:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	461d      	mov	r5, r3
 8003b76:	f04f 0600 	mov.w	r6, #0
 8003b7a:	46a9      	mov	r9, r5
 8003b7c:	46b2      	mov	sl, r6
 8003b7e:	eb19 0309 	adds.w	r3, r9, r9
 8003b82:	eb4a 040a 	adc.w	r4, sl, sl
 8003b86:	4699      	mov	r9, r3
 8003b88:	46a2      	mov	sl, r4
 8003b8a:	eb19 0905 	adds.w	r9, r9, r5
 8003b8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ba2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ba6:	4689      	mov	r9, r1
 8003ba8:	4692      	mov	sl, r2
 8003baa:	eb19 0005 	adds.w	r0, r9, r5
 8003bae:	eb4a 0106 	adc.w	r1, sl, r6
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	f04f 0600 	mov.w	r6, #0
 8003bbc:	196b      	adds	r3, r5, r5
 8003bbe:	eb46 0406 	adc.w	r4, r6, r6
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4623      	mov	r3, r4
 8003bc6:	f7fd f867 	bl	8000c98 <__aeabi_uldivmod>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	460c      	mov	r4, r1
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4b2c      	ldr	r3, [pc, #176]	; (8003c84 <UART_SetConfig+0x384>)
 8003bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2164      	movs	r1, #100	; 0x64
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	3332      	adds	r3, #50	; 0x32
 8003be4:	4a27      	ldr	r2, [pc, #156]	; (8003c84 <UART_SetConfig+0x384>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bf2:	4498      	add	r8, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	461d      	mov	r5, r3
 8003bf8:	f04f 0600 	mov.w	r6, #0
 8003bfc:	46a9      	mov	r9, r5
 8003bfe:	46b2      	mov	sl, r6
 8003c00:	eb19 0309 	adds.w	r3, r9, r9
 8003c04:	eb4a 040a 	adc.w	r4, sl, sl
 8003c08:	4699      	mov	r9, r3
 8003c0a:	46a2      	mov	sl, r4
 8003c0c:	eb19 0905 	adds.w	r9, r9, r5
 8003c10:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c14:	f04f 0100 	mov.w	r1, #0
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c28:	4689      	mov	r9, r1
 8003c2a:	4692      	mov	sl, r2
 8003c2c:	eb19 0005 	adds.w	r0, r9, r5
 8003c30:	eb4a 0106 	adc.w	r1, sl, r6
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	461d      	mov	r5, r3
 8003c3a:	f04f 0600 	mov.w	r6, #0
 8003c3e:	196b      	adds	r3, r5, r5
 8003c40:	eb46 0406 	adc.w	r4, r6, r6
 8003c44:	461a      	mov	r2, r3
 8003c46:	4623      	mov	r3, r4
 8003c48:	f7fd f826 	bl	8000c98 <__aeabi_uldivmod>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	460c      	mov	r4, r1
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <UART_SetConfig+0x384>)
 8003c54:	fba3 1302 	umull	r1, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	2164      	movs	r1, #100	; 0x64
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	3332      	adds	r3, #50	; 0x32
 8003c66:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <UART_SetConfig+0x384>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	f003 0207 	and.w	r2, r3, #7
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4442      	add	r2, r8
 8003c78:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c7a:	e1b2      	b.n	8003fe2 <UART_SetConfig+0x6e2>
 8003c7c:	40011000 	.word	0x40011000
 8003c80:	40011400 	.word	0x40011400
 8003c84:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4ad7      	ldr	r2, [pc, #860]	; (8003fec <UART_SetConfig+0x6ec>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d005      	beq.n	8003c9e <UART_SetConfig+0x39e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4ad6      	ldr	r2, [pc, #856]	; (8003ff0 <UART_SetConfig+0x6f0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	f040 80d1 	bne.w	8003e40 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c9e:	f7ff f989 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 8003ca2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	469a      	mov	sl, r3
 8003ca8:	f04f 0b00 	mov.w	fp, #0
 8003cac:	46d0      	mov	r8, sl
 8003cae:	46d9      	mov	r9, fp
 8003cb0:	eb18 0308 	adds.w	r3, r8, r8
 8003cb4:	eb49 0409 	adc.w	r4, r9, r9
 8003cb8:	4698      	mov	r8, r3
 8003cba:	46a1      	mov	r9, r4
 8003cbc:	eb18 080a 	adds.w	r8, r8, sl
 8003cc0:	eb49 090b 	adc.w	r9, r9, fp
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cd0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cd4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cd8:	4688      	mov	r8, r1
 8003cda:	4691      	mov	r9, r2
 8003cdc:	eb1a 0508 	adds.w	r5, sl, r8
 8003ce0:	eb4b 0609 	adc.w	r6, fp, r9
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f04f 0400 	mov.w	r4, #0
 8003cf6:	0094      	lsls	r4, r2, #2
 8003cf8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cfc:	008b      	lsls	r3, r1, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4623      	mov	r3, r4
 8003d02:	4628      	mov	r0, r5
 8003d04:	4631      	mov	r1, r6
 8003d06:	f7fc ffc7 	bl	8000c98 <__aeabi_uldivmod>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4bb8      	ldr	r3, [pc, #736]	; (8003ff4 <UART_SetConfig+0x6f4>)
 8003d12:	fba3 2302 	umull	r2, r3, r3, r2
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	469b      	mov	fp, r3
 8003d20:	f04f 0c00 	mov.w	ip, #0
 8003d24:	46d9      	mov	r9, fp
 8003d26:	46e2      	mov	sl, ip
 8003d28:	eb19 0309 	adds.w	r3, r9, r9
 8003d2c:	eb4a 040a 	adc.w	r4, sl, sl
 8003d30:	4699      	mov	r9, r3
 8003d32:	46a2      	mov	sl, r4
 8003d34:	eb19 090b 	adds.w	r9, r9, fp
 8003d38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d50:	4689      	mov	r9, r1
 8003d52:	4692      	mov	sl, r2
 8003d54:	eb1b 0509 	adds.w	r5, fp, r9
 8003d58:	eb4c 060a 	adc.w	r6, ip, sl
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4619      	mov	r1, r3
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	f04f 0400 	mov.w	r4, #0
 8003d6e:	0094      	lsls	r4, r2, #2
 8003d70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d74:	008b      	lsls	r3, r1, #2
 8003d76:	461a      	mov	r2, r3
 8003d78:	4623      	mov	r3, r4
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	4631      	mov	r1, r6
 8003d7e:	f7fc ff8b 	bl	8000c98 <__aeabi_uldivmod>
 8003d82:	4603      	mov	r3, r0
 8003d84:	460c      	mov	r4, r1
 8003d86:	461a      	mov	r2, r3
 8003d88:	4b9a      	ldr	r3, [pc, #616]	; (8003ff4 <UART_SetConfig+0x6f4>)
 8003d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	2164      	movs	r1, #100	; 0x64
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	3332      	adds	r3, #50	; 0x32
 8003d9c:	4a95      	ldr	r2, [pc, #596]	; (8003ff4 <UART_SetConfig+0x6f4>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da8:	4498      	add	r8, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	469b      	mov	fp, r3
 8003dae:	f04f 0c00 	mov.w	ip, #0
 8003db2:	46d9      	mov	r9, fp
 8003db4:	46e2      	mov	sl, ip
 8003db6:	eb19 0309 	adds.w	r3, r9, r9
 8003dba:	eb4a 040a 	adc.w	r4, sl, sl
 8003dbe:	4699      	mov	r9, r3
 8003dc0:	46a2      	mov	sl, r4
 8003dc2:	eb19 090b 	adds.w	r9, r9, fp
 8003dc6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dca:	f04f 0100 	mov.w	r1, #0
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dde:	4689      	mov	r9, r1
 8003de0:	4692      	mov	sl, r2
 8003de2:	eb1b 0509 	adds.w	r5, fp, r9
 8003de6:	eb4c 060a 	adc.w	r6, ip, sl
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4619      	mov	r1, r3
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	f04f 0400 	mov.w	r4, #0
 8003dfc:	0094      	lsls	r4, r2, #2
 8003dfe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e02:	008b      	lsls	r3, r1, #2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	f7fc ff44 	bl	8000c98 <__aeabi_uldivmod>
 8003e10:	4603      	mov	r3, r0
 8003e12:	460c      	mov	r4, r1
 8003e14:	461a      	mov	r2, r3
 8003e16:	4b77      	ldr	r3, [pc, #476]	; (8003ff4 <UART_SetConfig+0x6f4>)
 8003e18:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	2164      	movs	r1, #100	; 0x64
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	3332      	adds	r3, #50	; 0x32
 8003e2a:	4a72      	ldr	r2, [pc, #456]	; (8003ff4 <UART_SetConfig+0x6f4>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	f003 020f 	and.w	r2, r3, #15
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4442      	add	r2, r8
 8003e3c:	609a      	str	r2, [r3, #8]
 8003e3e:	e0d0      	b.n	8003fe2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7ff f8a4 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8003e44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	469a      	mov	sl, r3
 8003e4a:	f04f 0b00 	mov.w	fp, #0
 8003e4e:	46d0      	mov	r8, sl
 8003e50:	46d9      	mov	r9, fp
 8003e52:	eb18 0308 	adds.w	r3, r8, r8
 8003e56:	eb49 0409 	adc.w	r4, r9, r9
 8003e5a:	4698      	mov	r8, r3
 8003e5c:	46a1      	mov	r9, r4
 8003e5e:	eb18 080a 	adds.w	r8, r8, sl
 8003e62:	eb49 090b 	adc.w	r9, r9, fp
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e7a:	4688      	mov	r8, r1
 8003e7c:	4691      	mov	r9, r2
 8003e7e:	eb1a 0508 	adds.w	r5, sl, r8
 8003e82:	eb4b 0609 	adc.w	r6, fp, r9
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	f04f 0400 	mov.w	r4, #0
 8003e98:	0094      	lsls	r4, r2, #2
 8003e9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e9e:	008b      	lsls	r3, r1, #2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	f7fc fef6 	bl	8000c98 <__aeabi_uldivmod>
 8003eac:	4603      	mov	r3, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b50      	ldr	r3, [pc, #320]	; (8003ff4 <UART_SetConfig+0x6f4>)
 8003eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	469b      	mov	fp, r3
 8003ec2:	f04f 0c00 	mov.w	ip, #0
 8003ec6:	46d9      	mov	r9, fp
 8003ec8:	46e2      	mov	sl, ip
 8003eca:	eb19 0309 	adds.w	r3, r9, r9
 8003ece:	eb4a 040a 	adc.w	r4, sl, sl
 8003ed2:	4699      	mov	r9, r3
 8003ed4:	46a2      	mov	sl, r4
 8003ed6:	eb19 090b 	adds.w	r9, r9, fp
 8003eda:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ef2:	4689      	mov	r9, r1
 8003ef4:	4692      	mov	sl, r2
 8003ef6:	eb1b 0509 	adds.w	r5, fp, r9
 8003efa:	eb4c 060a 	adc.w	r6, ip, sl
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4619      	mov	r1, r3
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	f04f 0400 	mov.w	r4, #0
 8003f10:	0094      	lsls	r4, r2, #2
 8003f12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f16:	008b      	lsls	r3, r1, #2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	4631      	mov	r1, r6
 8003f20:	f7fc feba 	bl	8000c98 <__aeabi_uldivmod>
 8003f24:	4603      	mov	r3, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <UART_SetConfig+0x6f4>)
 8003f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	2164      	movs	r1, #100	; 0x64
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	3332      	adds	r3, #50	; 0x32
 8003f3e:	4a2d      	ldr	r2, [pc, #180]	; (8003ff4 <UART_SetConfig+0x6f4>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f4a:	4498      	add	r8, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	469b      	mov	fp, r3
 8003f50:	f04f 0c00 	mov.w	ip, #0
 8003f54:	46d9      	mov	r9, fp
 8003f56:	46e2      	mov	sl, ip
 8003f58:	eb19 0309 	adds.w	r3, r9, r9
 8003f5c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f60:	4699      	mov	r9, r3
 8003f62:	46a2      	mov	sl, r4
 8003f64:	eb19 090b 	adds.w	r9, r9, fp
 8003f68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f80:	4689      	mov	r9, r1
 8003f82:	4692      	mov	sl, r2
 8003f84:	eb1b 0509 	adds.w	r5, fp, r9
 8003f88:	eb4c 060a 	adc.w	r6, ip, sl
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4619      	mov	r1, r3
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	f04f 0400 	mov.w	r4, #0
 8003f9e:	0094      	lsls	r4, r2, #2
 8003fa0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fa4:	008b      	lsls	r3, r1, #2
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4623      	mov	r3, r4
 8003faa:	4628      	mov	r0, r5
 8003fac:	4631      	mov	r1, r6
 8003fae:	f7fc fe73 	bl	8000c98 <__aeabi_uldivmod>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <UART_SetConfig+0x6f4>)
 8003fba:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2164      	movs	r1, #100	; 0x64
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	3332      	adds	r3, #50	; 0x32
 8003fcc:	4a09      	ldr	r2, [pc, #36]	; (8003ff4 <UART_SetConfig+0x6f4>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	f003 020f 	and.w	r2, r3, #15
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4442      	add	r2, r8
 8003fde:	609a      	str	r2, [r3, #8]
}
 8003fe0:	e7ff      	b.n	8003fe2 <UART_SetConfig+0x6e2>
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fec:	40011000 	.word	0x40011000
 8003ff0:	40011400 	.word	0x40011400
 8003ff4:	51eb851f 	.word	0x51eb851f

08003ff8 <__errno>:
 8003ff8:	4b01      	ldr	r3, [pc, #4]	; (8004000 <__errno+0x8>)
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	2000000c 	.word	0x2000000c

08004004 <__libc_init_array>:
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	4e0d      	ldr	r6, [pc, #52]	; (800403c <__libc_init_array+0x38>)
 8004008:	4c0d      	ldr	r4, [pc, #52]	; (8004040 <__libc_init_array+0x3c>)
 800400a:	1ba4      	subs	r4, r4, r6
 800400c:	10a4      	asrs	r4, r4, #2
 800400e:	2500      	movs	r5, #0
 8004010:	42a5      	cmp	r5, r4
 8004012:	d109      	bne.n	8004028 <__libc_init_array+0x24>
 8004014:	4e0b      	ldr	r6, [pc, #44]	; (8004044 <__libc_init_array+0x40>)
 8004016:	4c0c      	ldr	r4, [pc, #48]	; (8004048 <__libc_init_array+0x44>)
 8004018:	f004 fa48 	bl	80084ac <_init>
 800401c:	1ba4      	subs	r4, r4, r6
 800401e:	10a4      	asrs	r4, r4, #2
 8004020:	2500      	movs	r5, #0
 8004022:	42a5      	cmp	r5, r4
 8004024:	d105      	bne.n	8004032 <__libc_init_array+0x2e>
 8004026:	bd70      	pop	{r4, r5, r6, pc}
 8004028:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800402c:	4798      	blx	r3
 800402e:	3501      	adds	r5, #1
 8004030:	e7ee      	b.n	8004010 <__libc_init_array+0xc>
 8004032:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004036:	4798      	blx	r3
 8004038:	3501      	adds	r5, #1
 800403a:	e7f2      	b.n	8004022 <__libc_init_array+0x1e>
 800403c:	080088e4 	.word	0x080088e4
 8004040:	080088e4 	.word	0x080088e4
 8004044:	080088e4 	.word	0x080088e4
 8004048:	080088e8 	.word	0x080088e8

0800404c <malloc>:
 800404c:	4b02      	ldr	r3, [pc, #8]	; (8004058 <malloc+0xc>)
 800404e:	4601      	mov	r1, r0
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	f000 b861 	b.w	8004118 <_malloc_r>
 8004056:	bf00      	nop
 8004058:	2000000c 	.word	0x2000000c

0800405c <free>:
 800405c:	4b02      	ldr	r3, [pc, #8]	; (8004068 <free+0xc>)
 800405e:	4601      	mov	r1, r0
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	f000 b80b 	b.w	800407c <_free_r>
 8004066:	bf00      	nop
 8004068:	2000000c 	.word	0x2000000c

0800406c <memset>:
 800406c:	4402      	add	r2, r0
 800406e:	4603      	mov	r3, r0
 8004070:	4293      	cmp	r3, r2
 8004072:	d100      	bne.n	8004076 <memset+0xa>
 8004074:	4770      	bx	lr
 8004076:	f803 1b01 	strb.w	r1, [r3], #1
 800407a:	e7f9      	b.n	8004070 <memset+0x4>

0800407c <_free_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4605      	mov	r5, r0
 8004080:	2900      	cmp	r1, #0
 8004082:	d045      	beq.n	8004110 <_free_r+0x94>
 8004084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004088:	1f0c      	subs	r4, r1, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	bfb8      	it	lt
 800408e:	18e4      	addlt	r4, r4, r3
 8004090:	f003 f84b 	bl	800712a <__malloc_lock>
 8004094:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <_free_r+0x98>)
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	4610      	mov	r0, r2
 800409a:	b933      	cbnz	r3, 80040aa <_free_r+0x2e>
 800409c:	6063      	str	r3, [r4, #4]
 800409e:	6014      	str	r4, [r2, #0]
 80040a0:	4628      	mov	r0, r5
 80040a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040a6:	f003 b841 	b.w	800712c <__malloc_unlock>
 80040aa:	42a3      	cmp	r3, r4
 80040ac:	d90c      	bls.n	80040c8 <_free_r+0x4c>
 80040ae:	6821      	ldr	r1, [r4, #0]
 80040b0:	1862      	adds	r2, r4, r1
 80040b2:	4293      	cmp	r3, r2
 80040b4:	bf04      	itt	eq
 80040b6:	681a      	ldreq	r2, [r3, #0]
 80040b8:	685b      	ldreq	r3, [r3, #4]
 80040ba:	6063      	str	r3, [r4, #4]
 80040bc:	bf04      	itt	eq
 80040be:	1852      	addeq	r2, r2, r1
 80040c0:	6022      	streq	r2, [r4, #0]
 80040c2:	6004      	str	r4, [r0, #0]
 80040c4:	e7ec      	b.n	80040a0 <_free_r+0x24>
 80040c6:	4613      	mov	r3, r2
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	b10a      	cbz	r2, 80040d0 <_free_r+0x54>
 80040cc:	42a2      	cmp	r2, r4
 80040ce:	d9fa      	bls.n	80040c6 <_free_r+0x4a>
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	1858      	adds	r0, r3, r1
 80040d4:	42a0      	cmp	r0, r4
 80040d6:	d10b      	bne.n	80040f0 <_free_r+0x74>
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	4401      	add	r1, r0
 80040dc:	1858      	adds	r0, r3, r1
 80040de:	4282      	cmp	r2, r0
 80040e0:	6019      	str	r1, [r3, #0]
 80040e2:	d1dd      	bne.n	80040a0 <_free_r+0x24>
 80040e4:	6810      	ldr	r0, [r2, #0]
 80040e6:	6852      	ldr	r2, [r2, #4]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	4401      	add	r1, r0
 80040ec:	6019      	str	r1, [r3, #0]
 80040ee:	e7d7      	b.n	80040a0 <_free_r+0x24>
 80040f0:	d902      	bls.n	80040f8 <_free_r+0x7c>
 80040f2:	230c      	movs	r3, #12
 80040f4:	602b      	str	r3, [r5, #0]
 80040f6:	e7d3      	b.n	80040a0 <_free_r+0x24>
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	1821      	adds	r1, r4, r0
 80040fc:	428a      	cmp	r2, r1
 80040fe:	bf04      	itt	eq
 8004100:	6811      	ldreq	r1, [r2, #0]
 8004102:	6852      	ldreq	r2, [r2, #4]
 8004104:	6062      	str	r2, [r4, #4]
 8004106:	bf04      	itt	eq
 8004108:	1809      	addeq	r1, r1, r0
 800410a:	6021      	streq	r1, [r4, #0]
 800410c:	605c      	str	r4, [r3, #4]
 800410e:	e7c7      	b.n	80040a0 <_free_r+0x24>
 8004110:	bd38      	pop	{r3, r4, r5, pc}
 8004112:	bf00      	nop
 8004114:	20000300 	.word	0x20000300

08004118 <_malloc_r>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	1ccd      	adds	r5, r1, #3
 800411c:	f025 0503 	bic.w	r5, r5, #3
 8004120:	3508      	adds	r5, #8
 8004122:	2d0c      	cmp	r5, #12
 8004124:	bf38      	it	cc
 8004126:	250c      	movcc	r5, #12
 8004128:	2d00      	cmp	r5, #0
 800412a:	4606      	mov	r6, r0
 800412c:	db01      	blt.n	8004132 <_malloc_r+0x1a>
 800412e:	42a9      	cmp	r1, r5
 8004130:	d903      	bls.n	800413a <_malloc_r+0x22>
 8004132:	230c      	movs	r3, #12
 8004134:	6033      	str	r3, [r6, #0]
 8004136:	2000      	movs	r0, #0
 8004138:	bd70      	pop	{r4, r5, r6, pc}
 800413a:	f002 fff6 	bl	800712a <__malloc_lock>
 800413e:	4a21      	ldr	r2, [pc, #132]	; (80041c4 <_malloc_r+0xac>)
 8004140:	6814      	ldr	r4, [r2, #0]
 8004142:	4621      	mov	r1, r4
 8004144:	b991      	cbnz	r1, 800416c <_malloc_r+0x54>
 8004146:	4c20      	ldr	r4, [pc, #128]	; (80041c8 <_malloc_r+0xb0>)
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	b91b      	cbnz	r3, 8004154 <_malloc_r+0x3c>
 800414c:	4630      	mov	r0, r6
 800414e:	f000 fe7b 	bl	8004e48 <_sbrk_r>
 8004152:	6020      	str	r0, [r4, #0]
 8004154:	4629      	mov	r1, r5
 8004156:	4630      	mov	r0, r6
 8004158:	f000 fe76 	bl	8004e48 <_sbrk_r>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d124      	bne.n	80041aa <_malloc_r+0x92>
 8004160:	230c      	movs	r3, #12
 8004162:	6033      	str	r3, [r6, #0]
 8004164:	4630      	mov	r0, r6
 8004166:	f002 ffe1 	bl	800712c <__malloc_unlock>
 800416a:	e7e4      	b.n	8004136 <_malloc_r+0x1e>
 800416c:	680b      	ldr	r3, [r1, #0]
 800416e:	1b5b      	subs	r3, r3, r5
 8004170:	d418      	bmi.n	80041a4 <_malloc_r+0x8c>
 8004172:	2b0b      	cmp	r3, #11
 8004174:	d90f      	bls.n	8004196 <_malloc_r+0x7e>
 8004176:	600b      	str	r3, [r1, #0]
 8004178:	50cd      	str	r5, [r1, r3]
 800417a:	18cc      	adds	r4, r1, r3
 800417c:	4630      	mov	r0, r6
 800417e:	f002 ffd5 	bl	800712c <__malloc_unlock>
 8004182:	f104 000b 	add.w	r0, r4, #11
 8004186:	1d23      	adds	r3, r4, #4
 8004188:	f020 0007 	bic.w	r0, r0, #7
 800418c:	1ac3      	subs	r3, r0, r3
 800418e:	d0d3      	beq.n	8004138 <_malloc_r+0x20>
 8004190:	425a      	negs	r2, r3
 8004192:	50e2      	str	r2, [r4, r3]
 8004194:	e7d0      	b.n	8004138 <_malloc_r+0x20>
 8004196:	428c      	cmp	r4, r1
 8004198:	684b      	ldr	r3, [r1, #4]
 800419a:	bf16      	itet	ne
 800419c:	6063      	strne	r3, [r4, #4]
 800419e:	6013      	streq	r3, [r2, #0]
 80041a0:	460c      	movne	r4, r1
 80041a2:	e7eb      	b.n	800417c <_malloc_r+0x64>
 80041a4:	460c      	mov	r4, r1
 80041a6:	6849      	ldr	r1, [r1, #4]
 80041a8:	e7cc      	b.n	8004144 <_malloc_r+0x2c>
 80041aa:	1cc4      	adds	r4, r0, #3
 80041ac:	f024 0403 	bic.w	r4, r4, #3
 80041b0:	42a0      	cmp	r0, r4
 80041b2:	d005      	beq.n	80041c0 <_malloc_r+0xa8>
 80041b4:	1a21      	subs	r1, r4, r0
 80041b6:	4630      	mov	r0, r6
 80041b8:	f000 fe46 	bl	8004e48 <_sbrk_r>
 80041bc:	3001      	adds	r0, #1
 80041be:	d0cf      	beq.n	8004160 <_malloc_r+0x48>
 80041c0:	6025      	str	r5, [r4, #0]
 80041c2:	e7db      	b.n	800417c <_malloc_r+0x64>
 80041c4:	20000300 	.word	0x20000300
 80041c8:	20000304 	.word	0x20000304

080041cc <__cvt>:
 80041cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041d0:	ec55 4b10 	vmov	r4, r5, d0
 80041d4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80041d6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80041da:	2d00      	cmp	r5, #0
 80041dc:	460e      	mov	r6, r1
 80041de:	4691      	mov	r9, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	bfb8      	it	lt
 80041e4:	4622      	movlt	r2, r4
 80041e6:	462b      	mov	r3, r5
 80041e8:	f027 0720 	bic.w	r7, r7, #32
 80041ec:	bfbb      	ittet	lt
 80041ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80041f2:	461d      	movlt	r5, r3
 80041f4:	2300      	movge	r3, #0
 80041f6:	232d      	movlt	r3, #45	; 0x2d
 80041f8:	bfb8      	it	lt
 80041fa:	4614      	movlt	r4, r2
 80041fc:	2f46      	cmp	r7, #70	; 0x46
 80041fe:	700b      	strb	r3, [r1, #0]
 8004200:	d004      	beq.n	800420c <__cvt+0x40>
 8004202:	2f45      	cmp	r7, #69	; 0x45
 8004204:	d100      	bne.n	8004208 <__cvt+0x3c>
 8004206:	3601      	adds	r6, #1
 8004208:	2102      	movs	r1, #2
 800420a:	e000      	b.n	800420e <__cvt+0x42>
 800420c:	2103      	movs	r1, #3
 800420e:	ab03      	add	r3, sp, #12
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	ab02      	add	r3, sp, #8
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	4632      	mov	r2, r6
 8004218:	4653      	mov	r3, sl
 800421a:	ec45 4b10 	vmov	d0, r4, r5
 800421e:	f001 fe67 	bl	8005ef0 <_dtoa_r>
 8004222:	2f47      	cmp	r7, #71	; 0x47
 8004224:	4680      	mov	r8, r0
 8004226:	d102      	bne.n	800422e <__cvt+0x62>
 8004228:	f019 0f01 	tst.w	r9, #1
 800422c:	d026      	beq.n	800427c <__cvt+0xb0>
 800422e:	2f46      	cmp	r7, #70	; 0x46
 8004230:	eb08 0906 	add.w	r9, r8, r6
 8004234:	d111      	bne.n	800425a <__cvt+0x8e>
 8004236:	f898 3000 	ldrb.w	r3, [r8]
 800423a:	2b30      	cmp	r3, #48	; 0x30
 800423c:	d10a      	bne.n	8004254 <__cvt+0x88>
 800423e:	2200      	movs	r2, #0
 8004240:	2300      	movs	r3, #0
 8004242:	4620      	mov	r0, r4
 8004244:	4629      	mov	r1, r5
 8004246:	f7fc fc47 	bl	8000ad8 <__aeabi_dcmpeq>
 800424a:	b918      	cbnz	r0, 8004254 <__cvt+0x88>
 800424c:	f1c6 0601 	rsb	r6, r6, #1
 8004250:	f8ca 6000 	str.w	r6, [sl]
 8004254:	f8da 3000 	ldr.w	r3, [sl]
 8004258:	4499      	add	r9, r3
 800425a:	2200      	movs	r2, #0
 800425c:	2300      	movs	r3, #0
 800425e:	4620      	mov	r0, r4
 8004260:	4629      	mov	r1, r5
 8004262:	f7fc fc39 	bl	8000ad8 <__aeabi_dcmpeq>
 8004266:	b938      	cbnz	r0, 8004278 <__cvt+0xac>
 8004268:	2230      	movs	r2, #48	; 0x30
 800426a:	9b03      	ldr	r3, [sp, #12]
 800426c:	454b      	cmp	r3, r9
 800426e:	d205      	bcs.n	800427c <__cvt+0xb0>
 8004270:	1c59      	adds	r1, r3, #1
 8004272:	9103      	str	r1, [sp, #12]
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e7f8      	b.n	800426a <__cvt+0x9e>
 8004278:	f8cd 900c 	str.w	r9, [sp, #12]
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004280:	eba3 0308 	sub.w	r3, r3, r8
 8004284:	4640      	mov	r0, r8
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	b004      	add	sp, #16
 800428a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800428e <__exponent>:
 800428e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004290:	2900      	cmp	r1, #0
 8004292:	4604      	mov	r4, r0
 8004294:	bfba      	itte	lt
 8004296:	4249      	neglt	r1, r1
 8004298:	232d      	movlt	r3, #45	; 0x2d
 800429a:	232b      	movge	r3, #43	; 0x2b
 800429c:	2909      	cmp	r1, #9
 800429e:	f804 2b02 	strb.w	r2, [r4], #2
 80042a2:	7043      	strb	r3, [r0, #1]
 80042a4:	dd20      	ble.n	80042e8 <__exponent+0x5a>
 80042a6:	f10d 0307 	add.w	r3, sp, #7
 80042aa:	461f      	mov	r7, r3
 80042ac:	260a      	movs	r6, #10
 80042ae:	fb91 f5f6 	sdiv	r5, r1, r6
 80042b2:	fb06 1115 	mls	r1, r6, r5, r1
 80042b6:	3130      	adds	r1, #48	; 0x30
 80042b8:	2d09      	cmp	r5, #9
 80042ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80042be:	f103 32ff 	add.w	r2, r3, #4294967295
 80042c2:	4629      	mov	r1, r5
 80042c4:	dc09      	bgt.n	80042da <__exponent+0x4c>
 80042c6:	3130      	adds	r1, #48	; 0x30
 80042c8:	3b02      	subs	r3, #2
 80042ca:	f802 1c01 	strb.w	r1, [r2, #-1]
 80042ce:	42bb      	cmp	r3, r7
 80042d0:	4622      	mov	r2, r4
 80042d2:	d304      	bcc.n	80042de <__exponent+0x50>
 80042d4:	1a10      	subs	r0, r2, r0
 80042d6:	b003      	add	sp, #12
 80042d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042da:	4613      	mov	r3, r2
 80042dc:	e7e7      	b.n	80042ae <__exponent+0x20>
 80042de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042e2:	f804 2b01 	strb.w	r2, [r4], #1
 80042e6:	e7f2      	b.n	80042ce <__exponent+0x40>
 80042e8:	2330      	movs	r3, #48	; 0x30
 80042ea:	4419      	add	r1, r3
 80042ec:	7083      	strb	r3, [r0, #2]
 80042ee:	1d02      	adds	r2, r0, #4
 80042f0:	70c1      	strb	r1, [r0, #3]
 80042f2:	e7ef      	b.n	80042d4 <__exponent+0x46>

080042f4 <_printf_float>:
 80042f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f8:	b08d      	sub	sp, #52	; 0x34
 80042fa:	460c      	mov	r4, r1
 80042fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004300:	4616      	mov	r6, r2
 8004302:	461f      	mov	r7, r3
 8004304:	4605      	mov	r5, r0
 8004306:	f002 fee5 	bl	80070d4 <_localeconv_r>
 800430a:	6803      	ldr	r3, [r0, #0]
 800430c:	9304      	str	r3, [sp, #16]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fb ff66 	bl	80001e0 <strlen>
 8004314:	2300      	movs	r3, #0
 8004316:	930a      	str	r3, [sp, #40]	; 0x28
 8004318:	f8d8 3000 	ldr.w	r3, [r8]
 800431c:	9005      	str	r0, [sp, #20]
 800431e:	3307      	adds	r3, #7
 8004320:	f023 0307 	bic.w	r3, r3, #7
 8004324:	f103 0208 	add.w	r2, r3, #8
 8004328:	f894 a018 	ldrb.w	sl, [r4, #24]
 800432c:	f8d4 b000 	ldr.w	fp, [r4]
 8004330:	f8c8 2000 	str.w	r2, [r8]
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800433c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004340:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004344:	9307      	str	r3, [sp, #28]
 8004346:	f8cd 8018 	str.w	r8, [sp, #24]
 800434a:	f04f 32ff 	mov.w	r2, #4294967295
 800434e:	4ba7      	ldr	r3, [pc, #668]	; (80045ec <_printf_float+0x2f8>)
 8004350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004354:	f7fc fbf2 	bl	8000b3c <__aeabi_dcmpun>
 8004358:	bb70      	cbnz	r0, 80043b8 <_printf_float+0xc4>
 800435a:	f04f 32ff 	mov.w	r2, #4294967295
 800435e:	4ba3      	ldr	r3, [pc, #652]	; (80045ec <_printf_float+0x2f8>)
 8004360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004364:	f7fc fbcc 	bl	8000b00 <__aeabi_dcmple>
 8004368:	bb30      	cbnz	r0, 80043b8 <_printf_float+0xc4>
 800436a:	2200      	movs	r2, #0
 800436c:	2300      	movs	r3, #0
 800436e:	4640      	mov	r0, r8
 8004370:	4649      	mov	r1, r9
 8004372:	f7fc fbbb 	bl	8000aec <__aeabi_dcmplt>
 8004376:	b110      	cbz	r0, 800437e <_printf_float+0x8a>
 8004378:	232d      	movs	r3, #45	; 0x2d
 800437a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800437e:	4a9c      	ldr	r2, [pc, #624]	; (80045f0 <_printf_float+0x2fc>)
 8004380:	4b9c      	ldr	r3, [pc, #624]	; (80045f4 <_printf_float+0x300>)
 8004382:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004386:	bf8c      	ite	hi
 8004388:	4690      	movhi	r8, r2
 800438a:	4698      	movls	r8, r3
 800438c:	2303      	movs	r3, #3
 800438e:	f02b 0204 	bic.w	r2, fp, #4
 8004392:	6123      	str	r3, [r4, #16]
 8004394:	6022      	str	r2, [r4, #0]
 8004396:	f04f 0900 	mov.w	r9, #0
 800439a:	9700      	str	r7, [sp, #0]
 800439c:	4633      	mov	r3, r6
 800439e:	aa0b      	add	r2, sp, #44	; 0x2c
 80043a0:	4621      	mov	r1, r4
 80043a2:	4628      	mov	r0, r5
 80043a4:	f000 f9e6 	bl	8004774 <_printf_common>
 80043a8:	3001      	adds	r0, #1
 80043aa:	f040 808d 	bne.w	80044c8 <_printf_float+0x1d4>
 80043ae:	f04f 30ff 	mov.w	r0, #4294967295
 80043b2:	b00d      	add	sp, #52	; 0x34
 80043b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b8:	4642      	mov	r2, r8
 80043ba:	464b      	mov	r3, r9
 80043bc:	4640      	mov	r0, r8
 80043be:	4649      	mov	r1, r9
 80043c0:	f7fc fbbc 	bl	8000b3c <__aeabi_dcmpun>
 80043c4:	b110      	cbz	r0, 80043cc <_printf_float+0xd8>
 80043c6:	4a8c      	ldr	r2, [pc, #560]	; (80045f8 <_printf_float+0x304>)
 80043c8:	4b8c      	ldr	r3, [pc, #560]	; (80045fc <_printf_float+0x308>)
 80043ca:	e7da      	b.n	8004382 <_printf_float+0x8e>
 80043cc:	6861      	ldr	r1, [r4, #4]
 80043ce:	1c4b      	adds	r3, r1, #1
 80043d0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80043d4:	a80a      	add	r0, sp, #40	; 0x28
 80043d6:	d13e      	bne.n	8004456 <_printf_float+0x162>
 80043d8:	2306      	movs	r3, #6
 80043da:	6063      	str	r3, [r4, #4]
 80043dc:	2300      	movs	r3, #0
 80043de:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80043e2:	ab09      	add	r3, sp, #36	; 0x24
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	ec49 8b10 	vmov	d0, r8, r9
 80043ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80043ee:	6022      	str	r2, [r4, #0]
 80043f0:	f8cd a004 	str.w	sl, [sp, #4]
 80043f4:	6861      	ldr	r1, [r4, #4]
 80043f6:	4628      	mov	r0, r5
 80043f8:	f7ff fee8 	bl	80041cc <__cvt>
 80043fc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004400:	2b47      	cmp	r3, #71	; 0x47
 8004402:	4680      	mov	r8, r0
 8004404:	d109      	bne.n	800441a <_printf_float+0x126>
 8004406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004408:	1cd8      	adds	r0, r3, #3
 800440a:	db02      	blt.n	8004412 <_printf_float+0x11e>
 800440c:	6862      	ldr	r2, [r4, #4]
 800440e:	4293      	cmp	r3, r2
 8004410:	dd47      	ble.n	80044a2 <_printf_float+0x1ae>
 8004412:	f1aa 0a02 	sub.w	sl, sl, #2
 8004416:	fa5f fa8a 	uxtb.w	sl, sl
 800441a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800441e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004420:	d824      	bhi.n	800446c <_printf_float+0x178>
 8004422:	3901      	subs	r1, #1
 8004424:	4652      	mov	r2, sl
 8004426:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800442a:	9109      	str	r1, [sp, #36]	; 0x24
 800442c:	f7ff ff2f 	bl	800428e <__exponent>
 8004430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004432:	1813      	adds	r3, r2, r0
 8004434:	2a01      	cmp	r2, #1
 8004436:	4681      	mov	r9, r0
 8004438:	6123      	str	r3, [r4, #16]
 800443a:	dc02      	bgt.n	8004442 <_printf_float+0x14e>
 800443c:	6822      	ldr	r2, [r4, #0]
 800443e:	07d1      	lsls	r1, r2, #31
 8004440:	d501      	bpl.n	8004446 <_printf_float+0x152>
 8004442:	3301      	adds	r3, #1
 8004444:	6123      	str	r3, [r4, #16]
 8004446:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0a5      	beq.n	800439a <_printf_float+0xa6>
 800444e:	232d      	movs	r3, #45	; 0x2d
 8004450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004454:	e7a1      	b.n	800439a <_printf_float+0xa6>
 8004456:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800445a:	f000 8177 	beq.w	800474c <_printf_float+0x458>
 800445e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004462:	d1bb      	bne.n	80043dc <_printf_float+0xe8>
 8004464:	2900      	cmp	r1, #0
 8004466:	d1b9      	bne.n	80043dc <_printf_float+0xe8>
 8004468:	2301      	movs	r3, #1
 800446a:	e7b6      	b.n	80043da <_printf_float+0xe6>
 800446c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004470:	d119      	bne.n	80044a6 <_printf_float+0x1b2>
 8004472:	2900      	cmp	r1, #0
 8004474:	6863      	ldr	r3, [r4, #4]
 8004476:	dd0c      	ble.n	8004492 <_printf_float+0x19e>
 8004478:	6121      	str	r1, [r4, #16]
 800447a:	b913      	cbnz	r3, 8004482 <_printf_float+0x18e>
 800447c:	6822      	ldr	r2, [r4, #0]
 800447e:	07d2      	lsls	r2, r2, #31
 8004480:	d502      	bpl.n	8004488 <_printf_float+0x194>
 8004482:	3301      	adds	r3, #1
 8004484:	440b      	add	r3, r1
 8004486:	6123      	str	r3, [r4, #16]
 8004488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800448a:	65a3      	str	r3, [r4, #88]	; 0x58
 800448c:	f04f 0900 	mov.w	r9, #0
 8004490:	e7d9      	b.n	8004446 <_printf_float+0x152>
 8004492:	b913      	cbnz	r3, 800449a <_printf_float+0x1a6>
 8004494:	6822      	ldr	r2, [r4, #0]
 8004496:	07d0      	lsls	r0, r2, #31
 8004498:	d501      	bpl.n	800449e <_printf_float+0x1aa>
 800449a:	3302      	adds	r3, #2
 800449c:	e7f3      	b.n	8004486 <_printf_float+0x192>
 800449e:	2301      	movs	r3, #1
 80044a0:	e7f1      	b.n	8004486 <_printf_float+0x192>
 80044a2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80044a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80044aa:	4293      	cmp	r3, r2
 80044ac:	db05      	blt.n	80044ba <_printf_float+0x1c6>
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	6123      	str	r3, [r4, #16]
 80044b2:	07d1      	lsls	r1, r2, #31
 80044b4:	d5e8      	bpl.n	8004488 <_printf_float+0x194>
 80044b6:	3301      	adds	r3, #1
 80044b8:	e7e5      	b.n	8004486 <_printf_float+0x192>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bfd4      	ite	le
 80044be:	f1c3 0302 	rsble	r3, r3, #2
 80044c2:	2301      	movgt	r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	e7de      	b.n	8004486 <_printf_float+0x192>
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	055a      	lsls	r2, r3, #21
 80044cc:	d407      	bmi.n	80044de <_printf_float+0x1ea>
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	4642      	mov	r2, r8
 80044d2:	4631      	mov	r1, r6
 80044d4:	4628      	mov	r0, r5
 80044d6:	47b8      	blx	r7
 80044d8:	3001      	adds	r0, #1
 80044da:	d12b      	bne.n	8004534 <_printf_float+0x240>
 80044dc:	e767      	b.n	80043ae <_printf_float+0xba>
 80044de:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80044e2:	f240 80dc 	bls.w	800469e <_printf_float+0x3aa>
 80044e6:	2200      	movs	r2, #0
 80044e8:	2300      	movs	r3, #0
 80044ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044ee:	f7fc faf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d033      	beq.n	800455e <_printf_float+0x26a>
 80044f6:	2301      	movs	r3, #1
 80044f8:	4a41      	ldr	r2, [pc, #260]	; (8004600 <_printf_float+0x30c>)
 80044fa:	4631      	mov	r1, r6
 80044fc:	4628      	mov	r0, r5
 80044fe:	47b8      	blx	r7
 8004500:	3001      	adds	r0, #1
 8004502:	f43f af54 	beq.w	80043ae <_printf_float+0xba>
 8004506:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800450a:	429a      	cmp	r2, r3
 800450c:	db02      	blt.n	8004514 <_printf_float+0x220>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	07d8      	lsls	r0, r3, #31
 8004512:	d50f      	bpl.n	8004534 <_printf_float+0x240>
 8004514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004518:	4631      	mov	r1, r6
 800451a:	4628      	mov	r0, r5
 800451c:	47b8      	blx	r7
 800451e:	3001      	adds	r0, #1
 8004520:	f43f af45 	beq.w	80043ae <_printf_float+0xba>
 8004524:	f04f 0800 	mov.w	r8, #0
 8004528:	f104 091a 	add.w	r9, r4, #26
 800452c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	4543      	cmp	r3, r8
 8004532:	dc09      	bgt.n	8004548 <_printf_float+0x254>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	079b      	lsls	r3, r3, #30
 8004538:	f100 8103 	bmi.w	8004742 <_printf_float+0x44e>
 800453c:	68e0      	ldr	r0, [r4, #12]
 800453e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004540:	4298      	cmp	r0, r3
 8004542:	bfb8      	it	lt
 8004544:	4618      	movlt	r0, r3
 8004546:	e734      	b.n	80043b2 <_printf_float+0xbe>
 8004548:	2301      	movs	r3, #1
 800454a:	464a      	mov	r2, r9
 800454c:	4631      	mov	r1, r6
 800454e:	4628      	mov	r0, r5
 8004550:	47b8      	blx	r7
 8004552:	3001      	adds	r0, #1
 8004554:	f43f af2b 	beq.w	80043ae <_printf_float+0xba>
 8004558:	f108 0801 	add.w	r8, r8, #1
 800455c:	e7e6      	b.n	800452c <_printf_float+0x238>
 800455e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	dc2b      	bgt.n	80045bc <_printf_float+0x2c8>
 8004564:	2301      	movs	r3, #1
 8004566:	4a26      	ldr	r2, [pc, #152]	; (8004600 <_printf_float+0x30c>)
 8004568:	4631      	mov	r1, r6
 800456a:	4628      	mov	r0, r5
 800456c:	47b8      	blx	r7
 800456e:	3001      	adds	r0, #1
 8004570:	f43f af1d 	beq.w	80043ae <_printf_float+0xba>
 8004574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004576:	b923      	cbnz	r3, 8004582 <_printf_float+0x28e>
 8004578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800457a:	b913      	cbnz	r3, 8004582 <_printf_float+0x28e>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	07d9      	lsls	r1, r3, #31
 8004580:	d5d8      	bpl.n	8004534 <_printf_float+0x240>
 8004582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004586:	4631      	mov	r1, r6
 8004588:	4628      	mov	r0, r5
 800458a:	47b8      	blx	r7
 800458c:	3001      	adds	r0, #1
 800458e:	f43f af0e 	beq.w	80043ae <_printf_float+0xba>
 8004592:	f04f 0900 	mov.w	r9, #0
 8004596:	f104 0a1a 	add.w	sl, r4, #26
 800459a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459c:	425b      	negs	r3, r3
 800459e:	454b      	cmp	r3, r9
 80045a0:	dc01      	bgt.n	80045a6 <_printf_float+0x2b2>
 80045a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a4:	e794      	b.n	80044d0 <_printf_float+0x1dc>
 80045a6:	2301      	movs	r3, #1
 80045a8:	4652      	mov	r2, sl
 80045aa:	4631      	mov	r1, r6
 80045ac:	4628      	mov	r0, r5
 80045ae:	47b8      	blx	r7
 80045b0:	3001      	adds	r0, #1
 80045b2:	f43f aefc 	beq.w	80043ae <_printf_float+0xba>
 80045b6:	f109 0901 	add.w	r9, r9, #1
 80045ba:	e7ee      	b.n	800459a <_printf_float+0x2a6>
 80045bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045c0:	429a      	cmp	r2, r3
 80045c2:	bfa8      	it	ge
 80045c4:	461a      	movge	r2, r3
 80045c6:	2a00      	cmp	r2, #0
 80045c8:	4691      	mov	r9, r2
 80045ca:	dd07      	ble.n	80045dc <_printf_float+0x2e8>
 80045cc:	4613      	mov	r3, r2
 80045ce:	4631      	mov	r1, r6
 80045d0:	4642      	mov	r2, r8
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	f43f aee9 	beq.w	80043ae <_printf_float+0xba>
 80045dc:	f104 031a 	add.w	r3, r4, #26
 80045e0:	f04f 0b00 	mov.w	fp, #0
 80045e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045e8:	9306      	str	r3, [sp, #24]
 80045ea:	e015      	b.n	8004618 <_printf_float+0x324>
 80045ec:	7fefffff 	.word	0x7fefffff
 80045f0:	080085b0 	.word	0x080085b0
 80045f4:	080085ac 	.word	0x080085ac
 80045f8:	080085b8 	.word	0x080085b8
 80045fc:	080085b4 	.word	0x080085b4
 8004600:	08008773 	.word	0x08008773
 8004604:	2301      	movs	r3, #1
 8004606:	9a06      	ldr	r2, [sp, #24]
 8004608:	4631      	mov	r1, r6
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	f43f aecd 	beq.w	80043ae <_printf_float+0xba>
 8004614:	f10b 0b01 	add.w	fp, fp, #1
 8004618:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800461c:	ebaa 0309 	sub.w	r3, sl, r9
 8004620:	455b      	cmp	r3, fp
 8004622:	dcef      	bgt.n	8004604 <_printf_float+0x310>
 8004624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004628:	429a      	cmp	r2, r3
 800462a:	44d0      	add	r8, sl
 800462c:	db15      	blt.n	800465a <_printf_float+0x366>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	07da      	lsls	r2, r3, #31
 8004632:	d412      	bmi.n	800465a <_printf_float+0x366>
 8004634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004636:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004638:	eba3 020a 	sub.w	r2, r3, sl
 800463c:	eba3 0a01 	sub.w	sl, r3, r1
 8004640:	4592      	cmp	sl, r2
 8004642:	bfa8      	it	ge
 8004644:	4692      	movge	sl, r2
 8004646:	f1ba 0f00 	cmp.w	sl, #0
 800464a:	dc0e      	bgt.n	800466a <_printf_float+0x376>
 800464c:	f04f 0800 	mov.w	r8, #0
 8004650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004654:	f104 091a 	add.w	r9, r4, #26
 8004658:	e019      	b.n	800468e <_printf_float+0x39a>
 800465a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800465e:	4631      	mov	r1, r6
 8004660:	4628      	mov	r0, r5
 8004662:	47b8      	blx	r7
 8004664:	3001      	adds	r0, #1
 8004666:	d1e5      	bne.n	8004634 <_printf_float+0x340>
 8004668:	e6a1      	b.n	80043ae <_printf_float+0xba>
 800466a:	4653      	mov	r3, sl
 800466c:	4642      	mov	r2, r8
 800466e:	4631      	mov	r1, r6
 8004670:	4628      	mov	r0, r5
 8004672:	47b8      	blx	r7
 8004674:	3001      	adds	r0, #1
 8004676:	d1e9      	bne.n	800464c <_printf_float+0x358>
 8004678:	e699      	b.n	80043ae <_printf_float+0xba>
 800467a:	2301      	movs	r3, #1
 800467c:	464a      	mov	r2, r9
 800467e:	4631      	mov	r1, r6
 8004680:	4628      	mov	r0, r5
 8004682:	47b8      	blx	r7
 8004684:	3001      	adds	r0, #1
 8004686:	f43f ae92 	beq.w	80043ae <_printf_float+0xba>
 800468a:	f108 0801 	add.w	r8, r8, #1
 800468e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	eba3 030a 	sub.w	r3, r3, sl
 8004698:	4543      	cmp	r3, r8
 800469a:	dcee      	bgt.n	800467a <_printf_float+0x386>
 800469c:	e74a      	b.n	8004534 <_printf_float+0x240>
 800469e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046a0:	2a01      	cmp	r2, #1
 80046a2:	dc01      	bgt.n	80046a8 <_printf_float+0x3b4>
 80046a4:	07db      	lsls	r3, r3, #31
 80046a6:	d53a      	bpl.n	800471e <_printf_float+0x42a>
 80046a8:	2301      	movs	r3, #1
 80046aa:	4642      	mov	r2, r8
 80046ac:	4631      	mov	r1, r6
 80046ae:	4628      	mov	r0, r5
 80046b0:	47b8      	blx	r7
 80046b2:	3001      	adds	r0, #1
 80046b4:	f43f ae7b 	beq.w	80043ae <_printf_float+0xba>
 80046b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046bc:	4631      	mov	r1, r6
 80046be:	4628      	mov	r0, r5
 80046c0:	47b8      	blx	r7
 80046c2:	3001      	adds	r0, #1
 80046c4:	f108 0801 	add.w	r8, r8, #1
 80046c8:	f43f ae71 	beq.w	80043ae <_printf_float+0xba>
 80046cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046ce:	2200      	movs	r2, #0
 80046d0:	f103 3aff 	add.w	sl, r3, #4294967295
 80046d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046d8:	2300      	movs	r3, #0
 80046da:	f7fc f9fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80046de:	b9c8      	cbnz	r0, 8004714 <_printf_float+0x420>
 80046e0:	4653      	mov	r3, sl
 80046e2:	4642      	mov	r2, r8
 80046e4:	4631      	mov	r1, r6
 80046e6:	4628      	mov	r0, r5
 80046e8:	47b8      	blx	r7
 80046ea:	3001      	adds	r0, #1
 80046ec:	d10e      	bne.n	800470c <_printf_float+0x418>
 80046ee:	e65e      	b.n	80043ae <_printf_float+0xba>
 80046f0:	2301      	movs	r3, #1
 80046f2:	4652      	mov	r2, sl
 80046f4:	4631      	mov	r1, r6
 80046f6:	4628      	mov	r0, r5
 80046f8:	47b8      	blx	r7
 80046fa:	3001      	adds	r0, #1
 80046fc:	f43f ae57 	beq.w	80043ae <_printf_float+0xba>
 8004700:	f108 0801 	add.w	r8, r8, #1
 8004704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004706:	3b01      	subs	r3, #1
 8004708:	4543      	cmp	r3, r8
 800470a:	dcf1      	bgt.n	80046f0 <_printf_float+0x3fc>
 800470c:	464b      	mov	r3, r9
 800470e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004712:	e6de      	b.n	80044d2 <_printf_float+0x1de>
 8004714:	f04f 0800 	mov.w	r8, #0
 8004718:	f104 0a1a 	add.w	sl, r4, #26
 800471c:	e7f2      	b.n	8004704 <_printf_float+0x410>
 800471e:	2301      	movs	r3, #1
 8004720:	e7df      	b.n	80046e2 <_printf_float+0x3ee>
 8004722:	2301      	movs	r3, #1
 8004724:	464a      	mov	r2, r9
 8004726:	4631      	mov	r1, r6
 8004728:	4628      	mov	r0, r5
 800472a:	47b8      	blx	r7
 800472c:	3001      	adds	r0, #1
 800472e:	f43f ae3e 	beq.w	80043ae <_printf_float+0xba>
 8004732:	f108 0801 	add.w	r8, r8, #1
 8004736:	68e3      	ldr	r3, [r4, #12]
 8004738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	4543      	cmp	r3, r8
 800473e:	dcf0      	bgt.n	8004722 <_printf_float+0x42e>
 8004740:	e6fc      	b.n	800453c <_printf_float+0x248>
 8004742:	f04f 0800 	mov.w	r8, #0
 8004746:	f104 0919 	add.w	r9, r4, #25
 800474a:	e7f4      	b.n	8004736 <_printf_float+0x442>
 800474c:	2900      	cmp	r1, #0
 800474e:	f43f ae8b 	beq.w	8004468 <_printf_float+0x174>
 8004752:	2300      	movs	r3, #0
 8004754:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004758:	ab09      	add	r3, sp, #36	; 0x24
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	ec49 8b10 	vmov	d0, r8, r9
 8004760:	6022      	str	r2, [r4, #0]
 8004762:	f8cd a004 	str.w	sl, [sp, #4]
 8004766:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800476a:	4628      	mov	r0, r5
 800476c:	f7ff fd2e 	bl	80041cc <__cvt>
 8004770:	4680      	mov	r8, r0
 8004772:	e648      	b.n	8004406 <_printf_float+0x112>

08004774 <_printf_common>:
 8004774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004778:	4691      	mov	r9, r2
 800477a:	461f      	mov	r7, r3
 800477c:	688a      	ldr	r2, [r1, #8]
 800477e:	690b      	ldr	r3, [r1, #16]
 8004780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004784:	4293      	cmp	r3, r2
 8004786:	bfb8      	it	lt
 8004788:	4613      	movlt	r3, r2
 800478a:	f8c9 3000 	str.w	r3, [r9]
 800478e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004792:	4606      	mov	r6, r0
 8004794:	460c      	mov	r4, r1
 8004796:	b112      	cbz	r2, 800479e <_printf_common+0x2a>
 8004798:	3301      	adds	r3, #1
 800479a:	f8c9 3000 	str.w	r3, [r9]
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	0699      	lsls	r1, r3, #26
 80047a2:	bf42      	ittt	mi
 80047a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047a8:	3302      	addmi	r3, #2
 80047aa:	f8c9 3000 	strmi.w	r3, [r9]
 80047ae:	6825      	ldr	r5, [r4, #0]
 80047b0:	f015 0506 	ands.w	r5, r5, #6
 80047b4:	d107      	bne.n	80047c6 <_printf_common+0x52>
 80047b6:	f104 0a19 	add.w	sl, r4, #25
 80047ba:	68e3      	ldr	r3, [r4, #12]
 80047bc:	f8d9 2000 	ldr.w	r2, [r9]
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	42ab      	cmp	r3, r5
 80047c4:	dc28      	bgt.n	8004818 <_printf_common+0xa4>
 80047c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	3300      	adds	r3, #0
 80047ce:	bf18      	it	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	0692      	lsls	r2, r2, #26
 80047d4:	d42d      	bmi.n	8004832 <_printf_common+0xbe>
 80047d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047da:	4639      	mov	r1, r7
 80047dc:	4630      	mov	r0, r6
 80047de:	47c0      	blx	r8
 80047e0:	3001      	adds	r0, #1
 80047e2:	d020      	beq.n	8004826 <_printf_common+0xb2>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	68e5      	ldr	r5, [r4, #12]
 80047e8:	f8d9 2000 	ldr.w	r2, [r9]
 80047ec:	f003 0306 	and.w	r3, r3, #6
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	bf08      	it	eq
 80047f4:	1aad      	subeq	r5, r5, r2
 80047f6:	68a3      	ldr	r3, [r4, #8]
 80047f8:	6922      	ldr	r2, [r4, #16]
 80047fa:	bf0c      	ite	eq
 80047fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004800:	2500      	movne	r5, #0
 8004802:	4293      	cmp	r3, r2
 8004804:	bfc4      	itt	gt
 8004806:	1a9b      	subgt	r3, r3, r2
 8004808:	18ed      	addgt	r5, r5, r3
 800480a:	f04f 0900 	mov.w	r9, #0
 800480e:	341a      	adds	r4, #26
 8004810:	454d      	cmp	r5, r9
 8004812:	d11a      	bne.n	800484a <_printf_common+0xd6>
 8004814:	2000      	movs	r0, #0
 8004816:	e008      	b.n	800482a <_printf_common+0xb6>
 8004818:	2301      	movs	r3, #1
 800481a:	4652      	mov	r2, sl
 800481c:	4639      	mov	r1, r7
 800481e:	4630      	mov	r0, r6
 8004820:	47c0      	blx	r8
 8004822:	3001      	adds	r0, #1
 8004824:	d103      	bne.n	800482e <_printf_common+0xba>
 8004826:	f04f 30ff 	mov.w	r0, #4294967295
 800482a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482e:	3501      	adds	r5, #1
 8004830:	e7c3      	b.n	80047ba <_printf_common+0x46>
 8004832:	18e1      	adds	r1, r4, r3
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	2030      	movs	r0, #48	; 0x30
 8004838:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800483c:	4422      	add	r2, r4
 800483e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004842:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004846:	3302      	adds	r3, #2
 8004848:	e7c5      	b.n	80047d6 <_printf_common+0x62>
 800484a:	2301      	movs	r3, #1
 800484c:	4622      	mov	r2, r4
 800484e:	4639      	mov	r1, r7
 8004850:	4630      	mov	r0, r6
 8004852:	47c0      	blx	r8
 8004854:	3001      	adds	r0, #1
 8004856:	d0e6      	beq.n	8004826 <_printf_common+0xb2>
 8004858:	f109 0901 	add.w	r9, r9, #1
 800485c:	e7d8      	b.n	8004810 <_printf_common+0x9c>
	...

08004860 <_printf_i>:
 8004860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004864:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004868:	460c      	mov	r4, r1
 800486a:	7e09      	ldrb	r1, [r1, #24]
 800486c:	b085      	sub	sp, #20
 800486e:	296e      	cmp	r1, #110	; 0x6e
 8004870:	4617      	mov	r7, r2
 8004872:	4606      	mov	r6, r0
 8004874:	4698      	mov	r8, r3
 8004876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004878:	f000 80b3 	beq.w	80049e2 <_printf_i+0x182>
 800487c:	d822      	bhi.n	80048c4 <_printf_i+0x64>
 800487e:	2963      	cmp	r1, #99	; 0x63
 8004880:	d036      	beq.n	80048f0 <_printf_i+0x90>
 8004882:	d80a      	bhi.n	800489a <_printf_i+0x3a>
 8004884:	2900      	cmp	r1, #0
 8004886:	f000 80b9 	beq.w	80049fc <_printf_i+0x19c>
 800488a:	2958      	cmp	r1, #88	; 0x58
 800488c:	f000 8083 	beq.w	8004996 <_printf_i+0x136>
 8004890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004894:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004898:	e032      	b.n	8004900 <_printf_i+0xa0>
 800489a:	2964      	cmp	r1, #100	; 0x64
 800489c:	d001      	beq.n	80048a2 <_printf_i+0x42>
 800489e:	2969      	cmp	r1, #105	; 0x69
 80048a0:	d1f6      	bne.n	8004890 <_printf_i+0x30>
 80048a2:	6820      	ldr	r0, [r4, #0]
 80048a4:	6813      	ldr	r3, [r2, #0]
 80048a6:	0605      	lsls	r5, r0, #24
 80048a8:	f103 0104 	add.w	r1, r3, #4
 80048ac:	d52a      	bpl.n	8004904 <_printf_i+0xa4>
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6011      	str	r1, [r2, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	da03      	bge.n	80048be <_printf_i+0x5e>
 80048b6:	222d      	movs	r2, #45	; 0x2d
 80048b8:	425b      	negs	r3, r3
 80048ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048be:	486f      	ldr	r0, [pc, #444]	; (8004a7c <_printf_i+0x21c>)
 80048c0:	220a      	movs	r2, #10
 80048c2:	e039      	b.n	8004938 <_printf_i+0xd8>
 80048c4:	2973      	cmp	r1, #115	; 0x73
 80048c6:	f000 809d 	beq.w	8004a04 <_printf_i+0x1a4>
 80048ca:	d808      	bhi.n	80048de <_printf_i+0x7e>
 80048cc:	296f      	cmp	r1, #111	; 0x6f
 80048ce:	d020      	beq.n	8004912 <_printf_i+0xb2>
 80048d0:	2970      	cmp	r1, #112	; 0x70
 80048d2:	d1dd      	bne.n	8004890 <_printf_i+0x30>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	f043 0320 	orr.w	r3, r3, #32
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	e003      	b.n	80048e6 <_printf_i+0x86>
 80048de:	2975      	cmp	r1, #117	; 0x75
 80048e0:	d017      	beq.n	8004912 <_printf_i+0xb2>
 80048e2:	2978      	cmp	r1, #120	; 0x78
 80048e4:	d1d4      	bne.n	8004890 <_printf_i+0x30>
 80048e6:	2378      	movs	r3, #120	; 0x78
 80048e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048ec:	4864      	ldr	r0, [pc, #400]	; (8004a80 <_printf_i+0x220>)
 80048ee:	e055      	b.n	800499c <_printf_i+0x13c>
 80048f0:	6813      	ldr	r3, [r2, #0]
 80048f2:	1d19      	adds	r1, r3, #4
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6011      	str	r1, [r2, #0]
 80048f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004900:	2301      	movs	r3, #1
 8004902:	e08c      	b.n	8004a1e <_printf_i+0x1be>
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6011      	str	r1, [r2, #0]
 8004908:	f010 0f40 	tst.w	r0, #64	; 0x40
 800490c:	bf18      	it	ne
 800490e:	b21b      	sxthne	r3, r3
 8004910:	e7cf      	b.n	80048b2 <_printf_i+0x52>
 8004912:	6813      	ldr	r3, [r2, #0]
 8004914:	6825      	ldr	r5, [r4, #0]
 8004916:	1d18      	adds	r0, r3, #4
 8004918:	6010      	str	r0, [r2, #0]
 800491a:	0628      	lsls	r0, r5, #24
 800491c:	d501      	bpl.n	8004922 <_printf_i+0xc2>
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	e002      	b.n	8004928 <_printf_i+0xc8>
 8004922:	0668      	lsls	r0, r5, #25
 8004924:	d5fb      	bpl.n	800491e <_printf_i+0xbe>
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	4854      	ldr	r0, [pc, #336]	; (8004a7c <_printf_i+0x21c>)
 800492a:	296f      	cmp	r1, #111	; 0x6f
 800492c:	bf14      	ite	ne
 800492e:	220a      	movne	r2, #10
 8004930:	2208      	moveq	r2, #8
 8004932:	2100      	movs	r1, #0
 8004934:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004938:	6865      	ldr	r5, [r4, #4]
 800493a:	60a5      	str	r5, [r4, #8]
 800493c:	2d00      	cmp	r5, #0
 800493e:	f2c0 8095 	blt.w	8004a6c <_printf_i+0x20c>
 8004942:	6821      	ldr	r1, [r4, #0]
 8004944:	f021 0104 	bic.w	r1, r1, #4
 8004948:	6021      	str	r1, [r4, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d13d      	bne.n	80049ca <_printf_i+0x16a>
 800494e:	2d00      	cmp	r5, #0
 8004950:	f040 808e 	bne.w	8004a70 <_printf_i+0x210>
 8004954:	4665      	mov	r5, ip
 8004956:	2a08      	cmp	r2, #8
 8004958:	d10b      	bne.n	8004972 <_printf_i+0x112>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	07db      	lsls	r3, r3, #31
 800495e:	d508      	bpl.n	8004972 <_printf_i+0x112>
 8004960:	6923      	ldr	r3, [r4, #16]
 8004962:	6862      	ldr	r2, [r4, #4]
 8004964:	429a      	cmp	r2, r3
 8004966:	bfde      	ittt	le
 8004968:	2330      	movle	r3, #48	; 0x30
 800496a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800496e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004972:	ebac 0305 	sub.w	r3, ip, r5
 8004976:	6123      	str	r3, [r4, #16]
 8004978:	f8cd 8000 	str.w	r8, [sp]
 800497c:	463b      	mov	r3, r7
 800497e:	aa03      	add	r2, sp, #12
 8004980:	4621      	mov	r1, r4
 8004982:	4630      	mov	r0, r6
 8004984:	f7ff fef6 	bl	8004774 <_printf_common>
 8004988:	3001      	adds	r0, #1
 800498a:	d14d      	bne.n	8004a28 <_printf_i+0x1c8>
 800498c:	f04f 30ff 	mov.w	r0, #4294967295
 8004990:	b005      	add	sp, #20
 8004992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004996:	4839      	ldr	r0, [pc, #228]	; (8004a7c <_printf_i+0x21c>)
 8004998:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800499c:	6813      	ldr	r3, [r2, #0]
 800499e:	6821      	ldr	r1, [r4, #0]
 80049a0:	1d1d      	adds	r5, r3, #4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6015      	str	r5, [r2, #0]
 80049a6:	060a      	lsls	r2, r1, #24
 80049a8:	d50b      	bpl.n	80049c2 <_printf_i+0x162>
 80049aa:	07ca      	lsls	r2, r1, #31
 80049ac:	bf44      	itt	mi
 80049ae:	f041 0120 	orrmi.w	r1, r1, #32
 80049b2:	6021      	strmi	r1, [r4, #0]
 80049b4:	b91b      	cbnz	r3, 80049be <_printf_i+0x15e>
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	f022 0220 	bic.w	r2, r2, #32
 80049bc:	6022      	str	r2, [r4, #0]
 80049be:	2210      	movs	r2, #16
 80049c0:	e7b7      	b.n	8004932 <_printf_i+0xd2>
 80049c2:	064d      	lsls	r5, r1, #25
 80049c4:	bf48      	it	mi
 80049c6:	b29b      	uxthmi	r3, r3
 80049c8:	e7ef      	b.n	80049aa <_printf_i+0x14a>
 80049ca:	4665      	mov	r5, ip
 80049cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80049d0:	fb02 3311 	mls	r3, r2, r1, r3
 80049d4:	5cc3      	ldrb	r3, [r0, r3]
 80049d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80049da:	460b      	mov	r3, r1
 80049dc:	2900      	cmp	r1, #0
 80049de:	d1f5      	bne.n	80049cc <_printf_i+0x16c>
 80049e0:	e7b9      	b.n	8004956 <_printf_i+0xf6>
 80049e2:	6813      	ldr	r3, [r2, #0]
 80049e4:	6825      	ldr	r5, [r4, #0]
 80049e6:	6961      	ldr	r1, [r4, #20]
 80049e8:	1d18      	adds	r0, r3, #4
 80049ea:	6010      	str	r0, [r2, #0]
 80049ec:	0628      	lsls	r0, r5, #24
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	d501      	bpl.n	80049f6 <_printf_i+0x196>
 80049f2:	6019      	str	r1, [r3, #0]
 80049f4:	e002      	b.n	80049fc <_printf_i+0x19c>
 80049f6:	066a      	lsls	r2, r5, #25
 80049f8:	d5fb      	bpl.n	80049f2 <_printf_i+0x192>
 80049fa:	8019      	strh	r1, [r3, #0]
 80049fc:	2300      	movs	r3, #0
 80049fe:	6123      	str	r3, [r4, #16]
 8004a00:	4665      	mov	r5, ip
 8004a02:	e7b9      	b.n	8004978 <_printf_i+0x118>
 8004a04:	6813      	ldr	r3, [r2, #0]
 8004a06:	1d19      	adds	r1, r3, #4
 8004a08:	6011      	str	r1, [r2, #0]
 8004a0a:	681d      	ldr	r5, [r3, #0]
 8004a0c:	6862      	ldr	r2, [r4, #4]
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4628      	mov	r0, r5
 8004a12:	f7fb fbed 	bl	80001f0 <memchr>
 8004a16:	b108      	cbz	r0, 8004a1c <_printf_i+0x1bc>
 8004a18:	1b40      	subs	r0, r0, r5
 8004a1a:	6060      	str	r0, [r4, #4]
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	6123      	str	r3, [r4, #16]
 8004a20:	2300      	movs	r3, #0
 8004a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a26:	e7a7      	b.n	8004978 <_printf_i+0x118>
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	462a      	mov	r2, r5
 8004a2c:	4639      	mov	r1, r7
 8004a2e:	4630      	mov	r0, r6
 8004a30:	47c0      	blx	r8
 8004a32:	3001      	adds	r0, #1
 8004a34:	d0aa      	beq.n	800498c <_printf_i+0x12c>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	079b      	lsls	r3, r3, #30
 8004a3a:	d413      	bmi.n	8004a64 <_printf_i+0x204>
 8004a3c:	68e0      	ldr	r0, [r4, #12]
 8004a3e:	9b03      	ldr	r3, [sp, #12]
 8004a40:	4298      	cmp	r0, r3
 8004a42:	bfb8      	it	lt
 8004a44:	4618      	movlt	r0, r3
 8004a46:	e7a3      	b.n	8004990 <_printf_i+0x130>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	464a      	mov	r2, r9
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	4630      	mov	r0, r6
 8004a50:	47c0      	blx	r8
 8004a52:	3001      	adds	r0, #1
 8004a54:	d09a      	beq.n	800498c <_printf_i+0x12c>
 8004a56:	3501      	adds	r5, #1
 8004a58:	68e3      	ldr	r3, [r4, #12]
 8004a5a:	9a03      	ldr	r2, [sp, #12]
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	42ab      	cmp	r3, r5
 8004a60:	dcf2      	bgt.n	8004a48 <_printf_i+0x1e8>
 8004a62:	e7eb      	b.n	8004a3c <_printf_i+0x1dc>
 8004a64:	2500      	movs	r5, #0
 8004a66:	f104 0919 	add.w	r9, r4, #25
 8004a6a:	e7f5      	b.n	8004a58 <_printf_i+0x1f8>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1ac      	bne.n	80049ca <_printf_i+0x16a>
 8004a70:	7803      	ldrb	r3, [r0, #0]
 8004a72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a7a:	e76c      	b.n	8004956 <_printf_i+0xf6>
 8004a7c:	080085bc 	.word	0x080085bc
 8004a80:	080085cd 	.word	0x080085cd

08004a84 <_scanf_float>:
 8004a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a88:	469a      	mov	sl, r3
 8004a8a:	688b      	ldr	r3, [r1, #8]
 8004a8c:	4616      	mov	r6, r2
 8004a8e:	1e5a      	subs	r2, r3, #1
 8004a90:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004a94:	b087      	sub	sp, #28
 8004a96:	bf83      	ittte	hi
 8004a98:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004a9c:	189b      	addhi	r3, r3, r2
 8004a9e:	9301      	strhi	r3, [sp, #4]
 8004aa0:	2300      	movls	r3, #0
 8004aa2:	bf86      	itte	hi
 8004aa4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004aa8:	608b      	strhi	r3, [r1, #8]
 8004aaa:	9301      	strls	r3, [sp, #4]
 8004aac:	680b      	ldr	r3, [r1, #0]
 8004aae:	4688      	mov	r8, r1
 8004ab0:	f04f 0b00 	mov.w	fp, #0
 8004ab4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004ab8:	f848 3b1c 	str.w	r3, [r8], #28
 8004abc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004ac0:	4607      	mov	r7, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	4645      	mov	r5, r8
 8004ac6:	465a      	mov	r2, fp
 8004ac8:	46d9      	mov	r9, fp
 8004aca:	f8cd b008 	str.w	fp, [sp, #8]
 8004ace:	68a1      	ldr	r1, [r4, #8]
 8004ad0:	b181      	cbz	r1, 8004af4 <_scanf_float+0x70>
 8004ad2:	6833      	ldr	r3, [r6, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b49      	cmp	r3, #73	; 0x49
 8004ad8:	d071      	beq.n	8004bbe <_scanf_float+0x13a>
 8004ada:	d84d      	bhi.n	8004b78 <_scanf_float+0xf4>
 8004adc:	2b39      	cmp	r3, #57	; 0x39
 8004ade:	d840      	bhi.n	8004b62 <_scanf_float+0xde>
 8004ae0:	2b31      	cmp	r3, #49	; 0x31
 8004ae2:	f080 8088 	bcs.w	8004bf6 <_scanf_float+0x172>
 8004ae6:	2b2d      	cmp	r3, #45	; 0x2d
 8004ae8:	f000 8090 	beq.w	8004c0c <_scanf_float+0x188>
 8004aec:	d815      	bhi.n	8004b1a <_scanf_float+0x96>
 8004aee:	2b2b      	cmp	r3, #43	; 0x2b
 8004af0:	f000 808c 	beq.w	8004c0c <_scanf_float+0x188>
 8004af4:	f1b9 0f00 	cmp.w	r9, #0
 8004af8:	d003      	beq.n	8004b02 <_scanf_float+0x7e>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	3a01      	subs	r2, #1
 8004b04:	2a01      	cmp	r2, #1
 8004b06:	f200 80ea 	bhi.w	8004cde <_scanf_float+0x25a>
 8004b0a:	4545      	cmp	r5, r8
 8004b0c:	f200 80dc 	bhi.w	8004cc8 <_scanf_float+0x244>
 8004b10:	2601      	movs	r6, #1
 8004b12:	4630      	mov	r0, r6
 8004b14:	b007      	add	sp, #28
 8004b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b1c:	f000 809f 	beq.w	8004c5e <_scanf_float+0x1da>
 8004b20:	2b30      	cmp	r3, #48	; 0x30
 8004b22:	d1e7      	bne.n	8004af4 <_scanf_float+0x70>
 8004b24:	6820      	ldr	r0, [r4, #0]
 8004b26:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004b2a:	d064      	beq.n	8004bf6 <_scanf_float+0x172>
 8004b2c:	9b01      	ldr	r3, [sp, #4]
 8004b2e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004b32:	6020      	str	r0, [r4, #0]
 8004b34:	f109 0901 	add.w	r9, r9, #1
 8004b38:	b11b      	cbz	r3, 8004b42 <_scanf_float+0xbe>
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	3101      	adds	r1, #1
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	60a1      	str	r1, [r4, #8]
 8004b42:	68a3      	ldr	r3, [r4, #8]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	60a3      	str	r3, [r4, #8]
 8004b48:	6923      	ldr	r3, [r4, #16]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	6123      	str	r3, [r4, #16]
 8004b4e:	6873      	ldr	r3, [r6, #4]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	6073      	str	r3, [r6, #4]
 8004b56:	f340 80ac 	ble.w	8004cb2 <_scanf_float+0x22e>
 8004b5a:	6833      	ldr	r3, [r6, #0]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	6033      	str	r3, [r6, #0]
 8004b60:	e7b5      	b.n	8004ace <_scanf_float+0x4a>
 8004b62:	2b45      	cmp	r3, #69	; 0x45
 8004b64:	f000 8085 	beq.w	8004c72 <_scanf_float+0x1ee>
 8004b68:	2b46      	cmp	r3, #70	; 0x46
 8004b6a:	d06a      	beq.n	8004c42 <_scanf_float+0x1be>
 8004b6c:	2b41      	cmp	r3, #65	; 0x41
 8004b6e:	d1c1      	bne.n	8004af4 <_scanf_float+0x70>
 8004b70:	2a01      	cmp	r2, #1
 8004b72:	d1bf      	bne.n	8004af4 <_scanf_float+0x70>
 8004b74:	2202      	movs	r2, #2
 8004b76:	e046      	b.n	8004c06 <_scanf_float+0x182>
 8004b78:	2b65      	cmp	r3, #101	; 0x65
 8004b7a:	d07a      	beq.n	8004c72 <_scanf_float+0x1ee>
 8004b7c:	d818      	bhi.n	8004bb0 <_scanf_float+0x12c>
 8004b7e:	2b54      	cmp	r3, #84	; 0x54
 8004b80:	d066      	beq.n	8004c50 <_scanf_float+0x1cc>
 8004b82:	d811      	bhi.n	8004ba8 <_scanf_float+0x124>
 8004b84:	2b4e      	cmp	r3, #78	; 0x4e
 8004b86:	d1b5      	bne.n	8004af4 <_scanf_float+0x70>
 8004b88:	2a00      	cmp	r2, #0
 8004b8a:	d146      	bne.n	8004c1a <_scanf_float+0x196>
 8004b8c:	f1b9 0f00 	cmp.w	r9, #0
 8004b90:	d145      	bne.n	8004c1e <_scanf_float+0x19a>
 8004b92:	6821      	ldr	r1, [r4, #0]
 8004b94:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004b98:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004b9c:	d13f      	bne.n	8004c1e <_scanf_float+0x19a>
 8004b9e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004ba2:	6021      	str	r1, [r4, #0]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	e02e      	b.n	8004c06 <_scanf_float+0x182>
 8004ba8:	2b59      	cmp	r3, #89	; 0x59
 8004baa:	d01e      	beq.n	8004bea <_scanf_float+0x166>
 8004bac:	2b61      	cmp	r3, #97	; 0x61
 8004bae:	e7de      	b.n	8004b6e <_scanf_float+0xea>
 8004bb0:	2b6e      	cmp	r3, #110	; 0x6e
 8004bb2:	d0e9      	beq.n	8004b88 <_scanf_float+0x104>
 8004bb4:	d815      	bhi.n	8004be2 <_scanf_float+0x15e>
 8004bb6:	2b66      	cmp	r3, #102	; 0x66
 8004bb8:	d043      	beq.n	8004c42 <_scanf_float+0x1be>
 8004bba:	2b69      	cmp	r3, #105	; 0x69
 8004bbc:	d19a      	bne.n	8004af4 <_scanf_float+0x70>
 8004bbe:	f1bb 0f00 	cmp.w	fp, #0
 8004bc2:	d138      	bne.n	8004c36 <_scanf_float+0x1b2>
 8004bc4:	f1b9 0f00 	cmp.w	r9, #0
 8004bc8:	d197      	bne.n	8004afa <_scanf_float+0x76>
 8004bca:	6821      	ldr	r1, [r4, #0]
 8004bcc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004bd0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004bd4:	d195      	bne.n	8004b02 <_scanf_float+0x7e>
 8004bd6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004bda:	6021      	str	r1, [r4, #0]
 8004bdc:	f04f 0b01 	mov.w	fp, #1
 8004be0:	e011      	b.n	8004c06 <_scanf_float+0x182>
 8004be2:	2b74      	cmp	r3, #116	; 0x74
 8004be4:	d034      	beq.n	8004c50 <_scanf_float+0x1cc>
 8004be6:	2b79      	cmp	r3, #121	; 0x79
 8004be8:	d184      	bne.n	8004af4 <_scanf_float+0x70>
 8004bea:	f1bb 0f07 	cmp.w	fp, #7
 8004bee:	d181      	bne.n	8004af4 <_scanf_float+0x70>
 8004bf0:	f04f 0b08 	mov.w	fp, #8
 8004bf4:	e007      	b.n	8004c06 <_scanf_float+0x182>
 8004bf6:	eb12 0f0b 	cmn.w	r2, fp
 8004bfa:	f47f af7b 	bne.w	8004af4 <_scanf_float+0x70>
 8004bfe:	6821      	ldr	r1, [r4, #0]
 8004c00:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004c04:	6021      	str	r1, [r4, #0]
 8004c06:	702b      	strb	r3, [r5, #0]
 8004c08:	3501      	adds	r5, #1
 8004c0a:	e79a      	b.n	8004b42 <_scanf_float+0xbe>
 8004c0c:	6821      	ldr	r1, [r4, #0]
 8004c0e:	0608      	lsls	r0, r1, #24
 8004c10:	f57f af70 	bpl.w	8004af4 <_scanf_float+0x70>
 8004c14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004c18:	e7f4      	b.n	8004c04 <_scanf_float+0x180>
 8004c1a:	2a02      	cmp	r2, #2
 8004c1c:	d047      	beq.n	8004cae <_scanf_float+0x22a>
 8004c1e:	f1bb 0f01 	cmp.w	fp, #1
 8004c22:	d003      	beq.n	8004c2c <_scanf_float+0x1a8>
 8004c24:	f1bb 0f04 	cmp.w	fp, #4
 8004c28:	f47f af64 	bne.w	8004af4 <_scanf_float+0x70>
 8004c2c:	f10b 0b01 	add.w	fp, fp, #1
 8004c30:	fa5f fb8b 	uxtb.w	fp, fp
 8004c34:	e7e7      	b.n	8004c06 <_scanf_float+0x182>
 8004c36:	f1bb 0f03 	cmp.w	fp, #3
 8004c3a:	d0f7      	beq.n	8004c2c <_scanf_float+0x1a8>
 8004c3c:	f1bb 0f05 	cmp.w	fp, #5
 8004c40:	e7f2      	b.n	8004c28 <_scanf_float+0x1a4>
 8004c42:	f1bb 0f02 	cmp.w	fp, #2
 8004c46:	f47f af55 	bne.w	8004af4 <_scanf_float+0x70>
 8004c4a:	f04f 0b03 	mov.w	fp, #3
 8004c4e:	e7da      	b.n	8004c06 <_scanf_float+0x182>
 8004c50:	f1bb 0f06 	cmp.w	fp, #6
 8004c54:	f47f af4e 	bne.w	8004af4 <_scanf_float+0x70>
 8004c58:	f04f 0b07 	mov.w	fp, #7
 8004c5c:	e7d3      	b.n	8004c06 <_scanf_float+0x182>
 8004c5e:	6821      	ldr	r1, [r4, #0]
 8004c60:	0588      	lsls	r0, r1, #22
 8004c62:	f57f af47 	bpl.w	8004af4 <_scanf_float+0x70>
 8004c66:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004c6a:	6021      	str	r1, [r4, #0]
 8004c6c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004c70:	e7c9      	b.n	8004c06 <_scanf_float+0x182>
 8004c72:	6821      	ldr	r1, [r4, #0]
 8004c74:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004c78:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004c7c:	d006      	beq.n	8004c8c <_scanf_float+0x208>
 8004c7e:	0548      	lsls	r0, r1, #21
 8004c80:	f57f af38 	bpl.w	8004af4 <_scanf_float+0x70>
 8004c84:	f1b9 0f00 	cmp.w	r9, #0
 8004c88:	f43f af3b 	beq.w	8004b02 <_scanf_float+0x7e>
 8004c8c:	0588      	lsls	r0, r1, #22
 8004c8e:	bf58      	it	pl
 8004c90:	9802      	ldrpl	r0, [sp, #8]
 8004c92:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004c96:	bf58      	it	pl
 8004c98:	eba9 0000 	subpl.w	r0, r9, r0
 8004c9c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004ca0:	bf58      	it	pl
 8004ca2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004ca6:	6021      	str	r1, [r4, #0]
 8004ca8:	f04f 0900 	mov.w	r9, #0
 8004cac:	e7ab      	b.n	8004c06 <_scanf_float+0x182>
 8004cae:	2203      	movs	r2, #3
 8004cb0:	e7a9      	b.n	8004c06 <_scanf_float+0x182>
 8004cb2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004cb6:	9205      	str	r2, [sp, #20]
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4638      	mov	r0, r7
 8004cbc:	4798      	blx	r3
 8004cbe:	9a05      	ldr	r2, [sp, #20]
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f43f af04 	beq.w	8004ace <_scanf_float+0x4a>
 8004cc6:	e715      	b.n	8004af4 <_scanf_float+0x70>
 8004cc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ccc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004cd0:	4632      	mov	r2, r6
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	4798      	blx	r3
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	e715      	b.n	8004b0a <_scanf_float+0x86>
 8004cde:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004ce2:	2b06      	cmp	r3, #6
 8004ce4:	d80a      	bhi.n	8004cfc <_scanf_float+0x278>
 8004ce6:	f1bb 0f02 	cmp.w	fp, #2
 8004cea:	d968      	bls.n	8004dbe <_scanf_float+0x33a>
 8004cec:	f1ab 0b03 	sub.w	fp, fp, #3
 8004cf0:	fa5f fb8b 	uxtb.w	fp, fp
 8004cf4:	eba5 0b0b 	sub.w	fp, r5, fp
 8004cf8:	455d      	cmp	r5, fp
 8004cfa:	d14b      	bne.n	8004d94 <_scanf_float+0x310>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	05da      	lsls	r2, r3, #23
 8004d00:	d51f      	bpl.n	8004d42 <_scanf_float+0x2be>
 8004d02:	055b      	lsls	r3, r3, #21
 8004d04:	d468      	bmi.n	8004dd8 <_scanf_float+0x354>
 8004d06:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004d0a:	6923      	ldr	r3, [r4, #16]
 8004d0c:	2965      	cmp	r1, #101	; 0x65
 8004d0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d12:	f105 3bff 	add.w	fp, r5, #4294967295
 8004d16:	6123      	str	r3, [r4, #16]
 8004d18:	d00d      	beq.n	8004d36 <_scanf_float+0x2b2>
 8004d1a:	2945      	cmp	r1, #69	; 0x45
 8004d1c:	d00b      	beq.n	8004d36 <_scanf_float+0x2b2>
 8004d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d22:	4632      	mov	r2, r6
 8004d24:	4638      	mov	r0, r7
 8004d26:	4798      	blx	r3
 8004d28:	6923      	ldr	r3, [r4, #16]
 8004d2a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	f1a5 0b02 	sub.w	fp, r5, #2
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d3a:	4632      	mov	r2, r6
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	4798      	blx	r3
 8004d40:	465d      	mov	r5, fp
 8004d42:	6826      	ldr	r6, [r4, #0]
 8004d44:	f016 0610 	ands.w	r6, r6, #16
 8004d48:	d17a      	bne.n	8004e40 <_scanf_float+0x3bc>
 8004d4a:	702e      	strb	r6, [r5, #0]
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d56:	d142      	bne.n	8004dde <_scanf_float+0x35a>
 8004d58:	9b02      	ldr	r3, [sp, #8]
 8004d5a:	eba9 0303 	sub.w	r3, r9, r3
 8004d5e:	425a      	negs	r2, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d149      	bne.n	8004df8 <_scanf_float+0x374>
 8004d64:	2200      	movs	r2, #0
 8004d66:	4641      	mov	r1, r8
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f000 ff31 	bl	8005bd0 <_strtod_r>
 8004d6e:	6825      	ldr	r5, [r4, #0]
 8004d70:	f8da 3000 	ldr.w	r3, [sl]
 8004d74:	f015 0f02 	tst.w	r5, #2
 8004d78:	f103 0204 	add.w	r2, r3, #4
 8004d7c:	ec59 8b10 	vmov	r8, r9, d0
 8004d80:	f8ca 2000 	str.w	r2, [sl]
 8004d84:	d043      	beq.n	8004e0e <_scanf_float+0x38a>
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	e9c3 8900 	strd	r8, r9, [r3]
 8004d8c:	68e3      	ldr	r3, [r4, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60e3      	str	r3, [r4, #12]
 8004d92:	e6be      	b.n	8004b12 <_scanf_float+0x8e>
 8004d94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004d9c:	4632      	mov	r2, r6
 8004d9e:	4638      	mov	r0, r7
 8004da0:	4798      	blx	r3
 8004da2:	6923      	ldr	r3, [r4, #16]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	6123      	str	r3, [r4, #16]
 8004da8:	e7a6      	b.n	8004cf8 <_scanf_float+0x274>
 8004daa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004dae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004db2:	4632      	mov	r2, r6
 8004db4:	4638      	mov	r0, r7
 8004db6:	4798      	blx	r3
 8004db8:	6923      	ldr	r3, [r4, #16]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	6123      	str	r3, [r4, #16]
 8004dbe:	4545      	cmp	r5, r8
 8004dc0:	d8f3      	bhi.n	8004daa <_scanf_float+0x326>
 8004dc2:	e6a5      	b.n	8004b10 <_scanf_float+0x8c>
 8004dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004dc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004dcc:	4632      	mov	r2, r6
 8004dce:	4638      	mov	r0, r7
 8004dd0:	4798      	blx	r3
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	6123      	str	r3, [r4, #16]
 8004dd8:	4545      	cmp	r5, r8
 8004dda:	d8f3      	bhi.n	8004dc4 <_scanf_float+0x340>
 8004ddc:	e698      	b.n	8004b10 <_scanf_float+0x8c>
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0bf      	beq.n	8004d64 <_scanf_float+0x2e0>
 8004de4:	9904      	ldr	r1, [sp, #16]
 8004de6:	230a      	movs	r3, #10
 8004de8:	4632      	mov	r2, r6
 8004dea:	3101      	adds	r1, #1
 8004dec:	4638      	mov	r0, r7
 8004dee:	f000 ffa5 	bl	8005d3c <_strtol_r>
 8004df2:	9b03      	ldr	r3, [sp, #12]
 8004df4:	9d04      	ldr	r5, [sp, #16]
 8004df6:	1ac2      	subs	r2, r0, r3
 8004df8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004dfc:	429d      	cmp	r5, r3
 8004dfe:	bf28      	it	cs
 8004e00:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004e04:	490f      	ldr	r1, [pc, #60]	; (8004e44 <_scanf_float+0x3c0>)
 8004e06:	4628      	mov	r0, r5
 8004e08:	f000 f834 	bl	8004e74 <siprintf>
 8004e0c:	e7aa      	b.n	8004d64 <_scanf_float+0x2e0>
 8004e0e:	f015 0504 	ands.w	r5, r5, #4
 8004e12:	d1b8      	bne.n	8004d86 <_scanf_float+0x302>
 8004e14:	681f      	ldr	r7, [r3, #0]
 8004e16:	ee10 2a10 	vmov	r2, s0
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	ee10 0a10 	vmov	r0, s0
 8004e20:	4649      	mov	r1, r9
 8004e22:	f7fb fe8b 	bl	8000b3c <__aeabi_dcmpun>
 8004e26:	b128      	cbz	r0, 8004e34 <_scanf_float+0x3b0>
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f000 f81d 	bl	8004e68 <nanf>
 8004e2e:	ed87 0a00 	vstr	s0, [r7]
 8004e32:	e7ab      	b.n	8004d8c <_scanf_float+0x308>
 8004e34:	4640      	mov	r0, r8
 8004e36:	4649      	mov	r1, r9
 8004e38:	f7fb fede 	bl	8000bf8 <__aeabi_d2f>
 8004e3c:	6038      	str	r0, [r7, #0]
 8004e3e:	e7a5      	b.n	8004d8c <_scanf_float+0x308>
 8004e40:	2600      	movs	r6, #0
 8004e42:	e666      	b.n	8004b12 <_scanf_float+0x8e>
 8004e44:	080085de 	.word	0x080085de

08004e48 <_sbrk_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4c06      	ldr	r4, [pc, #24]	; (8004e64 <_sbrk_r+0x1c>)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4605      	mov	r5, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	f7fc fd54 	bl	8001900 <_sbrk>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_sbrk_r+0x1a>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_sbrk_r+0x1a>
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	200003ec 	.word	0x200003ec

08004e68 <nanf>:
 8004e68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004e70 <nanf+0x8>
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	7fc00000 	.word	0x7fc00000

08004e74 <siprintf>:
 8004e74:	b40e      	push	{r1, r2, r3}
 8004e76:	b500      	push	{lr}
 8004e78:	b09c      	sub	sp, #112	; 0x70
 8004e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e7c:	9002      	str	r0, [sp, #8]
 8004e7e:	9006      	str	r0, [sp, #24]
 8004e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e84:	4809      	ldr	r0, [pc, #36]	; (8004eac <siprintf+0x38>)
 8004e86:	9107      	str	r1, [sp, #28]
 8004e88:	9104      	str	r1, [sp, #16]
 8004e8a:	4909      	ldr	r1, [pc, #36]	; (8004eb0 <siprintf+0x3c>)
 8004e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e90:	9105      	str	r1, [sp, #20]
 8004e92:	6800      	ldr	r0, [r0, #0]
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	a902      	add	r1, sp, #8
 8004e98:	f002 fdb0 	bl	80079fc <_svfiprintf_r>
 8004e9c:	9b02      	ldr	r3, [sp, #8]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	b01c      	add	sp, #112	; 0x70
 8004ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ea8:	b003      	add	sp, #12
 8004eaa:	4770      	bx	lr
 8004eac:	2000000c 	.word	0x2000000c
 8004eb0:	ffff0208 	.word	0xffff0208

08004eb4 <siscanf>:
 8004eb4:	b40e      	push	{r1, r2, r3}
 8004eb6:	b530      	push	{r4, r5, lr}
 8004eb8:	b09c      	sub	sp, #112	; 0x70
 8004eba:	ac1f      	add	r4, sp, #124	; 0x7c
 8004ebc:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004ec0:	f854 5b04 	ldr.w	r5, [r4], #4
 8004ec4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004ec8:	9002      	str	r0, [sp, #8]
 8004eca:	9006      	str	r0, [sp, #24]
 8004ecc:	f7fb f988 	bl	80001e0 <strlen>
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <siscanf+0x4c>)
 8004ed2:	9003      	str	r0, [sp, #12]
 8004ed4:	9007      	str	r0, [sp, #28]
 8004ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ed8:	480a      	ldr	r0, [pc, #40]	; (8004f04 <siscanf+0x50>)
 8004eda:	9401      	str	r4, [sp, #4]
 8004edc:	2300      	movs	r3, #0
 8004ede:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ee0:	9314      	str	r3, [sp, #80]	; 0x50
 8004ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ee6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004eea:	462a      	mov	r2, r5
 8004eec:	4623      	mov	r3, r4
 8004eee:	a902      	add	r1, sp, #8
 8004ef0:	6800      	ldr	r0, [r0, #0]
 8004ef2:	f002 fed5 	bl	8007ca0 <__ssvfiscanf_r>
 8004ef6:	b01c      	add	sp, #112	; 0x70
 8004ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004efc:	b003      	add	sp, #12
 8004efe:	4770      	bx	lr
 8004f00:	08004f09 	.word	0x08004f09
 8004f04:	2000000c 	.word	0x2000000c

08004f08 <__seofread>:
 8004f08:	2000      	movs	r0, #0
 8004f0a:	4770      	bx	lr

08004f0c <strchr>:
 8004f0c:	b2c9      	uxtb	r1, r1
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f14:	b11a      	cbz	r2, 8004f1e <strchr+0x12>
 8004f16:	428a      	cmp	r2, r1
 8004f18:	d1f9      	bne.n	8004f0e <strchr+0x2>
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	4770      	bx	lr
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	bf18      	it	ne
 8004f22:	2300      	movne	r3, #0
 8004f24:	e7f9      	b.n	8004f1a <strchr+0xe>

08004f26 <strcpy>:
 8004f26:	4603      	mov	r3, r0
 8004f28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f2c:	f803 2b01 	strb.w	r2, [r3], #1
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	d1f9      	bne.n	8004f28 <strcpy+0x2>
 8004f34:	4770      	bx	lr
	...

08004f38 <strdup>:
 8004f38:	4b02      	ldr	r3, [pc, #8]	; (8004f44 <strdup+0xc>)
 8004f3a:	4601      	mov	r1, r0
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	f000 b803 	b.w	8004f48 <_strdup_r>
 8004f42:	bf00      	nop
 8004f44:	2000000c 	.word	0x2000000c

08004f48 <_strdup_r>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	460c      	mov	r4, r1
 8004f50:	f7fb f946 	bl	80001e0 <strlen>
 8004f54:	1c45      	adds	r5, r0, #1
 8004f56:	4629      	mov	r1, r5
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f7ff f8dd 	bl	8004118 <_malloc_r>
 8004f5e:	4606      	mov	r6, r0
 8004f60:	b118      	cbz	r0, 8004f6a <_strdup_r+0x22>
 8004f62:	462a      	mov	r2, r5
 8004f64:	4621      	mov	r1, r4
 8004f66:	f002 f8d5 	bl	8007114 <memcpy>
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	bd70      	pop	{r4, r5, r6, pc}

08004f6e <strsep>:
 8004f6e:	4602      	mov	r2, r0
 8004f70:	2300      	movs	r3, #0
 8004f72:	6800      	ldr	r0, [r0, #0]
 8004f74:	f000 be3c 	b.w	8005bf0 <__strtok_r>

08004f78 <strstr>:
 8004f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7a:	7803      	ldrb	r3, [r0, #0]
 8004f7c:	b17b      	cbz	r3, 8004f9e <strstr+0x26>
 8004f7e:	4604      	mov	r4, r0
 8004f80:	7823      	ldrb	r3, [r4, #0]
 8004f82:	4620      	mov	r0, r4
 8004f84:	1c66      	adds	r6, r4, #1
 8004f86:	b17b      	cbz	r3, 8004fa8 <strstr+0x30>
 8004f88:	1e4a      	subs	r2, r1, #1
 8004f8a:	1e63      	subs	r3, r4, #1
 8004f8c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004f90:	b14d      	cbz	r5, 8004fa6 <strstr+0x2e>
 8004f92:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004f96:	42af      	cmp	r7, r5
 8004f98:	4634      	mov	r4, r6
 8004f9a:	d0f7      	beq.n	8004f8c <strstr+0x14>
 8004f9c:	e7f0      	b.n	8004f80 <strstr+0x8>
 8004f9e:	780b      	ldrb	r3, [r1, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf18      	it	ne
 8004fa4:	2000      	movne	r0, #0
 8004fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	e7fc      	b.n	8004fa6 <strstr+0x2e>

08004fac <sulp>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	4604      	mov	r4, r0
 8004fb0:	460d      	mov	r5, r1
 8004fb2:	ec45 4b10 	vmov	d0, r4, r5
 8004fb6:	4616      	mov	r6, r2
 8004fb8:	f002 fb84 	bl	80076c4 <__ulp>
 8004fbc:	ec51 0b10 	vmov	r0, r1, d0
 8004fc0:	b17e      	cbz	r6, 8004fe2 <sulp+0x36>
 8004fc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004fc6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	dd09      	ble.n	8004fe2 <sulp+0x36>
 8004fce:	051b      	lsls	r3, r3, #20
 8004fd0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004fd4:	2400      	movs	r4, #0
 8004fd6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004fda:	4622      	mov	r2, r4
 8004fdc:	462b      	mov	r3, r5
 8004fde:	f7fb fb13 	bl	8000608 <__aeabi_dmul>
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
 8004fe4:	0000      	movs	r0, r0
	...

08004fe8 <_strtod_l>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	461f      	mov	r7, r3
 8004fee:	b0a1      	sub	sp, #132	; 0x84
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4681      	mov	r9, r0
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	460e      	mov	r6, r1
 8004ff8:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ffa:	931c      	str	r3, [sp, #112]	; 0x70
 8004ffc:	f002 f868 	bl	80070d0 <__localeconv_l>
 8005000:	4680      	mov	r8, r0
 8005002:	6800      	ldr	r0, [r0, #0]
 8005004:	f7fb f8ec 	bl	80001e0 <strlen>
 8005008:	f04f 0a00 	mov.w	sl, #0
 800500c:	4604      	mov	r4, r0
 800500e:	f04f 0b00 	mov.w	fp, #0
 8005012:	961b      	str	r6, [sp, #108]	; 0x6c
 8005014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	2a0d      	cmp	r2, #13
 800501a:	d832      	bhi.n	8005082 <_strtod_l+0x9a>
 800501c:	2a09      	cmp	r2, #9
 800501e:	d236      	bcs.n	800508e <_strtod_l+0xa6>
 8005020:	2a00      	cmp	r2, #0
 8005022:	d03e      	beq.n	80050a2 <_strtod_l+0xba>
 8005024:	2300      	movs	r3, #0
 8005026:	930d      	str	r3, [sp, #52]	; 0x34
 8005028:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800502a:	782b      	ldrb	r3, [r5, #0]
 800502c:	2b30      	cmp	r3, #48	; 0x30
 800502e:	f040 80ac 	bne.w	800518a <_strtod_l+0x1a2>
 8005032:	786b      	ldrb	r3, [r5, #1]
 8005034:	2b58      	cmp	r3, #88	; 0x58
 8005036:	d001      	beq.n	800503c <_strtod_l+0x54>
 8005038:	2b78      	cmp	r3, #120	; 0x78
 800503a:	d167      	bne.n	800510c <_strtod_l+0x124>
 800503c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	ab1c      	add	r3, sp, #112	; 0x70
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	9702      	str	r7, [sp, #8]
 8005046:	ab1d      	add	r3, sp, #116	; 0x74
 8005048:	4a88      	ldr	r2, [pc, #544]	; (800526c <_strtod_l+0x284>)
 800504a:	a91b      	add	r1, sp, #108	; 0x6c
 800504c:	4648      	mov	r0, r9
 800504e:	f001 fd56 	bl	8006afe <__gethex>
 8005052:	f010 0407 	ands.w	r4, r0, #7
 8005056:	4606      	mov	r6, r0
 8005058:	d005      	beq.n	8005066 <_strtod_l+0x7e>
 800505a:	2c06      	cmp	r4, #6
 800505c:	d12b      	bne.n	80050b6 <_strtod_l+0xce>
 800505e:	3501      	adds	r5, #1
 8005060:	2300      	movs	r3, #0
 8005062:	951b      	str	r5, [sp, #108]	; 0x6c
 8005064:	930d      	str	r3, [sp, #52]	; 0x34
 8005066:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005068:	2b00      	cmp	r3, #0
 800506a:	f040 859a 	bne.w	8005ba2 <_strtod_l+0xbba>
 800506e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005070:	b1e3      	cbz	r3, 80050ac <_strtod_l+0xc4>
 8005072:	4652      	mov	r2, sl
 8005074:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005078:	ec43 2b10 	vmov	d0, r2, r3
 800507c:	b021      	add	sp, #132	; 0x84
 800507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005082:	2a2b      	cmp	r2, #43	; 0x2b
 8005084:	d015      	beq.n	80050b2 <_strtod_l+0xca>
 8005086:	2a2d      	cmp	r2, #45	; 0x2d
 8005088:	d004      	beq.n	8005094 <_strtod_l+0xac>
 800508a:	2a20      	cmp	r2, #32
 800508c:	d1ca      	bne.n	8005024 <_strtod_l+0x3c>
 800508e:	3301      	adds	r3, #1
 8005090:	931b      	str	r3, [sp, #108]	; 0x6c
 8005092:	e7bf      	b.n	8005014 <_strtod_l+0x2c>
 8005094:	2201      	movs	r2, #1
 8005096:	920d      	str	r2, [sp, #52]	; 0x34
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	921b      	str	r2, [sp, #108]	; 0x6c
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1c2      	bne.n	8005028 <_strtod_l+0x40>
 80050a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050a4:	961b      	str	r6, [sp, #108]	; 0x6c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f040 8579 	bne.w	8005b9e <_strtod_l+0xbb6>
 80050ac:	4652      	mov	r2, sl
 80050ae:	465b      	mov	r3, fp
 80050b0:	e7e2      	b.n	8005078 <_strtod_l+0x90>
 80050b2:	2200      	movs	r2, #0
 80050b4:	e7ef      	b.n	8005096 <_strtod_l+0xae>
 80050b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80050b8:	b13a      	cbz	r2, 80050ca <_strtod_l+0xe2>
 80050ba:	2135      	movs	r1, #53	; 0x35
 80050bc:	a81e      	add	r0, sp, #120	; 0x78
 80050be:	f002 fbf9 	bl	80078b4 <__copybits>
 80050c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050c4:	4648      	mov	r0, r9
 80050c6:	f002 f866 	bl	8007196 <_Bfree>
 80050ca:	3c01      	subs	r4, #1
 80050cc:	2c04      	cmp	r4, #4
 80050ce:	d806      	bhi.n	80050de <_strtod_l+0xf6>
 80050d0:	e8df f004 	tbb	[pc, r4]
 80050d4:	1714030a 	.word	0x1714030a
 80050d8:	0a          	.byte	0x0a
 80050d9:	00          	.byte	0x00
 80050da:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80050de:	0730      	lsls	r0, r6, #28
 80050e0:	d5c1      	bpl.n	8005066 <_strtod_l+0x7e>
 80050e2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80050e6:	e7be      	b.n	8005066 <_strtod_l+0x7e>
 80050e8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80050ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80050ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80050f2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80050f6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80050fa:	e7f0      	b.n	80050de <_strtod_l+0xf6>
 80050fc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005270 <_strtod_l+0x288>
 8005100:	e7ed      	b.n	80050de <_strtod_l+0xf6>
 8005102:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005106:	f04f 3aff 	mov.w	sl, #4294967295
 800510a:	e7e8      	b.n	80050de <_strtod_l+0xf6>
 800510c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	921b      	str	r2, [sp, #108]	; 0x6c
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	2b30      	cmp	r3, #48	; 0x30
 8005116:	d0f9      	beq.n	800510c <_strtod_l+0x124>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0a4      	beq.n	8005066 <_strtod_l+0x7e>
 800511c:	2301      	movs	r3, #1
 800511e:	2500      	movs	r5, #0
 8005120:	9306      	str	r3, [sp, #24]
 8005122:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005124:	9308      	str	r3, [sp, #32]
 8005126:	9507      	str	r5, [sp, #28]
 8005128:	9505      	str	r5, [sp, #20]
 800512a:	220a      	movs	r2, #10
 800512c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800512e:	7807      	ldrb	r7, [r0, #0]
 8005130:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005134:	b2d9      	uxtb	r1, r3
 8005136:	2909      	cmp	r1, #9
 8005138:	d929      	bls.n	800518e <_strtod_l+0x1a6>
 800513a:	4622      	mov	r2, r4
 800513c:	f8d8 1000 	ldr.w	r1, [r8]
 8005140:	f003 f888 	bl	8008254 <strncmp>
 8005144:	2800      	cmp	r0, #0
 8005146:	d031      	beq.n	80051ac <_strtod_l+0x1c4>
 8005148:	2000      	movs	r0, #0
 800514a:	9c05      	ldr	r4, [sp, #20]
 800514c:	9004      	str	r0, [sp, #16]
 800514e:	463b      	mov	r3, r7
 8005150:	4602      	mov	r2, r0
 8005152:	2b65      	cmp	r3, #101	; 0x65
 8005154:	d001      	beq.n	800515a <_strtod_l+0x172>
 8005156:	2b45      	cmp	r3, #69	; 0x45
 8005158:	d114      	bne.n	8005184 <_strtod_l+0x19c>
 800515a:	b924      	cbnz	r4, 8005166 <_strtod_l+0x17e>
 800515c:	b910      	cbnz	r0, 8005164 <_strtod_l+0x17c>
 800515e:	9b06      	ldr	r3, [sp, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d09e      	beq.n	80050a2 <_strtod_l+0xba>
 8005164:	2400      	movs	r4, #0
 8005166:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005168:	1c73      	adds	r3, r6, #1
 800516a:	931b      	str	r3, [sp, #108]	; 0x6c
 800516c:	7873      	ldrb	r3, [r6, #1]
 800516e:	2b2b      	cmp	r3, #43	; 0x2b
 8005170:	d078      	beq.n	8005264 <_strtod_l+0x27c>
 8005172:	2b2d      	cmp	r3, #45	; 0x2d
 8005174:	d070      	beq.n	8005258 <_strtod_l+0x270>
 8005176:	f04f 0c00 	mov.w	ip, #0
 800517a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800517e:	2f09      	cmp	r7, #9
 8005180:	d97c      	bls.n	800527c <_strtod_l+0x294>
 8005182:	961b      	str	r6, [sp, #108]	; 0x6c
 8005184:	f04f 0e00 	mov.w	lr, #0
 8005188:	e09a      	b.n	80052c0 <_strtod_l+0x2d8>
 800518a:	2300      	movs	r3, #0
 800518c:	e7c7      	b.n	800511e <_strtod_l+0x136>
 800518e:	9905      	ldr	r1, [sp, #20]
 8005190:	2908      	cmp	r1, #8
 8005192:	bfdd      	ittte	le
 8005194:	9907      	ldrle	r1, [sp, #28]
 8005196:	fb02 3301 	mlale	r3, r2, r1, r3
 800519a:	9307      	strle	r3, [sp, #28]
 800519c:	fb02 3505 	mlagt	r5, r2, r5, r3
 80051a0:	9b05      	ldr	r3, [sp, #20]
 80051a2:	3001      	adds	r0, #1
 80051a4:	3301      	adds	r3, #1
 80051a6:	9305      	str	r3, [sp, #20]
 80051a8:	901b      	str	r0, [sp, #108]	; 0x6c
 80051aa:	e7bf      	b.n	800512c <_strtod_l+0x144>
 80051ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051ae:	191a      	adds	r2, r3, r4
 80051b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80051b2:	9a05      	ldr	r2, [sp, #20]
 80051b4:	5d1b      	ldrb	r3, [r3, r4]
 80051b6:	2a00      	cmp	r2, #0
 80051b8:	d037      	beq.n	800522a <_strtod_l+0x242>
 80051ba:	9c05      	ldr	r4, [sp, #20]
 80051bc:	4602      	mov	r2, r0
 80051be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80051c2:	2909      	cmp	r1, #9
 80051c4:	d913      	bls.n	80051ee <_strtod_l+0x206>
 80051c6:	2101      	movs	r1, #1
 80051c8:	9104      	str	r1, [sp, #16]
 80051ca:	e7c2      	b.n	8005152 <_strtod_l+0x16a>
 80051cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	3001      	adds	r0, #1
 80051d6:	2b30      	cmp	r3, #48	; 0x30
 80051d8:	d0f8      	beq.n	80051cc <_strtod_l+0x1e4>
 80051da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80051de:	2a08      	cmp	r2, #8
 80051e0:	f200 84e4 	bhi.w	8005bac <_strtod_l+0xbc4>
 80051e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80051e6:	9208      	str	r2, [sp, #32]
 80051e8:	4602      	mov	r2, r0
 80051ea:	2000      	movs	r0, #0
 80051ec:	4604      	mov	r4, r0
 80051ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80051f2:	f100 0101 	add.w	r1, r0, #1
 80051f6:	d012      	beq.n	800521e <_strtod_l+0x236>
 80051f8:	440a      	add	r2, r1
 80051fa:	eb00 0c04 	add.w	ip, r0, r4
 80051fe:	4621      	mov	r1, r4
 8005200:	270a      	movs	r7, #10
 8005202:	458c      	cmp	ip, r1
 8005204:	d113      	bne.n	800522e <_strtod_l+0x246>
 8005206:	1821      	adds	r1, r4, r0
 8005208:	2908      	cmp	r1, #8
 800520a:	f104 0401 	add.w	r4, r4, #1
 800520e:	4404      	add	r4, r0
 8005210:	dc19      	bgt.n	8005246 <_strtod_l+0x25e>
 8005212:	9b07      	ldr	r3, [sp, #28]
 8005214:	210a      	movs	r1, #10
 8005216:	fb01 e303 	mla	r3, r1, r3, lr
 800521a:	9307      	str	r3, [sp, #28]
 800521c:	2100      	movs	r1, #0
 800521e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005220:	1c58      	adds	r0, r3, #1
 8005222:	901b      	str	r0, [sp, #108]	; 0x6c
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	4608      	mov	r0, r1
 8005228:	e7c9      	b.n	80051be <_strtod_l+0x1d6>
 800522a:	9805      	ldr	r0, [sp, #20]
 800522c:	e7d3      	b.n	80051d6 <_strtod_l+0x1ee>
 800522e:	2908      	cmp	r1, #8
 8005230:	f101 0101 	add.w	r1, r1, #1
 8005234:	dc03      	bgt.n	800523e <_strtod_l+0x256>
 8005236:	9b07      	ldr	r3, [sp, #28]
 8005238:	437b      	muls	r3, r7
 800523a:	9307      	str	r3, [sp, #28]
 800523c:	e7e1      	b.n	8005202 <_strtod_l+0x21a>
 800523e:	2910      	cmp	r1, #16
 8005240:	bfd8      	it	le
 8005242:	437d      	mulle	r5, r7
 8005244:	e7dd      	b.n	8005202 <_strtod_l+0x21a>
 8005246:	2c10      	cmp	r4, #16
 8005248:	bfdc      	itt	le
 800524a:	210a      	movle	r1, #10
 800524c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005250:	e7e4      	b.n	800521c <_strtod_l+0x234>
 8005252:	2301      	movs	r3, #1
 8005254:	9304      	str	r3, [sp, #16]
 8005256:	e781      	b.n	800515c <_strtod_l+0x174>
 8005258:	f04f 0c01 	mov.w	ip, #1
 800525c:	1cb3      	adds	r3, r6, #2
 800525e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005260:	78b3      	ldrb	r3, [r6, #2]
 8005262:	e78a      	b.n	800517a <_strtod_l+0x192>
 8005264:	f04f 0c00 	mov.w	ip, #0
 8005268:	e7f8      	b.n	800525c <_strtod_l+0x274>
 800526a:	bf00      	nop
 800526c:	080085e4 	.word	0x080085e4
 8005270:	7ff00000 	.word	0x7ff00000
 8005274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005276:	1c5f      	adds	r7, r3, #1
 8005278:	971b      	str	r7, [sp, #108]	; 0x6c
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	2b30      	cmp	r3, #48	; 0x30
 800527e:	d0f9      	beq.n	8005274 <_strtod_l+0x28c>
 8005280:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005284:	2f08      	cmp	r7, #8
 8005286:	f63f af7d 	bhi.w	8005184 <_strtod_l+0x19c>
 800528a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800528e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005290:	930a      	str	r3, [sp, #40]	; 0x28
 8005292:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005294:	1c5f      	adds	r7, r3, #1
 8005296:	971b      	str	r7, [sp, #108]	; 0x6c
 8005298:	785b      	ldrb	r3, [r3, #1]
 800529a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800529e:	f1b8 0f09 	cmp.w	r8, #9
 80052a2:	d937      	bls.n	8005314 <_strtod_l+0x32c>
 80052a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052a6:	1a7f      	subs	r7, r7, r1
 80052a8:	2f08      	cmp	r7, #8
 80052aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80052ae:	dc37      	bgt.n	8005320 <_strtod_l+0x338>
 80052b0:	45be      	cmp	lr, r7
 80052b2:	bfa8      	it	ge
 80052b4:	46be      	movge	lr, r7
 80052b6:	f1bc 0f00 	cmp.w	ip, #0
 80052ba:	d001      	beq.n	80052c0 <_strtod_l+0x2d8>
 80052bc:	f1ce 0e00 	rsb	lr, lr, #0
 80052c0:	2c00      	cmp	r4, #0
 80052c2:	d151      	bne.n	8005368 <_strtod_l+0x380>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	f47f aece 	bne.w	8005066 <_strtod_l+0x7e>
 80052ca:	9a06      	ldr	r2, [sp, #24]
 80052cc:	2a00      	cmp	r2, #0
 80052ce:	f47f aeca 	bne.w	8005066 <_strtod_l+0x7e>
 80052d2:	9a04      	ldr	r2, [sp, #16]
 80052d4:	2a00      	cmp	r2, #0
 80052d6:	f47f aee4 	bne.w	80050a2 <_strtod_l+0xba>
 80052da:	2b4e      	cmp	r3, #78	; 0x4e
 80052dc:	d027      	beq.n	800532e <_strtod_l+0x346>
 80052de:	dc21      	bgt.n	8005324 <_strtod_l+0x33c>
 80052e0:	2b49      	cmp	r3, #73	; 0x49
 80052e2:	f47f aede 	bne.w	80050a2 <_strtod_l+0xba>
 80052e6:	49a0      	ldr	r1, [pc, #640]	; (8005568 <_strtod_l+0x580>)
 80052e8:	a81b      	add	r0, sp, #108	; 0x6c
 80052ea:	f001 fe3b 	bl	8006f64 <__match>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	f43f aed7 	beq.w	80050a2 <_strtod_l+0xba>
 80052f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052f6:	499d      	ldr	r1, [pc, #628]	; (800556c <_strtod_l+0x584>)
 80052f8:	3b01      	subs	r3, #1
 80052fa:	a81b      	add	r0, sp, #108	; 0x6c
 80052fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80052fe:	f001 fe31 	bl	8006f64 <__match>
 8005302:	b910      	cbnz	r0, 800530a <_strtod_l+0x322>
 8005304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005306:	3301      	adds	r3, #1
 8005308:	931b      	str	r3, [sp, #108]	; 0x6c
 800530a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005580 <_strtod_l+0x598>
 800530e:	f04f 0a00 	mov.w	sl, #0
 8005312:	e6a8      	b.n	8005066 <_strtod_l+0x7e>
 8005314:	210a      	movs	r1, #10
 8005316:	fb01 3e0e 	mla	lr, r1, lr, r3
 800531a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800531e:	e7b8      	b.n	8005292 <_strtod_l+0x2aa>
 8005320:	46be      	mov	lr, r7
 8005322:	e7c8      	b.n	80052b6 <_strtod_l+0x2ce>
 8005324:	2b69      	cmp	r3, #105	; 0x69
 8005326:	d0de      	beq.n	80052e6 <_strtod_l+0x2fe>
 8005328:	2b6e      	cmp	r3, #110	; 0x6e
 800532a:	f47f aeba 	bne.w	80050a2 <_strtod_l+0xba>
 800532e:	4990      	ldr	r1, [pc, #576]	; (8005570 <_strtod_l+0x588>)
 8005330:	a81b      	add	r0, sp, #108	; 0x6c
 8005332:	f001 fe17 	bl	8006f64 <__match>
 8005336:	2800      	cmp	r0, #0
 8005338:	f43f aeb3 	beq.w	80050a2 <_strtod_l+0xba>
 800533c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b28      	cmp	r3, #40	; 0x28
 8005342:	d10e      	bne.n	8005362 <_strtod_l+0x37a>
 8005344:	aa1e      	add	r2, sp, #120	; 0x78
 8005346:	498b      	ldr	r1, [pc, #556]	; (8005574 <_strtod_l+0x58c>)
 8005348:	a81b      	add	r0, sp, #108	; 0x6c
 800534a:	f001 fe1f 	bl	8006f8c <__hexnan>
 800534e:	2805      	cmp	r0, #5
 8005350:	d107      	bne.n	8005362 <_strtod_l+0x37a>
 8005352:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005354:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005358:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800535c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005360:	e681      	b.n	8005066 <_strtod_l+0x7e>
 8005362:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005588 <_strtod_l+0x5a0>
 8005366:	e7d2      	b.n	800530e <_strtod_l+0x326>
 8005368:	ebae 0302 	sub.w	r3, lr, r2
 800536c:	9306      	str	r3, [sp, #24]
 800536e:	9b05      	ldr	r3, [sp, #20]
 8005370:	9807      	ldr	r0, [sp, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	bf08      	it	eq
 8005376:	4623      	moveq	r3, r4
 8005378:	2c10      	cmp	r4, #16
 800537a:	9305      	str	r3, [sp, #20]
 800537c:	46a0      	mov	r8, r4
 800537e:	bfa8      	it	ge
 8005380:	f04f 0810 	movge.w	r8, #16
 8005384:	f7fb f8c6 	bl	8000514 <__aeabi_ui2d>
 8005388:	2c09      	cmp	r4, #9
 800538a:	4682      	mov	sl, r0
 800538c:	468b      	mov	fp, r1
 800538e:	dc13      	bgt.n	80053b8 <_strtod_l+0x3d0>
 8005390:	9b06      	ldr	r3, [sp, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f43f ae67 	beq.w	8005066 <_strtod_l+0x7e>
 8005398:	9b06      	ldr	r3, [sp, #24]
 800539a:	dd7a      	ble.n	8005492 <_strtod_l+0x4aa>
 800539c:	2b16      	cmp	r3, #22
 800539e:	dc61      	bgt.n	8005464 <_strtod_l+0x47c>
 80053a0:	4a75      	ldr	r2, [pc, #468]	; (8005578 <_strtod_l+0x590>)
 80053a2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80053a6:	e9de 0100 	ldrd	r0, r1, [lr]
 80053aa:	4652      	mov	r2, sl
 80053ac:	465b      	mov	r3, fp
 80053ae:	f7fb f92b 	bl	8000608 <__aeabi_dmul>
 80053b2:	4682      	mov	sl, r0
 80053b4:	468b      	mov	fp, r1
 80053b6:	e656      	b.n	8005066 <_strtod_l+0x7e>
 80053b8:	4b6f      	ldr	r3, [pc, #444]	; (8005578 <_strtod_l+0x590>)
 80053ba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80053be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80053c2:	f7fb f921 	bl	8000608 <__aeabi_dmul>
 80053c6:	4606      	mov	r6, r0
 80053c8:	4628      	mov	r0, r5
 80053ca:	460f      	mov	r7, r1
 80053cc:	f7fb f8a2 	bl	8000514 <__aeabi_ui2d>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4630      	mov	r0, r6
 80053d6:	4639      	mov	r1, r7
 80053d8:	f7fa ff60 	bl	800029c <__adddf3>
 80053dc:	2c0f      	cmp	r4, #15
 80053de:	4682      	mov	sl, r0
 80053e0:	468b      	mov	fp, r1
 80053e2:	ddd5      	ble.n	8005390 <_strtod_l+0x3a8>
 80053e4:	9b06      	ldr	r3, [sp, #24]
 80053e6:	eba4 0808 	sub.w	r8, r4, r8
 80053ea:	4498      	add	r8, r3
 80053ec:	f1b8 0f00 	cmp.w	r8, #0
 80053f0:	f340 8096 	ble.w	8005520 <_strtod_l+0x538>
 80053f4:	f018 030f 	ands.w	r3, r8, #15
 80053f8:	d00a      	beq.n	8005410 <_strtod_l+0x428>
 80053fa:	495f      	ldr	r1, [pc, #380]	; (8005578 <_strtod_l+0x590>)
 80053fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005400:	4652      	mov	r2, sl
 8005402:	465b      	mov	r3, fp
 8005404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005408:	f7fb f8fe 	bl	8000608 <__aeabi_dmul>
 800540c:	4682      	mov	sl, r0
 800540e:	468b      	mov	fp, r1
 8005410:	f038 080f 	bics.w	r8, r8, #15
 8005414:	d073      	beq.n	80054fe <_strtod_l+0x516>
 8005416:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800541a:	dd47      	ble.n	80054ac <_strtod_l+0x4c4>
 800541c:	2400      	movs	r4, #0
 800541e:	46a0      	mov	r8, r4
 8005420:	9407      	str	r4, [sp, #28]
 8005422:	9405      	str	r4, [sp, #20]
 8005424:	2322      	movs	r3, #34	; 0x22
 8005426:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005580 <_strtod_l+0x598>
 800542a:	f8c9 3000 	str.w	r3, [r9]
 800542e:	f04f 0a00 	mov.w	sl, #0
 8005432:	9b07      	ldr	r3, [sp, #28]
 8005434:	2b00      	cmp	r3, #0
 8005436:	f43f ae16 	beq.w	8005066 <_strtod_l+0x7e>
 800543a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800543c:	4648      	mov	r0, r9
 800543e:	f001 feaa 	bl	8007196 <_Bfree>
 8005442:	9905      	ldr	r1, [sp, #20]
 8005444:	4648      	mov	r0, r9
 8005446:	f001 fea6 	bl	8007196 <_Bfree>
 800544a:	4641      	mov	r1, r8
 800544c:	4648      	mov	r0, r9
 800544e:	f001 fea2 	bl	8007196 <_Bfree>
 8005452:	9907      	ldr	r1, [sp, #28]
 8005454:	4648      	mov	r0, r9
 8005456:	f001 fe9e 	bl	8007196 <_Bfree>
 800545a:	4621      	mov	r1, r4
 800545c:	4648      	mov	r0, r9
 800545e:	f001 fe9a 	bl	8007196 <_Bfree>
 8005462:	e600      	b.n	8005066 <_strtod_l+0x7e>
 8005464:	9a06      	ldr	r2, [sp, #24]
 8005466:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800546a:	4293      	cmp	r3, r2
 800546c:	dbba      	blt.n	80053e4 <_strtod_l+0x3fc>
 800546e:	4d42      	ldr	r5, [pc, #264]	; (8005578 <_strtod_l+0x590>)
 8005470:	f1c4 040f 	rsb	r4, r4, #15
 8005474:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005478:	4652      	mov	r2, sl
 800547a:	465b      	mov	r3, fp
 800547c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005480:	f7fb f8c2 	bl	8000608 <__aeabi_dmul>
 8005484:	9b06      	ldr	r3, [sp, #24]
 8005486:	1b1c      	subs	r4, r3, r4
 8005488:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800548c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005490:	e78d      	b.n	80053ae <_strtod_l+0x3c6>
 8005492:	f113 0f16 	cmn.w	r3, #22
 8005496:	dba5      	blt.n	80053e4 <_strtod_l+0x3fc>
 8005498:	4a37      	ldr	r2, [pc, #220]	; (8005578 <_strtod_l+0x590>)
 800549a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800549e:	e9d2 2300 	ldrd	r2, r3, [r2]
 80054a2:	4650      	mov	r0, sl
 80054a4:	4659      	mov	r1, fp
 80054a6:	f7fb f9d9 	bl	800085c <__aeabi_ddiv>
 80054aa:	e782      	b.n	80053b2 <_strtod_l+0x3ca>
 80054ac:	2300      	movs	r3, #0
 80054ae:	4e33      	ldr	r6, [pc, #204]	; (800557c <_strtod_l+0x594>)
 80054b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80054b4:	4650      	mov	r0, sl
 80054b6:	4659      	mov	r1, fp
 80054b8:	461d      	mov	r5, r3
 80054ba:	f1b8 0f01 	cmp.w	r8, #1
 80054be:	dc21      	bgt.n	8005504 <_strtod_l+0x51c>
 80054c0:	b10b      	cbz	r3, 80054c6 <_strtod_l+0x4de>
 80054c2:	4682      	mov	sl, r0
 80054c4:	468b      	mov	fp, r1
 80054c6:	4b2d      	ldr	r3, [pc, #180]	; (800557c <_strtod_l+0x594>)
 80054c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80054cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80054d0:	4652      	mov	r2, sl
 80054d2:	465b      	mov	r3, fp
 80054d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80054d8:	f7fb f896 	bl	8000608 <__aeabi_dmul>
 80054dc:	4b28      	ldr	r3, [pc, #160]	; (8005580 <_strtod_l+0x598>)
 80054de:	460a      	mov	r2, r1
 80054e0:	400b      	ands	r3, r1
 80054e2:	4928      	ldr	r1, [pc, #160]	; (8005584 <_strtod_l+0x59c>)
 80054e4:	428b      	cmp	r3, r1
 80054e6:	4682      	mov	sl, r0
 80054e8:	d898      	bhi.n	800541c <_strtod_l+0x434>
 80054ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80054ee:	428b      	cmp	r3, r1
 80054f0:	bf86      	itte	hi
 80054f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800558c <_strtod_l+0x5a4>
 80054f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80054fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80054fe:	2300      	movs	r3, #0
 8005500:	9304      	str	r3, [sp, #16]
 8005502:	e077      	b.n	80055f4 <_strtod_l+0x60c>
 8005504:	f018 0f01 	tst.w	r8, #1
 8005508:	d006      	beq.n	8005518 <_strtod_l+0x530>
 800550a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f7fb f879 	bl	8000608 <__aeabi_dmul>
 8005516:	2301      	movs	r3, #1
 8005518:	3501      	adds	r5, #1
 800551a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800551e:	e7cc      	b.n	80054ba <_strtod_l+0x4d2>
 8005520:	d0ed      	beq.n	80054fe <_strtod_l+0x516>
 8005522:	f1c8 0800 	rsb	r8, r8, #0
 8005526:	f018 020f 	ands.w	r2, r8, #15
 800552a:	d00a      	beq.n	8005542 <_strtod_l+0x55a>
 800552c:	4b12      	ldr	r3, [pc, #72]	; (8005578 <_strtod_l+0x590>)
 800552e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005532:	4650      	mov	r0, sl
 8005534:	4659      	mov	r1, fp
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f7fb f98f 	bl	800085c <__aeabi_ddiv>
 800553e:	4682      	mov	sl, r0
 8005540:	468b      	mov	fp, r1
 8005542:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005546:	d0da      	beq.n	80054fe <_strtod_l+0x516>
 8005548:	f1b8 0f1f 	cmp.w	r8, #31
 800554c:	dd20      	ble.n	8005590 <_strtod_l+0x5a8>
 800554e:	2400      	movs	r4, #0
 8005550:	46a0      	mov	r8, r4
 8005552:	9407      	str	r4, [sp, #28]
 8005554:	9405      	str	r4, [sp, #20]
 8005556:	2322      	movs	r3, #34	; 0x22
 8005558:	f04f 0a00 	mov.w	sl, #0
 800555c:	f04f 0b00 	mov.w	fp, #0
 8005560:	f8c9 3000 	str.w	r3, [r9]
 8005564:	e765      	b.n	8005432 <_strtod_l+0x44a>
 8005566:	bf00      	nop
 8005568:	080085b1 	.word	0x080085b1
 800556c:	0800863b 	.word	0x0800863b
 8005570:	080085b9 	.word	0x080085b9
 8005574:	080085f8 	.word	0x080085f8
 8005578:	08008678 	.word	0x08008678
 800557c:	08008650 	.word	0x08008650
 8005580:	7ff00000 	.word	0x7ff00000
 8005584:	7ca00000 	.word	0x7ca00000
 8005588:	fff80000 	.word	0xfff80000
 800558c:	7fefffff 	.word	0x7fefffff
 8005590:	f018 0310 	ands.w	r3, r8, #16
 8005594:	bf18      	it	ne
 8005596:	236a      	movne	r3, #106	; 0x6a
 8005598:	4da0      	ldr	r5, [pc, #640]	; (800581c <_strtod_l+0x834>)
 800559a:	9304      	str	r3, [sp, #16]
 800559c:	4650      	mov	r0, sl
 800559e:	4659      	mov	r1, fp
 80055a0:	2300      	movs	r3, #0
 80055a2:	f1b8 0f00 	cmp.w	r8, #0
 80055a6:	f300 810a 	bgt.w	80057be <_strtod_l+0x7d6>
 80055aa:	b10b      	cbz	r3, 80055b0 <_strtod_l+0x5c8>
 80055ac:	4682      	mov	sl, r0
 80055ae:	468b      	mov	fp, r1
 80055b0:	9b04      	ldr	r3, [sp, #16]
 80055b2:	b1bb      	cbz	r3, 80055e4 <_strtod_l+0x5fc>
 80055b4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80055b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80055bc:	2b00      	cmp	r3, #0
 80055be:	4659      	mov	r1, fp
 80055c0:	dd10      	ble.n	80055e4 <_strtod_l+0x5fc>
 80055c2:	2b1f      	cmp	r3, #31
 80055c4:	f340 8107 	ble.w	80057d6 <_strtod_l+0x7ee>
 80055c8:	2b34      	cmp	r3, #52	; 0x34
 80055ca:	bfde      	ittt	le
 80055cc:	3b20      	suble	r3, #32
 80055ce:	f04f 32ff 	movle.w	r2, #4294967295
 80055d2:	fa02 f303 	lslle.w	r3, r2, r3
 80055d6:	f04f 0a00 	mov.w	sl, #0
 80055da:	bfcc      	ite	gt
 80055dc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80055e0:	ea03 0b01 	andle.w	fp, r3, r1
 80055e4:	2200      	movs	r2, #0
 80055e6:	2300      	movs	r3, #0
 80055e8:	4650      	mov	r0, sl
 80055ea:	4659      	mov	r1, fp
 80055ec:	f7fb fa74 	bl	8000ad8 <__aeabi_dcmpeq>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d1ac      	bne.n	800554e <_strtod_l+0x566>
 80055f4:	9b07      	ldr	r3, [sp, #28]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	9a05      	ldr	r2, [sp, #20]
 80055fa:	9908      	ldr	r1, [sp, #32]
 80055fc:	4623      	mov	r3, r4
 80055fe:	4648      	mov	r0, r9
 8005600:	f001 fe1b 	bl	800723a <__s2b>
 8005604:	9007      	str	r0, [sp, #28]
 8005606:	2800      	cmp	r0, #0
 8005608:	f43f af08 	beq.w	800541c <_strtod_l+0x434>
 800560c:	9a06      	ldr	r2, [sp, #24]
 800560e:	9b06      	ldr	r3, [sp, #24]
 8005610:	2a00      	cmp	r2, #0
 8005612:	f1c3 0300 	rsb	r3, r3, #0
 8005616:	bfa8      	it	ge
 8005618:	2300      	movge	r3, #0
 800561a:	930e      	str	r3, [sp, #56]	; 0x38
 800561c:	2400      	movs	r4, #0
 800561e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005622:	9316      	str	r3, [sp, #88]	; 0x58
 8005624:	46a0      	mov	r8, r4
 8005626:	9b07      	ldr	r3, [sp, #28]
 8005628:	4648      	mov	r0, r9
 800562a:	6859      	ldr	r1, [r3, #4]
 800562c:	f001 fd7f 	bl	800712e <_Balloc>
 8005630:	9005      	str	r0, [sp, #20]
 8005632:	2800      	cmp	r0, #0
 8005634:	f43f aef6 	beq.w	8005424 <_strtod_l+0x43c>
 8005638:	9b07      	ldr	r3, [sp, #28]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	3202      	adds	r2, #2
 800563e:	f103 010c 	add.w	r1, r3, #12
 8005642:	0092      	lsls	r2, r2, #2
 8005644:	300c      	adds	r0, #12
 8005646:	f001 fd65 	bl	8007114 <memcpy>
 800564a:	aa1e      	add	r2, sp, #120	; 0x78
 800564c:	a91d      	add	r1, sp, #116	; 0x74
 800564e:	ec4b ab10 	vmov	d0, sl, fp
 8005652:	4648      	mov	r0, r9
 8005654:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005658:	f002 f8aa 	bl	80077b0 <__d2b>
 800565c:	901c      	str	r0, [sp, #112]	; 0x70
 800565e:	2800      	cmp	r0, #0
 8005660:	f43f aee0 	beq.w	8005424 <_strtod_l+0x43c>
 8005664:	2101      	movs	r1, #1
 8005666:	4648      	mov	r0, r9
 8005668:	f001 fe73 	bl	8007352 <__i2b>
 800566c:	4680      	mov	r8, r0
 800566e:	2800      	cmp	r0, #0
 8005670:	f43f aed8 	beq.w	8005424 <_strtod_l+0x43c>
 8005674:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005676:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005678:	2e00      	cmp	r6, #0
 800567a:	bfab      	itete	ge
 800567c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800567e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005680:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005682:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005684:	bfac      	ite	ge
 8005686:	18f7      	addge	r7, r6, r3
 8005688:	1b9d      	sublt	r5, r3, r6
 800568a:	9b04      	ldr	r3, [sp, #16]
 800568c:	1af6      	subs	r6, r6, r3
 800568e:	4416      	add	r6, r2
 8005690:	4b63      	ldr	r3, [pc, #396]	; (8005820 <_strtod_l+0x838>)
 8005692:	3e01      	subs	r6, #1
 8005694:	429e      	cmp	r6, r3
 8005696:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800569a:	f280 80af 	bge.w	80057fc <_strtod_l+0x814>
 800569e:	1b9b      	subs	r3, r3, r6
 80056a0:	2b1f      	cmp	r3, #31
 80056a2:	eba2 0203 	sub.w	r2, r2, r3
 80056a6:	f04f 0101 	mov.w	r1, #1
 80056aa:	f300 809b 	bgt.w	80057e4 <_strtod_l+0x7fc>
 80056ae:	fa01 f303 	lsl.w	r3, r1, r3
 80056b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80056b4:	2300      	movs	r3, #0
 80056b6:	930a      	str	r3, [sp, #40]	; 0x28
 80056b8:	18be      	adds	r6, r7, r2
 80056ba:	9b04      	ldr	r3, [sp, #16]
 80056bc:	42b7      	cmp	r7, r6
 80056be:	4415      	add	r5, r2
 80056c0:	441d      	add	r5, r3
 80056c2:	463b      	mov	r3, r7
 80056c4:	bfa8      	it	ge
 80056c6:	4633      	movge	r3, r6
 80056c8:	42ab      	cmp	r3, r5
 80056ca:	bfa8      	it	ge
 80056cc:	462b      	movge	r3, r5
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bfc2      	ittt	gt
 80056d2:	1af6      	subgt	r6, r6, r3
 80056d4:	1aed      	subgt	r5, r5, r3
 80056d6:	1aff      	subgt	r7, r7, r3
 80056d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056da:	b1bb      	cbz	r3, 800570c <_strtod_l+0x724>
 80056dc:	4641      	mov	r1, r8
 80056de:	461a      	mov	r2, r3
 80056e0:	4648      	mov	r0, r9
 80056e2:	f001 fed5 	bl	8007490 <__pow5mult>
 80056e6:	4680      	mov	r8, r0
 80056e8:	2800      	cmp	r0, #0
 80056ea:	f43f ae9b 	beq.w	8005424 <_strtod_l+0x43c>
 80056ee:	4601      	mov	r1, r0
 80056f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80056f2:	4648      	mov	r0, r9
 80056f4:	f001 fe36 	bl	8007364 <__multiply>
 80056f8:	900c      	str	r0, [sp, #48]	; 0x30
 80056fa:	2800      	cmp	r0, #0
 80056fc:	f43f ae92 	beq.w	8005424 <_strtod_l+0x43c>
 8005700:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005702:	4648      	mov	r0, r9
 8005704:	f001 fd47 	bl	8007196 <_Bfree>
 8005708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800570a:	931c      	str	r3, [sp, #112]	; 0x70
 800570c:	2e00      	cmp	r6, #0
 800570e:	dc7a      	bgt.n	8005806 <_strtod_l+0x81e>
 8005710:	9b06      	ldr	r3, [sp, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	dd08      	ble.n	8005728 <_strtod_l+0x740>
 8005716:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005718:	9905      	ldr	r1, [sp, #20]
 800571a:	4648      	mov	r0, r9
 800571c:	f001 feb8 	bl	8007490 <__pow5mult>
 8005720:	9005      	str	r0, [sp, #20]
 8005722:	2800      	cmp	r0, #0
 8005724:	f43f ae7e 	beq.w	8005424 <_strtod_l+0x43c>
 8005728:	2d00      	cmp	r5, #0
 800572a:	dd08      	ble.n	800573e <_strtod_l+0x756>
 800572c:	462a      	mov	r2, r5
 800572e:	9905      	ldr	r1, [sp, #20]
 8005730:	4648      	mov	r0, r9
 8005732:	f001 fefb 	bl	800752c <__lshift>
 8005736:	9005      	str	r0, [sp, #20]
 8005738:	2800      	cmp	r0, #0
 800573a:	f43f ae73 	beq.w	8005424 <_strtod_l+0x43c>
 800573e:	2f00      	cmp	r7, #0
 8005740:	dd08      	ble.n	8005754 <_strtod_l+0x76c>
 8005742:	4641      	mov	r1, r8
 8005744:	463a      	mov	r2, r7
 8005746:	4648      	mov	r0, r9
 8005748:	f001 fef0 	bl	800752c <__lshift>
 800574c:	4680      	mov	r8, r0
 800574e:	2800      	cmp	r0, #0
 8005750:	f43f ae68 	beq.w	8005424 <_strtod_l+0x43c>
 8005754:	9a05      	ldr	r2, [sp, #20]
 8005756:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005758:	4648      	mov	r0, r9
 800575a:	f001 ff55 	bl	8007608 <__mdiff>
 800575e:	4604      	mov	r4, r0
 8005760:	2800      	cmp	r0, #0
 8005762:	f43f ae5f 	beq.w	8005424 <_strtod_l+0x43c>
 8005766:	68c3      	ldr	r3, [r0, #12]
 8005768:	930c      	str	r3, [sp, #48]	; 0x30
 800576a:	2300      	movs	r3, #0
 800576c:	60c3      	str	r3, [r0, #12]
 800576e:	4641      	mov	r1, r8
 8005770:	f001 ff30 	bl	80075d4 <__mcmp>
 8005774:	2800      	cmp	r0, #0
 8005776:	da55      	bge.n	8005824 <_strtod_l+0x83c>
 8005778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800577a:	b9e3      	cbnz	r3, 80057b6 <_strtod_l+0x7ce>
 800577c:	f1ba 0f00 	cmp.w	sl, #0
 8005780:	d119      	bne.n	80057b6 <_strtod_l+0x7ce>
 8005782:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005786:	b9b3      	cbnz	r3, 80057b6 <_strtod_l+0x7ce>
 8005788:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800578c:	0d1b      	lsrs	r3, r3, #20
 800578e:	051b      	lsls	r3, r3, #20
 8005790:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005794:	d90f      	bls.n	80057b6 <_strtod_l+0x7ce>
 8005796:	6963      	ldr	r3, [r4, #20]
 8005798:	b913      	cbnz	r3, 80057a0 <_strtod_l+0x7b8>
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	2b01      	cmp	r3, #1
 800579e:	dd0a      	ble.n	80057b6 <_strtod_l+0x7ce>
 80057a0:	4621      	mov	r1, r4
 80057a2:	2201      	movs	r2, #1
 80057a4:	4648      	mov	r0, r9
 80057a6:	f001 fec1 	bl	800752c <__lshift>
 80057aa:	4641      	mov	r1, r8
 80057ac:	4604      	mov	r4, r0
 80057ae:	f001 ff11 	bl	80075d4 <__mcmp>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	dc67      	bgt.n	8005886 <_strtod_l+0x89e>
 80057b6:	9b04      	ldr	r3, [sp, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d171      	bne.n	80058a0 <_strtod_l+0x8b8>
 80057bc:	e63d      	b.n	800543a <_strtod_l+0x452>
 80057be:	f018 0f01 	tst.w	r8, #1
 80057c2:	d004      	beq.n	80057ce <_strtod_l+0x7e6>
 80057c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057c8:	f7fa ff1e 	bl	8000608 <__aeabi_dmul>
 80057cc:	2301      	movs	r3, #1
 80057ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80057d2:	3508      	adds	r5, #8
 80057d4:	e6e5      	b.n	80055a2 <_strtod_l+0x5ba>
 80057d6:	f04f 32ff 	mov.w	r2, #4294967295
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	ea03 0a0a 	and.w	sl, r3, sl
 80057e2:	e6ff      	b.n	80055e4 <_strtod_l+0x5fc>
 80057e4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80057e8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80057ec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80057f0:	36e2      	adds	r6, #226	; 0xe2
 80057f2:	fa01 f306 	lsl.w	r3, r1, r6
 80057f6:	930a      	str	r3, [sp, #40]	; 0x28
 80057f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80057fa:	e75d      	b.n	80056b8 <_strtod_l+0x6d0>
 80057fc:	2300      	movs	r3, #0
 80057fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005800:	2301      	movs	r3, #1
 8005802:	930f      	str	r3, [sp, #60]	; 0x3c
 8005804:	e758      	b.n	80056b8 <_strtod_l+0x6d0>
 8005806:	4632      	mov	r2, r6
 8005808:	991c      	ldr	r1, [sp, #112]	; 0x70
 800580a:	4648      	mov	r0, r9
 800580c:	f001 fe8e 	bl	800752c <__lshift>
 8005810:	901c      	str	r0, [sp, #112]	; 0x70
 8005812:	2800      	cmp	r0, #0
 8005814:	f47f af7c 	bne.w	8005710 <_strtod_l+0x728>
 8005818:	e604      	b.n	8005424 <_strtod_l+0x43c>
 800581a:	bf00      	nop
 800581c:	08008610 	.word	0x08008610
 8005820:	fffffc02 	.word	0xfffffc02
 8005824:	465d      	mov	r5, fp
 8005826:	f040 8086 	bne.w	8005936 <_strtod_l+0x94e>
 800582a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800582c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005830:	b32a      	cbz	r2, 800587e <_strtod_l+0x896>
 8005832:	4aaf      	ldr	r2, [pc, #700]	; (8005af0 <_strtod_l+0xb08>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d153      	bne.n	80058e0 <_strtod_l+0x8f8>
 8005838:	9b04      	ldr	r3, [sp, #16]
 800583a:	4650      	mov	r0, sl
 800583c:	b1d3      	cbz	r3, 8005874 <_strtod_l+0x88c>
 800583e:	4aad      	ldr	r2, [pc, #692]	; (8005af4 <_strtod_l+0xb0c>)
 8005840:	402a      	ands	r2, r5
 8005842:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005846:	f04f 31ff 	mov.w	r1, #4294967295
 800584a:	d816      	bhi.n	800587a <_strtod_l+0x892>
 800584c:	0d12      	lsrs	r2, r2, #20
 800584e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005852:	fa01 f303 	lsl.w	r3, r1, r3
 8005856:	4298      	cmp	r0, r3
 8005858:	d142      	bne.n	80058e0 <_strtod_l+0x8f8>
 800585a:	4ba7      	ldr	r3, [pc, #668]	; (8005af8 <_strtod_l+0xb10>)
 800585c:	429d      	cmp	r5, r3
 800585e:	d102      	bne.n	8005866 <_strtod_l+0x87e>
 8005860:	3001      	adds	r0, #1
 8005862:	f43f addf 	beq.w	8005424 <_strtod_l+0x43c>
 8005866:	4ba3      	ldr	r3, [pc, #652]	; (8005af4 <_strtod_l+0xb0c>)
 8005868:	402b      	ands	r3, r5
 800586a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800586e:	f04f 0a00 	mov.w	sl, #0
 8005872:	e7a0      	b.n	80057b6 <_strtod_l+0x7ce>
 8005874:	f04f 33ff 	mov.w	r3, #4294967295
 8005878:	e7ed      	b.n	8005856 <_strtod_l+0x86e>
 800587a:	460b      	mov	r3, r1
 800587c:	e7eb      	b.n	8005856 <_strtod_l+0x86e>
 800587e:	bb7b      	cbnz	r3, 80058e0 <_strtod_l+0x8f8>
 8005880:	f1ba 0f00 	cmp.w	sl, #0
 8005884:	d12c      	bne.n	80058e0 <_strtod_l+0x8f8>
 8005886:	9904      	ldr	r1, [sp, #16]
 8005888:	4a9a      	ldr	r2, [pc, #616]	; (8005af4 <_strtod_l+0xb0c>)
 800588a:	465b      	mov	r3, fp
 800588c:	b1f1      	cbz	r1, 80058cc <_strtod_l+0x8e4>
 800588e:	ea02 010b 	and.w	r1, r2, fp
 8005892:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005896:	dc19      	bgt.n	80058cc <_strtod_l+0x8e4>
 8005898:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800589c:	f77f ae5b 	ble.w	8005556 <_strtod_l+0x56e>
 80058a0:	4a96      	ldr	r2, [pc, #600]	; (8005afc <_strtod_l+0xb14>)
 80058a2:	2300      	movs	r3, #0
 80058a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80058a8:	4650      	mov	r0, sl
 80058aa:	4659      	mov	r1, fp
 80058ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80058b0:	f7fa feaa 	bl	8000608 <__aeabi_dmul>
 80058b4:	4682      	mov	sl, r0
 80058b6:	468b      	mov	fp, r1
 80058b8:	2900      	cmp	r1, #0
 80058ba:	f47f adbe 	bne.w	800543a <_strtod_l+0x452>
 80058be:	2800      	cmp	r0, #0
 80058c0:	f47f adbb 	bne.w	800543a <_strtod_l+0x452>
 80058c4:	2322      	movs	r3, #34	; 0x22
 80058c6:	f8c9 3000 	str.w	r3, [r9]
 80058ca:	e5b6      	b.n	800543a <_strtod_l+0x452>
 80058cc:	4013      	ands	r3, r2
 80058ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80058d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80058d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80058da:	f04f 3aff 	mov.w	sl, #4294967295
 80058de:	e76a      	b.n	80057b6 <_strtod_l+0x7ce>
 80058e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e2:	b193      	cbz	r3, 800590a <_strtod_l+0x922>
 80058e4:	422b      	tst	r3, r5
 80058e6:	f43f af66 	beq.w	80057b6 <_strtod_l+0x7ce>
 80058ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058ec:	9a04      	ldr	r2, [sp, #16]
 80058ee:	4650      	mov	r0, sl
 80058f0:	4659      	mov	r1, fp
 80058f2:	b173      	cbz	r3, 8005912 <_strtod_l+0x92a>
 80058f4:	f7ff fb5a 	bl	8004fac <sulp>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005900:	f7fa fccc 	bl	800029c <__adddf3>
 8005904:	4682      	mov	sl, r0
 8005906:	468b      	mov	fp, r1
 8005908:	e755      	b.n	80057b6 <_strtod_l+0x7ce>
 800590a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800590c:	ea13 0f0a 	tst.w	r3, sl
 8005910:	e7e9      	b.n	80058e6 <_strtod_l+0x8fe>
 8005912:	f7ff fb4b 	bl	8004fac <sulp>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800591e:	f7fa fcbb 	bl	8000298 <__aeabi_dsub>
 8005922:	2200      	movs	r2, #0
 8005924:	2300      	movs	r3, #0
 8005926:	4682      	mov	sl, r0
 8005928:	468b      	mov	fp, r1
 800592a:	f7fb f8d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800592e:	2800      	cmp	r0, #0
 8005930:	f47f ae11 	bne.w	8005556 <_strtod_l+0x56e>
 8005934:	e73f      	b.n	80057b6 <_strtod_l+0x7ce>
 8005936:	4641      	mov	r1, r8
 8005938:	4620      	mov	r0, r4
 800593a:	f001 ff88 	bl	800784e <__ratio>
 800593e:	ec57 6b10 	vmov	r6, r7, d0
 8005942:	2200      	movs	r2, #0
 8005944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005948:	ee10 0a10 	vmov	r0, s0
 800594c:	4639      	mov	r1, r7
 800594e:	f7fb f8d7 	bl	8000b00 <__aeabi_dcmple>
 8005952:	2800      	cmp	r0, #0
 8005954:	d077      	beq.n	8005a46 <_strtod_l+0xa5e>
 8005956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005958:	2b00      	cmp	r3, #0
 800595a:	d04a      	beq.n	80059f2 <_strtod_l+0xa0a>
 800595c:	4b68      	ldr	r3, [pc, #416]	; (8005b00 <_strtod_l+0xb18>)
 800595e:	2200      	movs	r2, #0
 8005960:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005964:	4f66      	ldr	r7, [pc, #408]	; (8005b00 <_strtod_l+0xb18>)
 8005966:	2600      	movs	r6, #0
 8005968:	4b62      	ldr	r3, [pc, #392]	; (8005af4 <_strtod_l+0xb0c>)
 800596a:	402b      	ands	r3, r5
 800596c:	930f      	str	r3, [sp, #60]	; 0x3c
 800596e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005970:	4b64      	ldr	r3, [pc, #400]	; (8005b04 <_strtod_l+0xb1c>)
 8005972:	429a      	cmp	r2, r3
 8005974:	f040 80ce 	bne.w	8005b14 <_strtod_l+0xb2c>
 8005978:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800597c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005980:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005984:	ec4b ab10 	vmov	d0, sl, fp
 8005988:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800598c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005990:	f001 fe98 	bl	80076c4 <__ulp>
 8005994:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005998:	ec53 2b10 	vmov	r2, r3, d0
 800599c:	f7fa fe34 	bl	8000608 <__aeabi_dmul>
 80059a0:	4652      	mov	r2, sl
 80059a2:	465b      	mov	r3, fp
 80059a4:	f7fa fc7a 	bl	800029c <__adddf3>
 80059a8:	460b      	mov	r3, r1
 80059aa:	4952      	ldr	r1, [pc, #328]	; (8005af4 <_strtod_l+0xb0c>)
 80059ac:	4a56      	ldr	r2, [pc, #344]	; (8005b08 <_strtod_l+0xb20>)
 80059ae:	4019      	ands	r1, r3
 80059b0:	4291      	cmp	r1, r2
 80059b2:	4682      	mov	sl, r0
 80059b4:	d95b      	bls.n	8005a6e <_strtod_l+0xa86>
 80059b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80059bc:	4293      	cmp	r3, r2
 80059be:	d103      	bne.n	80059c8 <_strtod_l+0x9e0>
 80059c0:	9b08      	ldr	r3, [sp, #32]
 80059c2:	3301      	adds	r3, #1
 80059c4:	f43f ad2e 	beq.w	8005424 <_strtod_l+0x43c>
 80059c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005af8 <_strtod_l+0xb10>
 80059cc:	f04f 3aff 	mov.w	sl, #4294967295
 80059d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80059d2:	4648      	mov	r0, r9
 80059d4:	f001 fbdf 	bl	8007196 <_Bfree>
 80059d8:	9905      	ldr	r1, [sp, #20]
 80059da:	4648      	mov	r0, r9
 80059dc:	f001 fbdb 	bl	8007196 <_Bfree>
 80059e0:	4641      	mov	r1, r8
 80059e2:	4648      	mov	r0, r9
 80059e4:	f001 fbd7 	bl	8007196 <_Bfree>
 80059e8:	4621      	mov	r1, r4
 80059ea:	4648      	mov	r0, r9
 80059ec:	f001 fbd3 	bl	8007196 <_Bfree>
 80059f0:	e619      	b.n	8005626 <_strtod_l+0x63e>
 80059f2:	f1ba 0f00 	cmp.w	sl, #0
 80059f6:	d11a      	bne.n	8005a2e <_strtod_l+0xa46>
 80059f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059fc:	b9eb      	cbnz	r3, 8005a3a <_strtod_l+0xa52>
 80059fe:	2200      	movs	r2, #0
 8005a00:	4b3f      	ldr	r3, [pc, #252]	; (8005b00 <_strtod_l+0xb18>)
 8005a02:	4630      	mov	r0, r6
 8005a04:	4639      	mov	r1, r7
 8005a06:	f7fb f871 	bl	8000aec <__aeabi_dcmplt>
 8005a0a:	b9c8      	cbnz	r0, 8005a40 <_strtod_l+0xa58>
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	4639      	mov	r1, r7
 8005a10:	2200      	movs	r2, #0
 8005a12:	4b3e      	ldr	r3, [pc, #248]	; (8005b0c <_strtod_l+0xb24>)
 8005a14:	f7fa fdf8 	bl	8000608 <__aeabi_dmul>
 8005a18:	4606      	mov	r6, r0
 8005a1a:	460f      	mov	r7, r1
 8005a1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005a20:	9618      	str	r6, [sp, #96]	; 0x60
 8005a22:	9319      	str	r3, [sp, #100]	; 0x64
 8005a24:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005a28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005a2c:	e79c      	b.n	8005968 <_strtod_l+0x980>
 8005a2e:	f1ba 0f01 	cmp.w	sl, #1
 8005a32:	d102      	bne.n	8005a3a <_strtod_l+0xa52>
 8005a34:	2d00      	cmp	r5, #0
 8005a36:	f43f ad8e 	beq.w	8005556 <_strtod_l+0x56e>
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4b34      	ldr	r3, [pc, #208]	; (8005b10 <_strtod_l+0xb28>)
 8005a3e:	e78f      	b.n	8005960 <_strtod_l+0x978>
 8005a40:	2600      	movs	r6, #0
 8005a42:	4f32      	ldr	r7, [pc, #200]	; (8005b0c <_strtod_l+0xb24>)
 8005a44:	e7ea      	b.n	8005a1c <_strtod_l+0xa34>
 8005a46:	4b31      	ldr	r3, [pc, #196]	; (8005b0c <_strtod_l+0xb24>)
 8005a48:	4630      	mov	r0, r6
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f7fa fddb 	bl	8000608 <__aeabi_dmul>
 8005a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a54:	4606      	mov	r6, r0
 8005a56:	460f      	mov	r7, r1
 8005a58:	b933      	cbnz	r3, 8005a68 <_strtod_l+0xa80>
 8005a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a5e:	9010      	str	r0, [sp, #64]	; 0x40
 8005a60:	9311      	str	r3, [sp, #68]	; 0x44
 8005a62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a66:	e7df      	b.n	8005a28 <_strtod_l+0xa40>
 8005a68:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005a6c:	e7f9      	b.n	8005a62 <_strtod_l+0xa7a>
 8005a6e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005a72:	9b04      	ldr	r3, [sp, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1ab      	bne.n	80059d0 <_strtod_l+0x9e8>
 8005a78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a7c:	0d1b      	lsrs	r3, r3, #20
 8005a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a80:	051b      	lsls	r3, r3, #20
 8005a82:	429a      	cmp	r2, r3
 8005a84:	465d      	mov	r5, fp
 8005a86:	d1a3      	bne.n	80059d0 <_strtod_l+0x9e8>
 8005a88:	4639      	mov	r1, r7
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7fb f86c 	bl	8000b68 <__aeabi_d2iz>
 8005a90:	f7fa fd50 	bl	8000534 <__aeabi_i2d>
 8005a94:	460b      	mov	r3, r1
 8005a96:	4602      	mov	r2, r0
 8005a98:	4639      	mov	r1, r7
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	f7fa fbfc 	bl	8000298 <__aeabi_dsub>
 8005aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	460f      	mov	r7, r1
 8005aa6:	b933      	cbnz	r3, 8005ab6 <_strtod_l+0xace>
 8005aa8:	f1ba 0f00 	cmp.w	sl, #0
 8005aac:	d103      	bne.n	8005ab6 <_strtod_l+0xace>
 8005aae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005ab2:	2d00      	cmp	r5, #0
 8005ab4:	d06d      	beq.n	8005b92 <_strtod_l+0xbaa>
 8005ab6:	a30a      	add	r3, pc, #40	; (adr r3, 8005ae0 <_strtod_l+0xaf8>)
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	4630      	mov	r0, r6
 8005abe:	4639      	mov	r1, r7
 8005ac0:	f7fb f814 	bl	8000aec <__aeabi_dcmplt>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	f47f acb8 	bne.w	800543a <_strtod_l+0x452>
 8005aca:	a307      	add	r3, pc, #28	; (adr r3, 8005ae8 <_strtod_l+0xb00>)
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	f7fb f828 	bl	8000b28 <__aeabi_dcmpgt>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	f43f af79 	beq.w	80059d0 <_strtod_l+0x9e8>
 8005ade:	e4ac      	b.n	800543a <_strtod_l+0x452>
 8005ae0:	94a03595 	.word	0x94a03595
 8005ae4:	3fdfffff 	.word	0x3fdfffff
 8005ae8:	35afe535 	.word	0x35afe535
 8005aec:	3fe00000 	.word	0x3fe00000
 8005af0:	000fffff 	.word	0x000fffff
 8005af4:	7ff00000 	.word	0x7ff00000
 8005af8:	7fefffff 	.word	0x7fefffff
 8005afc:	39500000 	.word	0x39500000
 8005b00:	3ff00000 	.word	0x3ff00000
 8005b04:	7fe00000 	.word	0x7fe00000
 8005b08:	7c9fffff 	.word	0x7c9fffff
 8005b0c:	3fe00000 	.word	0x3fe00000
 8005b10:	bff00000 	.word	0xbff00000
 8005b14:	9b04      	ldr	r3, [sp, #16]
 8005b16:	b333      	cbz	r3, 8005b66 <_strtod_l+0xb7e>
 8005b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b1e:	d822      	bhi.n	8005b66 <_strtod_l+0xb7e>
 8005b20:	a327      	add	r3, pc, #156	; (adr r3, 8005bc0 <_strtod_l+0xbd8>)
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	4630      	mov	r0, r6
 8005b28:	4639      	mov	r1, r7
 8005b2a:	f7fa ffe9 	bl	8000b00 <__aeabi_dcmple>
 8005b2e:	b1a0      	cbz	r0, 8005b5a <_strtod_l+0xb72>
 8005b30:	4639      	mov	r1, r7
 8005b32:	4630      	mov	r0, r6
 8005b34:	f7fb f840 	bl	8000bb8 <__aeabi_d2uiz>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	bf08      	it	eq
 8005b3c:	2001      	moveq	r0, #1
 8005b3e:	f7fa fce9 	bl	8000514 <__aeabi_ui2d>
 8005b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b44:	4606      	mov	r6, r0
 8005b46:	460f      	mov	r7, r1
 8005b48:	bb03      	cbnz	r3, 8005b8c <_strtod_l+0xba4>
 8005b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b4e:	9012      	str	r0, [sp, #72]	; 0x48
 8005b50:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005b56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b5e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b66:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005b6a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005b6e:	f001 fda9 	bl	80076c4 <__ulp>
 8005b72:	4650      	mov	r0, sl
 8005b74:	ec53 2b10 	vmov	r2, r3, d0
 8005b78:	4659      	mov	r1, fp
 8005b7a:	f7fa fd45 	bl	8000608 <__aeabi_dmul>
 8005b7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b82:	f7fa fb8b 	bl	800029c <__adddf3>
 8005b86:	4682      	mov	sl, r0
 8005b88:	468b      	mov	fp, r1
 8005b8a:	e772      	b.n	8005a72 <_strtod_l+0xa8a>
 8005b8c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005b90:	e7df      	b.n	8005b52 <_strtod_l+0xb6a>
 8005b92:	a30d      	add	r3, pc, #52	; (adr r3, 8005bc8 <_strtod_l+0xbe0>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f7fa ffa8 	bl	8000aec <__aeabi_dcmplt>
 8005b9c:	e79c      	b.n	8005ad8 <_strtod_l+0xaf0>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	930d      	str	r3, [sp, #52]	; 0x34
 8005ba2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	f7ff ba61 	b.w	800506e <_strtod_l+0x86>
 8005bac:	2b65      	cmp	r3, #101	; 0x65
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f43f ab4e 	beq.w	8005252 <_strtod_l+0x26a>
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	4614      	mov	r4, r2
 8005bba:	9104      	str	r1, [sp, #16]
 8005bbc:	f7ff bacb 	b.w	8005156 <_strtod_l+0x16e>
 8005bc0:	ffc00000 	.word	0xffc00000
 8005bc4:	41dfffff 	.word	0x41dfffff
 8005bc8:	94a03595 	.word	0x94a03595
 8005bcc:	3fcfffff 	.word	0x3fcfffff

08005bd0 <_strtod_r>:
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <_strtod_r+0x18>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	b410      	push	{r4}
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	4c04      	ldr	r4, [pc, #16]	; (8005bec <_strtod_r+0x1c>)
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	bf08      	it	eq
 8005bde:	4623      	moveq	r3, r4
 8005be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005be4:	f7ff ba00 	b.w	8004fe8 <_strtod_l>
 8005be8:	2000000c 	.word	0x2000000c
 8005bec:	20000070 	.word	0x20000070

08005bf0 <__strtok_r>:
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf2:	b918      	cbnz	r0, 8005bfc <__strtok_r+0xc>
 8005bf4:	6810      	ldr	r0, [r2, #0]
 8005bf6:	b908      	cbnz	r0, 8005bfc <__strtok_r+0xc>
 8005bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	460f      	mov	r7, r1
 8005c00:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005c04:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c08:	b91e      	cbnz	r6, 8005c12 <__strtok_r+0x22>
 8005c0a:	b96d      	cbnz	r5, 8005c28 <__strtok_r+0x38>
 8005c0c:	6015      	str	r5, [r2, #0]
 8005c0e:	4628      	mov	r0, r5
 8005c10:	e7f2      	b.n	8005bf8 <__strtok_r+0x8>
 8005c12:	42b5      	cmp	r5, r6
 8005c14:	d1f6      	bne.n	8005c04 <__strtok_r+0x14>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1ef      	bne.n	8005bfa <__strtok_r+0xa>
 8005c1a:	6014      	str	r4, [r2, #0]
 8005c1c:	7003      	strb	r3, [r0, #0]
 8005c1e:	e7eb      	b.n	8005bf8 <__strtok_r+0x8>
 8005c20:	462b      	mov	r3, r5
 8005c22:	e00d      	b.n	8005c40 <__strtok_r+0x50>
 8005c24:	b926      	cbnz	r6, 8005c30 <__strtok_r+0x40>
 8005c26:	461c      	mov	r4, r3
 8005c28:	4623      	mov	r3, r4
 8005c2a:	460f      	mov	r7, r1
 8005c2c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005c30:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c34:	42b5      	cmp	r5, r6
 8005c36:	d1f5      	bne.n	8005c24 <__strtok_r+0x34>
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	d0f1      	beq.n	8005c20 <__strtok_r+0x30>
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	7021      	strb	r1, [r4, #0]
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	e7d9      	b.n	8005bf8 <__strtok_r+0x8>

08005c44 <_strtol_l.isra.0>:
 8005c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c48:	4680      	mov	r8, r0
 8005c4a:	4689      	mov	r9, r1
 8005c4c:	4692      	mov	sl, r2
 8005c4e:	461e      	mov	r6, r3
 8005c50:	460f      	mov	r7, r1
 8005c52:	463d      	mov	r5, r7
 8005c54:	9808      	ldr	r0, [sp, #32]
 8005c56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c5a:	f001 fa27 	bl	80070ac <__locale_ctype_ptr_l>
 8005c5e:	4420      	add	r0, r4
 8005c60:	7843      	ldrb	r3, [r0, #1]
 8005c62:	f013 0308 	ands.w	r3, r3, #8
 8005c66:	d132      	bne.n	8005cce <_strtol_l.isra.0+0x8a>
 8005c68:	2c2d      	cmp	r4, #45	; 0x2d
 8005c6a:	d132      	bne.n	8005cd2 <_strtol_l.isra.0+0x8e>
 8005c6c:	787c      	ldrb	r4, [r7, #1]
 8005c6e:	1cbd      	adds	r5, r7, #2
 8005c70:	2201      	movs	r2, #1
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	d05d      	beq.n	8005d32 <_strtol_l.isra.0+0xee>
 8005c76:	2e10      	cmp	r6, #16
 8005c78:	d109      	bne.n	8005c8e <_strtol_l.isra.0+0x4a>
 8005c7a:	2c30      	cmp	r4, #48	; 0x30
 8005c7c:	d107      	bne.n	8005c8e <_strtol_l.isra.0+0x4a>
 8005c7e:	782b      	ldrb	r3, [r5, #0]
 8005c80:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c84:	2b58      	cmp	r3, #88	; 0x58
 8005c86:	d14f      	bne.n	8005d28 <_strtol_l.isra.0+0xe4>
 8005c88:	786c      	ldrb	r4, [r5, #1]
 8005c8a:	2610      	movs	r6, #16
 8005c8c:	3502      	adds	r5, #2
 8005c8e:	2a00      	cmp	r2, #0
 8005c90:	bf14      	ite	ne
 8005c92:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005c96:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005c9a:	2700      	movs	r7, #0
 8005c9c:	fbb1 fcf6 	udiv	ip, r1, r6
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005ca6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005caa:	2b09      	cmp	r3, #9
 8005cac:	d817      	bhi.n	8005cde <_strtol_l.isra.0+0x9a>
 8005cae:	461c      	mov	r4, r3
 8005cb0:	42a6      	cmp	r6, r4
 8005cb2:	dd23      	ble.n	8005cfc <_strtol_l.isra.0+0xb8>
 8005cb4:	1c7b      	adds	r3, r7, #1
 8005cb6:	d007      	beq.n	8005cc8 <_strtol_l.isra.0+0x84>
 8005cb8:	4584      	cmp	ip, r0
 8005cba:	d31c      	bcc.n	8005cf6 <_strtol_l.isra.0+0xb2>
 8005cbc:	d101      	bne.n	8005cc2 <_strtol_l.isra.0+0x7e>
 8005cbe:	45a6      	cmp	lr, r4
 8005cc0:	db19      	blt.n	8005cf6 <_strtol_l.isra.0+0xb2>
 8005cc2:	fb00 4006 	mla	r0, r0, r6, r4
 8005cc6:	2701      	movs	r7, #1
 8005cc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ccc:	e7eb      	b.n	8005ca6 <_strtol_l.isra.0+0x62>
 8005cce:	462f      	mov	r7, r5
 8005cd0:	e7bf      	b.n	8005c52 <_strtol_l.isra.0+0xe>
 8005cd2:	2c2b      	cmp	r4, #43	; 0x2b
 8005cd4:	bf04      	itt	eq
 8005cd6:	1cbd      	addeq	r5, r7, #2
 8005cd8:	787c      	ldrbeq	r4, [r7, #1]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	e7c9      	b.n	8005c72 <_strtol_l.isra.0+0x2e>
 8005cde:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005ce2:	2b19      	cmp	r3, #25
 8005ce4:	d801      	bhi.n	8005cea <_strtol_l.isra.0+0xa6>
 8005ce6:	3c37      	subs	r4, #55	; 0x37
 8005ce8:	e7e2      	b.n	8005cb0 <_strtol_l.isra.0+0x6c>
 8005cea:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005cee:	2b19      	cmp	r3, #25
 8005cf0:	d804      	bhi.n	8005cfc <_strtol_l.isra.0+0xb8>
 8005cf2:	3c57      	subs	r4, #87	; 0x57
 8005cf4:	e7dc      	b.n	8005cb0 <_strtol_l.isra.0+0x6c>
 8005cf6:	f04f 37ff 	mov.w	r7, #4294967295
 8005cfa:	e7e5      	b.n	8005cc8 <_strtol_l.isra.0+0x84>
 8005cfc:	1c7b      	adds	r3, r7, #1
 8005cfe:	d108      	bne.n	8005d12 <_strtol_l.isra.0+0xce>
 8005d00:	2322      	movs	r3, #34	; 0x22
 8005d02:	f8c8 3000 	str.w	r3, [r8]
 8005d06:	4608      	mov	r0, r1
 8005d08:	f1ba 0f00 	cmp.w	sl, #0
 8005d0c:	d107      	bne.n	8005d1e <_strtol_l.isra.0+0xda>
 8005d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d12:	b102      	cbz	r2, 8005d16 <_strtol_l.isra.0+0xd2>
 8005d14:	4240      	negs	r0, r0
 8005d16:	f1ba 0f00 	cmp.w	sl, #0
 8005d1a:	d0f8      	beq.n	8005d0e <_strtol_l.isra.0+0xca>
 8005d1c:	b10f      	cbz	r7, 8005d22 <_strtol_l.isra.0+0xde>
 8005d1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8005d22:	f8ca 9000 	str.w	r9, [sl]
 8005d26:	e7f2      	b.n	8005d0e <_strtol_l.isra.0+0xca>
 8005d28:	2430      	movs	r4, #48	; 0x30
 8005d2a:	2e00      	cmp	r6, #0
 8005d2c:	d1af      	bne.n	8005c8e <_strtol_l.isra.0+0x4a>
 8005d2e:	2608      	movs	r6, #8
 8005d30:	e7ad      	b.n	8005c8e <_strtol_l.isra.0+0x4a>
 8005d32:	2c30      	cmp	r4, #48	; 0x30
 8005d34:	d0a3      	beq.n	8005c7e <_strtol_l.isra.0+0x3a>
 8005d36:	260a      	movs	r6, #10
 8005d38:	e7a9      	b.n	8005c8e <_strtol_l.isra.0+0x4a>
	...

08005d3c <_strtol_r>:
 8005d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d3e:	4c06      	ldr	r4, [pc, #24]	; (8005d58 <_strtol_r+0x1c>)
 8005d40:	4d06      	ldr	r5, [pc, #24]	; (8005d5c <_strtol_r+0x20>)
 8005d42:	6824      	ldr	r4, [r4, #0]
 8005d44:	6a24      	ldr	r4, [r4, #32]
 8005d46:	2c00      	cmp	r4, #0
 8005d48:	bf08      	it	eq
 8005d4a:	462c      	moveq	r4, r5
 8005d4c:	9400      	str	r4, [sp, #0]
 8005d4e:	f7ff ff79 	bl	8005c44 <_strtol_l.isra.0>
 8005d52:	b003      	add	sp, #12
 8005d54:	bd30      	pop	{r4, r5, pc}
 8005d56:	bf00      	nop
 8005d58:	2000000c 	.word	0x2000000c
 8005d5c:	20000070 	.word	0x20000070

08005d60 <_vsniprintf_r>:
 8005d60:	b530      	push	{r4, r5, lr}
 8005d62:	1e14      	subs	r4, r2, #0
 8005d64:	4605      	mov	r5, r0
 8005d66:	b09b      	sub	sp, #108	; 0x6c
 8005d68:	4618      	mov	r0, r3
 8005d6a:	da05      	bge.n	8005d78 <_vsniprintf_r+0x18>
 8005d6c:	238b      	movs	r3, #139	; 0x8b
 8005d6e:	602b      	str	r3, [r5, #0]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	b01b      	add	sp, #108	; 0x6c
 8005d76:	bd30      	pop	{r4, r5, pc}
 8005d78:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005d7c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005d80:	bf14      	ite	ne
 8005d82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d86:	4623      	moveq	r3, r4
 8005d88:	9302      	str	r3, [sp, #8]
 8005d8a:	9305      	str	r3, [sp, #20]
 8005d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d90:	9100      	str	r1, [sp, #0]
 8005d92:	9104      	str	r1, [sp, #16]
 8005d94:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005d98:	4602      	mov	r2, r0
 8005d9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d9c:	4669      	mov	r1, sp
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f001 fe2c 	bl	80079fc <_svfiprintf_r>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	bfbc      	itt	lt
 8005da8:	238b      	movlt	r3, #139	; 0x8b
 8005daa:	602b      	strlt	r3, [r5, #0]
 8005dac:	2c00      	cmp	r4, #0
 8005dae:	d0e1      	beq.n	8005d74 <_vsniprintf_r+0x14>
 8005db0:	9b00      	ldr	r3, [sp, #0]
 8005db2:	2200      	movs	r2, #0
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e7dd      	b.n	8005d74 <_vsniprintf_r+0x14>

08005db8 <vsniprintf>:
 8005db8:	b507      	push	{r0, r1, r2, lr}
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	4601      	mov	r1, r0
 8005dc2:	4803      	ldr	r0, [pc, #12]	; (8005dd0 <vsniprintf+0x18>)
 8005dc4:	6800      	ldr	r0, [r0, #0]
 8005dc6:	f7ff ffcb 	bl	8005d60 <_vsniprintf_r>
 8005dca:	b003      	add	sp, #12
 8005dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dd0:	2000000c 	.word	0x2000000c

08005dd4 <quorem>:
 8005dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd8:	6903      	ldr	r3, [r0, #16]
 8005dda:	690c      	ldr	r4, [r1, #16]
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	4680      	mov	r8, r0
 8005de0:	f2c0 8082 	blt.w	8005ee8 <quorem+0x114>
 8005de4:	3c01      	subs	r4, #1
 8005de6:	f101 0714 	add.w	r7, r1, #20
 8005dea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005dee:	f100 0614 	add.w	r6, r0, #20
 8005df2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005df6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005dfa:	eb06 030c 	add.w	r3, r6, ip
 8005dfe:	3501      	adds	r5, #1
 8005e00:	eb07 090c 	add.w	r9, r7, ip
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e0a:	b395      	cbz	r5, 8005e72 <quorem+0x9e>
 8005e0c:	f04f 0a00 	mov.w	sl, #0
 8005e10:	4638      	mov	r0, r7
 8005e12:	46b6      	mov	lr, r6
 8005e14:	46d3      	mov	fp, sl
 8005e16:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e1a:	b293      	uxth	r3, r2
 8005e1c:	fb05 a303 	mla	r3, r5, r3, sl
 8005e20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	ebab 0303 	sub.w	r3, fp, r3
 8005e2a:	0c12      	lsrs	r2, r2, #16
 8005e2c:	f8de b000 	ldr.w	fp, [lr]
 8005e30:	fb05 a202 	mla	r2, r5, r2, sl
 8005e34:	fa13 f38b 	uxtah	r3, r3, fp
 8005e38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005e3c:	fa1f fb82 	uxth.w	fp, r2
 8005e40:	f8de 2000 	ldr.w	r2, [lr]
 8005e44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005e48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e52:	4581      	cmp	r9, r0
 8005e54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005e58:	f84e 3b04 	str.w	r3, [lr], #4
 8005e5c:	d2db      	bcs.n	8005e16 <quorem+0x42>
 8005e5e:	f856 300c 	ldr.w	r3, [r6, ip]
 8005e62:	b933      	cbnz	r3, 8005e72 <quorem+0x9e>
 8005e64:	9b01      	ldr	r3, [sp, #4]
 8005e66:	3b04      	subs	r3, #4
 8005e68:	429e      	cmp	r6, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	d330      	bcc.n	8005ed0 <quorem+0xfc>
 8005e6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e72:	4640      	mov	r0, r8
 8005e74:	f001 fbae 	bl	80075d4 <__mcmp>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	db25      	blt.n	8005ec8 <quorem+0xf4>
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f04f 0c00 	mov.w	ip, #0
 8005e84:	f857 2b04 	ldr.w	r2, [r7], #4
 8005e88:	f8d0 e000 	ldr.w	lr, [r0]
 8005e8c:	b293      	uxth	r3, r2
 8005e8e:	ebac 0303 	sub.w	r3, ip, r3
 8005e92:	0c12      	lsrs	r2, r2, #16
 8005e94:	fa13 f38e 	uxtah	r3, r3, lr
 8005e98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ea6:	45b9      	cmp	r9, r7
 8005ea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005eac:	f840 3b04 	str.w	r3, [r0], #4
 8005eb0:	d2e8      	bcs.n	8005e84 <quorem+0xb0>
 8005eb2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005eb6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005eba:	b92a      	cbnz	r2, 8005ec8 <quorem+0xf4>
 8005ebc:	3b04      	subs	r3, #4
 8005ebe:	429e      	cmp	r6, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	d30b      	bcc.n	8005edc <quorem+0x108>
 8005ec4:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ec8:	4628      	mov	r0, r5
 8005eca:	b003      	add	sp, #12
 8005ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed0:	6812      	ldr	r2, [r2, #0]
 8005ed2:	3b04      	subs	r3, #4
 8005ed4:	2a00      	cmp	r2, #0
 8005ed6:	d1ca      	bne.n	8005e6e <quorem+0x9a>
 8005ed8:	3c01      	subs	r4, #1
 8005eda:	e7c5      	b.n	8005e68 <quorem+0x94>
 8005edc:	6812      	ldr	r2, [r2, #0]
 8005ede:	3b04      	subs	r3, #4
 8005ee0:	2a00      	cmp	r2, #0
 8005ee2:	d1ef      	bne.n	8005ec4 <quorem+0xf0>
 8005ee4:	3c01      	subs	r4, #1
 8005ee6:	e7ea      	b.n	8005ebe <quorem+0xea>
 8005ee8:	2000      	movs	r0, #0
 8005eea:	e7ee      	b.n	8005eca <quorem+0xf6>
 8005eec:	0000      	movs	r0, r0
	...

08005ef0 <_dtoa_r>:
 8005ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef4:	ec57 6b10 	vmov	r6, r7, d0
 8005ef8:	b097      	sub	sp, #92	; 0x5c
 8005efa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005efc:	9106      	str	r1, [sp, #24]
 8005efe:	4604      	mov	r4, r0
 8005f00:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f02:	9312      	str	r3, [sp, #72]	; 0x48
 8005f04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f08:	e9cd 6700 	strd	r6, r7, [sp]
 8005f0c:	b93d      	cbnz	r5, 8005f1e <_dtoa_r+0x2e>
 8005f0e:	2010      	movs	r0, #16
 8005f10:	f7fe f89c 	bl	800404c <malloc>
 8005f14:	6260      	str	r0, [r4, #36]	; 0x24
 8005f16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f1a:	6005      	str	r5, [r0, #0]
 8005f1c:	60c5      	str	r5, [r0, #12]
 8005f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	b151      	cbz	r1, 8005f3a <_dtoa_r+0x4a>
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	604a      	str	r2, [r1, #4]
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4093      	lsls	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f001 f931 	bl	8007196 <_Bfree>
 8005f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	1e3b      	subs	r3, r7, #0
 8005f3c:	bfbb      	ittet	lt
 8005f3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f42:	9301      	strlt	r3, [sp, #4]
 8005f44:	2300      	movge	r3, #0
 8005f46:	2201      	movlt	r2, #1
 8005f48:	bfac      	ite	ge
 8005f4a:	f8c8 3000 	strge.w	r3, [r8]
 8005f4e:	f8c8 2000 	strlt.w	r2, [r8]
 8005f52:	4baf      	ldr	r3, [pc, #700]	; (8006210 <_dtoa_r+0x320>)
 8005f54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005f58:	ea33 0308 	bics.w	r3, r3, r8
 8005f5c:	d114      	bne.n	8005f88 <_dtoa_r+0x98>
 8005f5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f60:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	9b00      	ldr	r3, [sp, #0]
 8005f68:	b923      	cbnz	r3, 8005f74 <_dtoa_r+0x84>
 8005f6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	f000 8542 	beq.w	80069f8 <_dtoa_r+0xb08>
 8005f74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006224 <_dtoa_r+0x334>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 8544 	beq.w	8006a08 <_dtoa_r+0xb18>
 8005f80:	f10b 0303 	add.w	r3, fp, #3
 8005f84:	f000 bd3e 	b.w	8006a04 <_dtoa_r+0xb14>
 8005f88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2300      	movs	r3, #0
 8005f90:	4630      	mov	r0, r6
 8005f92:	4639      	mov	r1, r7
 8005f94:	f7fa fda0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f98:	4681      	mov	r9, r0
 8005f9a:	b168      	cbz	r0, 8005fb8 <_dtoa_r+0xc8>
 8005f9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8524 	beq.w	80069f2 <_dtoa_r+0xb02>
 8005faa:	4b9a      	ldr	r3, [pc, #616]	; (8006214 <_dtoa_r+0x324>)
 8005fac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fae:	f103 3bff 	add.w	fp, r3, #4294967295
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	f000 bd28 	b.w	8006a08 <_dtoa_r+0xb18>
 8005fb8:	aa14      	add	r2, sp, #80	; 0x50
 8005fba:	a915      	add	r1, sp, #84	; 0x54
 8005fbc:	ec47 6b10 	vmov	d0, r6, r7
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f001 fbf5 	bl	80077b0 <__d2b>
 8005fc6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005fca:	9004      	str	r0, [sp, #16]
 8005fcc:	2d00      	cmp	r5, #0
 8005fce:	d07c      	beq.n	80060ca <_dtoa_r+0x1da>
 8005fd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005fd4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005fd8:	46b2      	mov	sl, r6
 8005fda:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005fde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005fe2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4b8b      	ldr	r3, [pc, #556]	; (8006218 <_dtoa_r+0x328>)
 8005fea:	4650      	mov	r0, sl
 8005fec:	4659      	mov	r1, fp
 8005fee:	f7fa f953 	bl	8000298 <__aeabi_dsub>
 8005ff2:	a381      	add	r3, pc, #516	; (adr r3, 80061f8 <_dtoa_r+0x308>)
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f7fa fb06 	bl	8000608 <__aeabi_dmul>
 8005ffc:	a380      	add	r3, pc, #512	; (adr r3, 8006200 <_dtoa_r+0x310>)
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f7fa f94b 	bl	800029c <__adddf3>
 8006006:	4606      	mov	r6, r0
 8006008:	4628      	mov	r0, r5
 800600a:	460f      	mov	r7, r1
 800600c:	f7fa fa92 	bl	8000534 <__aeabi_i2d>
 8006010:	a37d      	add	r3, pc, #500	; (adr r3, 8006208 <_dtoa_r+0x318>)
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f7fa faf7 	bl	8000608 <__aeabi_dmul>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4630      	mov	r0, r6
 8006020:	4639      	mov	r1, r7
 8006022:	f7fa f93b 	bl	800029c <__adddf3>
 8006026:	4606      	mov	r6, r0
 8006028:	460f      	mov	r7, r1
 800602a:	f7fa fd9d 	bl	8000b68 <__aeabi_d2iz>
 800602e:	2200      	movs	r2, #0
 8006030:	4682      	mov	sl, r0
 8006032:	2300      	movs	r3, #0
 8006034:	4630      	mov	r0, r6
 8006036:	4639      	mov	r1, r7
 8006038:	f7fa fd58 	bl	8000aec <__aeabi_dcmplt>
 800603c:	b148      	cbz	r0, 8006052 <_dtoa_r+0x162>
 800603e:	4650      	mov	r0, sl
 8006040:	f7fa fa78 	bl	8000534 <__aeabi_i2d>
 8006044:	4632      	mov	r2, r6
 8006046:	463b      	mov	r3, r7
 8006048:	f7fa fd46 	bl	8000ad8 <__aeabi_dcmpeq>
 800604c:	b908      	cbnz	r0, 8006052 <_dtoa_r+0x162>
 800604e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006052:	f1ba 0f16 	cmp.w	sl, #22
 8006056:	d859      	bhi.n	800610c <_dtoa_r+0x21c>
 8006058:	4970      	ldr	r1, [pc, #448]	; (800621c <_dtoa_r+0x32c>)
 800605a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800605e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006062:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006066:	f7fa fd5f 	bl	8000b28 <__aeabi_dcmpgt>
 800606a:	2800      	cmp	r0, #0
 800606c:	d050      	beq.n	8006110 <_dtoa_r+0x220>
 800606e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006072:	2300      	movs	r3, #0
 8006074:	930f      	str	r3, [sp, #60]	; 0x3c
 8006076:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006078:	1b5d      	subs	r5, r3, r5
 800607a:	f1b5 0801 	subs.w	r8, r5, #1
 800607e:	bf49      	itett	mi
 8006080:	f1c5 0301 	rsbmi	r3, r5, #1
 8006084:	2300      	movpl	r3, #0
 8006086:	9305      	strmi	r3, [sp, #20]
 8006088:	f04f 0800 	movmi.w	r8, #0
 800608c:	bf58      	it	pl
 800608e:	9305      	strpl	r3, [sp, #20]
 8006090:	f1ba 0f00 	cmp.w	sl, #0
 8006094:	db3e      	blt.n	8006114 <_dtoa_r+0x224>
 8006096:	2300      	movs	r3, #0
 8006098:	44d0      	add	r8, sl
 800609a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800609e:	9307      	str	r3, [sp, #28]
 80060a0:	9b06      	ldr	r3, [sp, #24]
 80060a2:	2b09      	cmp	r3, #9
 80060a4:	f200 8090 	bhi.w	80061c8 <_dtoa_r+0x2d8>
 80060a8:	2b05      	cmp	r3, #5
 80060aa:	bfc4      	itt	gt
 80060ac:	3b04      	subgt	r3, #4
 80060ae:	9306      	strgt	r3, [sp, #24]
 80060b0:	9b06      	ldr	r3, [sp, #24]
 80060b2:	f1a3 0302 	sub.w	r3, r3, #2
 80060b6:	bfcc      	ite	gt
 80060b8:	2500      	movgt	r5, #0
 80060ba:	2501      	movle	r5, #1
 80060bc:	2b03      	cmp	r3, #3
 80060be:	f200 808f 	bhi.w	80061e0 <_dtoa_r+0x2f0>
 80060c2:	e8df f003 	tbb	[pc, r3]
 80060c6:	7f7d      	.short	0x7f7d
 80060c8:	7131      	.short	0x7131
 80060ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80060ce:	441d      	add	r5, r3
 80060d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80060d4:	2820      	cmp	r0, #32
 80060d6:	dd13      	ble.n	8006100 <_dtoa_r+0x210>
 80060d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80060dc:	9b00      	ldr	r3, [sp, #0]
 80060de:	fa08 f800 	lsl.w	r8, r8, r0
 80060e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80060e6:	fa23 f000 	lsr.w	r0, r3, r0
 80060ea:	ea48 0000 	orr.w	r0, r8, r0
 80060ee:	f7fa fa11 	bl	8000514 <__aeabi_ui2d>
 80060f2:	2301      	movs	r3, #1
 80060f4:	4682      	mov	sl, r0
 80060f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80060fa:	3d01      	subs	r5, #1
 80060fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80060fe:	e772      	b.n	8005fe6 <_dtoa_r+0xf6>
 8006100:	9b00      	ldr	r3, [sp, #0]
 8006102:	f1c0 0020 	rsb	r0, r0, #32
 8006106:	fa03 f000 	lsl.w	r0, r3, r0
 800610a:	e7f0      	b.n	80060ee <_dtoa_r+0x1fe>
 800610c:	2301      	movs	r3, #1
 800610e:	e7b1      	b.n	8006074 <_dtoa_r+0x184>
 8006110:	900f      	str	r0, [sp, #60]	; 0x3c
 8006112:	e7b0      	b.n	8006076 <_dtoa_r+0x186>
 8006114:	9b05      	ldr	r3, [sp, #20]
 8006116:	eba3 030a 	sub.w	r3, r3, sl
 800611a:	9305      	str	r3, [sp, #20]
 800611c:	f1ca 0300 	rsb	r3, sl, #0
 8006120:	9307      	str	r3, [sp, #28]
 8006122:	2300      	movs	r3, #0
 8006124:	930e      	str	r3, [sp, #56]	; 0x38
 8006126:	e7bb      	b.n	80060a0 <_dtoa_r+0x1b0>
 8006128:	2301      	movs	r3, #1
 800612a:	930a      	str	r3, [sp, #40]	; 0x28
 800612c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800612e:	2b00      	cmp	r3, #0
 8006130:	dd59      	ble.n	80061e6 <_dtoa_r+0x2f6>
 8006132:	9302      	str	r3, [sp, #8]
 8006134:	4699      	mov	r9, r3
 8006136:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006138:	2200      	movs	r2, #0
 800613a:	6072      	str	r2, [r6, #4]
 800613c:	2204      	movs	r2, #4
 800613e:	f102 0014 	add.w	r0, r2, #20
 8006142:	4298      	cmp	r0, r3
 8006144:	6871      	ldr	r1, [r6, #4]
 8006146:	d953      	bls.n	80061f0 <_dtoa_r+0x300>
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fff0 	bl	800712e <_Balloc>
 800614e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006150:	6030      	str	r0, [r6, #0]
 8006152:	f1b9 0f0e 	cmp.w	r9, #14
 8006156:	f8d3 b000 	ldr.w	fp, [r3]
 800615a:	f200 80e6 	bhi.w	800632a <_dtoa_r+0x43a>
 800615e:	2d00      	cmp	r5, #0
 8006160:	f000 80e3 	beq.w	800632a <_dtoa_r+0x43a>
 8006164:	ed9d 7b00 	vldr	d7, [sp]
 8006168:	f1ba 0f00 	cmp.w	sl, #0
 800616c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006170:	dd74      	ble.n	800625c <_dtoa_r+0x36c>
 8006172:	4a2a      	ldr	r2, [pc, #168]	; (800621c <_dtoa_r+0x32c>)
 8006174:	f00a 030f 	and.w	r3, sl, #15
 8006178:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800617c:	ed93 7b00 	vldr	d7, [r3]
 8006180:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006184:	06f0      	lsls	r0, r6, #27
 8006186:	ed8d 7b08 	vstr	d7, [sp, #32]
 800618a:	d565      	bpl.n	8006258 <_dtoa_r+0x368>
 800618c:	4b24      	ldr	r3, [pc, #144]	; (8006220 <_dtoa_r+0x330>)
 800618e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006192:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006196:	f7fa fb61 	bl	800085c <__aeabi_ddiv>
 800619a:	e9cd 0100 	strd	r0, r1, [sp]
 800619e:	f006 060f 	and.w	r6, r6, #15
 80061a2:	2503      	movs	r5, #3
 80061a4:	4f1e      	ldr	r7, [pc, #120]	; (8006220 <_dtoa_r+0x330>)
 80061a6:	e04c      	b.n	8006242 <_dtoa_r+0x352>
 80061a8:	2301      	movs	r3, #1
 80061aa:	930a      	str	r3, [sp, #40]	; 0x28
 80061ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061ae:	4453      	add	r3, sl
 80061b0:	f103 0901 	add.w	r9, r3, #1
 80061b4:	9302      	str	r3, [sp, #8]
 80061b6:	464b      	mov	r3, r9
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	bfb8      	it	lt
 80061bc:	2301      	movlt	r3, #1
 80061be:	e7ba      	b.n	8006136 <_dtoa_r+0x246>
 80061c0:	2300      	movs	r3, #0
 80061c2:	e7b2      	b.n	800612a <_dtoa_r+0x23a>
 80061c4:	2300      	movs	r3, #0
 80061c6:	e7f0      	b.n	80061aa <_dtoa_r+0x2ba>
 80061c8:	2501      	movs	r5, #1
 80061ca:	2300      	movs	r3, #0
 80061cc:	9306      	str	r3, [sp, #24]
 80061ce:	950a      	str	r5, [sp, #40]	; 0x28
 80061d0:	f04f 33ff 	mov.w	r3, #4294967295
 80061d4:	9302      	str	r3, [sp, #8]
 80061d6:	4699      	mov	r9, r3
 80061d8:	2200      	movs	r2, #0
 80061da:	2312      	movs	r3, #18
 80061dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80061de:	e7aa      	b.n	8006136 <_dtoa_r+0x246>
 80061e0:	2301      	movs	r3, #1
 80061e2:	930a      	str	r3, [sp, #40]	; 0x28
 80061e4:	e7f4      	b.n	80061d0 <_dtoa_r+0x2e0>
 80061e6:	2301      	movs	r3, #1
 80061e8:	9302      	str	r3, [sp, #8]
 80061ea:	4699      	mov	r9, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	e7f5      	b.n	80061dc <_dtoa_r+0x2ec>
 80061f0:	3101      	adds	r1, #1
 80061f2:	6071      	str	r1, [r6, #4]
 80061f4:	0052      	lsls	r2, r2, #1
 80061f6:	e7a2      	b.n	800613e <_dtoa_r+0x24e>
 80061f8:	636f4361 	.word	0x636f4361
 80061fc:	3fd287a7 	.word	0x3fd287a7
 8006200:	8b60c8b3 	.word	0x8b60c8b3
 8006204:	3fc68a28 	.word	0x3fc68a28
 8006208:	509f79fb 	.word	0x509f79fb
 800620c:	3fd34413 	.word	0x3fd34413
 8006210:	7ff00000 	.word	0x7ff00000
 8006214:	08008774 	.word	0x08008774
 8006218:	3ff80000 	.word	0x3ff80000
 800621c:	08008678 	.word	0x08008678
 8006220:	08008650 	.word	0x08008650
 8006224:	08008641 	.word	0x08008641
 8006228:	07f1      	lsls	r1, r6, #31
 800622a:	d508      	bpl.n	800623e <_dtoa_r+0x34e>
 800622c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006234:	f7fa f9e8 	bl	8000608 <__aeabi_dmul>
 8006238:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800623c:	3501      	adds	r5, #1
 800623e:	1076      	asrs	r6, r6, #1
 8006240:	3708      	adds	r7, #8
 8006242:	2e00      	cmp	r6, #0
 8006244:	d1f0      	bne.n	8006228 <_dtoa_r+0x338>
 8006246:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800624a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800624e:	f7fa fb05 	bl	800085c <__aeabi_ddiv>
 8006252:	e9cd 0100 	strd	r0, r1, [sp]
 8006256:	e01a      	b.n	800628e <_dtoa_r+0x39e>
 8006258:	2502      	movs	r5, #2
 800625a:	e7a3      	b.n	80061a4 <_dtoa_r+0x2b4>
 800625c:	f000 80a0 	beq.w	80063a0 <_dtoa_r+0x4b0>
 8006260:	f1ca 0600 	rsb	r6, sl, #0
 8006264:	4b9f      	ldr	r3, [pc, #636]	; (80064e4 <_dtoa_r+0x5f4>)
 8006266:	4fa0      	ldr	r7, [pc, #640]	; (80064e8 <_dtoa_r+0x5f8>)
 8006268:	f006 020f 	and.w	r2, r6, #15
 800626c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006278:	f7fa f9c6 	bl	8000608 <__aeabi_dmul>
 800627c:	e9cd 0100 	strd	r0, r1, [sp]
 8006280:	1136      	asrs	r6, r6, #4
 8006282:	2300      	movs	r3, #0
 8006284:	2502      	movs	r5, #2
 8006286:	2e00      	cmp	r6, #0
 8006288:	d17f      	bne.n	800638a <_dtoa_r+0x49a>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e1      	bne.n	8006252 <_dtoa_r+0x362>
 800628e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 8087 	beq.w	80063a4 <_dtoa_r+0x4b4>
 8006296:	e9dd 6700 	ldrd	r6, r7, [sp]
 800629a:	2200      	movs	r2, #0
 800629c:	4b93      	ldr	r3, [pc, #588]	; (80064ec <_dtoa_r+0x5fc>)
 800629e:	4630      	mov	r0, r6
 80062a0:	4639      	mov	r1, r7
 80062a2:	f7fa fc23 	bl	8000aec <__aeabi_dcmplt>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d07c      	beq.n	80063a4 <_dtoa_r+0x4b4>
 80062aa:	f1b9 0f00 	cmp.w	r9, #0
 80062ae:	d079      	beq.n	80063a4 <_dtoa_r+0x4b4>
 80062b0:	9b02      	ldr	r3, [sp, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	dd35      	ble.n	8006322 <_dtoa_r+0x432>
 80062b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80062ba:	9308      	str	r3, [sp, #32]
 80062bc:	4639      	mov	r1, r7
 80062be:	2200      	movs	r2, #0
 80062c0:	4b8b      	ldr	r3, [pc, #556]	; (80064f0 <_dtoa_r+0x600>)
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7fa f9a0 	bl	8000608 <__aeabi_dmul>
 80062c8:	e9cd 0100 	strd	r0, r1, [sp]
 80062cc:	9f02      	ldr	r7, [sp, #8]
 80062ce:	3501      	adds	r5, #1
 80062d0:	4628      	mov	r0, r5
 80062d2:	f7fa f92f 	bl	8000534 <__aeabi_i2d>
 80062d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062da:	f7fa f995 	bl	8000608 <__aeabi_dmul>
 80062de:	2200      	movs	r2, #0
 80062e0:	4b84      	ldr	r3, [pc, #528]	; (80064f4 <_dtoa_r+0x604>)
 80062e2:	f7f9 ffdb 	bl	800029c <__adddf3>
 80062e6:	4605      	mov	r5, r0
 80062e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80062ec:	2f00      	cmp	r7, #0
 80062ee:	d15d      	bne.n	80063ac <_dtoa_r+0x4bc>
 80062f0:	2200      	movs	r2, #0
 80062f2:	4b81      	ldr	r3, [pc, #516]	; (80064f8 <_dtoa_r+0x608>)
 80062f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062f8:	f7f9 ffce 	bl	8000298 <__aeabi_dsub>
 80062fc:	462a      	mov	r2, r5
 80062fe:	4633      	mov	r3, r6
 8006300:	e9cd 0100 	strd	r0, r1, [sp]
 8006304:	f7fa fc10 	bl	8000b28 <__aeabi_dcmpgt>
 8006308:	2800      	cmp	r0, #0
 800630a:	f040 8288 	bne.w	800681e <_dtoa_r+0x92e>
 800630e:	462a      	mov	r2, r5
 8006310:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006314:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006318:	f7fa fbe8 	bl	8000aec <__aeabi_dcmplt>
 800631c:	2800      	cmp	r0, #0
 800631e:	f040 827c 	bne.w	800681a <_dtoa_r+0x92a>
 8006322:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006326:	e9cd 2300 	strd	r2, r3, [sp]
 800632a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800632c:	2b00      	cmp	r3, #0
 800632e:	f2c0 8150 	blt.w	80065d2 <_dtoa_r+0x6e2>
 8006332:	f1ba 0f0e 	cmp.w	sl, #14
 8006336:	f300 814c 	bgt.w	80065d2 <_dtoa_r+0x6e2>
 800633a:	4b6a      	ldr	r3, [pc, #424]	; (80064e4 <_dtoa_r+0x5f4>)
 800633c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006340:	ed93 7b00 	vldr	d7, [r3]
 8006344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	ed8d 7b02 	vstr	d7, [sp, #8]
 800634c:	f280 80d8 	bge.w	8006500 <_dtoa_r+0x610>
 8006350:	f1b9 0f00 	cmp.w	r9, #0
 8006354:	f300 80d4 	bgt.w	8006500 <_dtoa_r+0x610>
 8006358:	f040 825e 	bne.w	8006818 <_dtoa_r+0x928>
 800635c:	2200      	movs	r2, #0
 800635e:	4b66      	ldr	r3, [pc, #408]	; (80064f8 <_dtoa_r+0x608>)
 8006360:	ec51 0b17 	vmov	r0, r1, d7
 8006364:	f7fa f950 	bl	8000608 <__aeabi_dmul>
 8006368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800636c:	f7fa fbd2 	bl	8000b14 <__aeabi_dcmpge>
 8006370:	464f      	mov	r7, r9
 8006372:	464e      	mov	r6, r9
 8006374:	2800      	cmp	r0, #0
 8006376:	f040 8234 	bne.w	80067e2 <_dtoa_r+0x8f2>
 800637a:	2331      	movs	r3, #49	; 0x31
 800637c:	f10b 0501 	add.w	r5, fp, #1
 8006380:	f88b 3000 	strb.w	r3, [fp]
 8006384:	f10a 0a01 	add.w	sl, sl, #1
 8006388:	e22f      	b.n	80067ea <_dtoa_r+0x8fa>
 800638a:	07f2      	lsls	r2, r6, #31
 800638c:	d505      	bpl.n	800639a <_dtoa_r+0x4aa>
 800638e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006392:	f7fa f939 	bl	8000608 <__aeabi_dmul>
 8006396:	3501      	adds	r5, #1
 8006398:	2301      	movs	r3, #1
 800639a:	1076      	asrs	r6, r6, #1
 800639c:	3708      	adds	r7, #8
 800639e:	e772      	b.n	8006286 <_dtoa_r+0x396>
 80063a0:	2502      	movs	r5, #2
 80063a2:	e774      	b.n	800628e <_dtoa_r+0x39e>
 80063a4:	f8cd a020 	str.w	sl, [sp, #32]
 80063a8:	464f      	mov	r7, r9
 80063aa:	e791      	b.n	80062d0 <_dtoa_r+0x3e0>
 80063ac:	4b4d      	ldr	r3, [pc, #308]	; (80064e4 <_dtoa_r+0x5f4>)
 80063ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80063b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80063b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d047      	beq.n	800644c <_dtoa_r+0x55c>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	2000      	movs	r0, #0
 80063c2:	494e      	ldr	r1, [pc, #312]	; (80064fc <_dtoa_r+0x60c>)
 80063c4:	f7fa fa4a 	bl	800085c <__aeabi_ddiv>
 80063c8:	462a      	mov	r2, r5
 80063ca:	4633      	mov	r3, r6
 80063cc:	f7f9 ff64 	bl	8000298 <__aeabi_dsub>
 80063d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80063d4:	465d      	mov	r5, fp
 80063d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063da:	f7fa fbc5 	bl	8000b68 <__aeabi_d2iz>
 80063de:	4606      	mov	r6, r0
 80063e0:	f7fa f8a8 	bl	8000534 <__aeabi_i2d>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063ec:	f7f9 ff54 	bl	8000298 <__aeabi_dsub>
 80063f0:	3630      	adds	r6, #48	; 0x30
 80063f2:	f805 6b01 	strb.w	r6, [r5], #1
 80063f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063fa:	e9cd 0100 	strd	r0, r1, [sp]
 80063fe:	f7fa fb75 	bl	8000aec <__aeabi_dcmplt>
 8006402:	2800      	cmp	r0, #0
 8006404:	d163      	bne.n	80064ce <_dtoa_r+0x5de>
 8006406:	e9dd 2300 	ldrd	r2, r3, [sp]
 800640a:	2000      	movs	r0, #0
 800640c:	4937      	ldr	r1, [pc, #220]	; (80064ec <_dtoa_r+0x5fc>)
 800640e:	f7f9 ff43 	bl	8000298 <__aeabi_dsub>
 8006412:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006416:	f7fa fb69 	bl	8000aec <__aeabi_dcmplt>
 800641a:	2800      	cmp	r0, #0
 800641c:	f040 80b7 	bne.w	800658e <_dtoa_r+0x69e>
 8006420:	eba5 030b 	sub.w	r3, r5, fp
 8006424:	429f      	cmp	r7, r3
 8006426:	f77f af7c 	ble.w	8006322 <_dtoa_r+0x432>
 800642a:	2200      	movs	r2, #0
 800642c:	4b30      	ldr	r3, [pc, #192]	; (80064f0 <_dtoa_r+0x600>)
 800642e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006432:	f7fa f8e9 	bl	8000608 <__aeabi_dmul>
 8006436:	2200      	movs	r2, #0
 8006438:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800643c:	4b2c      	ldr	r3, [pc, #176]	; (80064f0 <_dtoa_r+0x600>)
 800643e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006442:	f7fa f8e1 	bl	8000608 <__aeabi_dmul>
 8006446:	e9cd 0100 	strd	r0, r1, [sp]
 800644a:	e7c4      	b.n	80063d6 <_dtoa_r+0x4e6>
 800644c:	462a      	mov	r2, r5
 800644e:	4633      	mov	r3, r6
 8006450:	f7fa f8da 	bl	8000608 <__aeabi_dmul>
 8006454:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006458:	eb0b 0507 	add.w	r5, fp, r7
 800645c:	465e      	mov	r6, fp
 800645e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006462:	f7fa fb81 	bl	8000b68 <__aeabi_d2iz>
 8006466:	4607      	mov	r7, r0
 8006468:	f7fa f864 	bl	8000534 <__aeabi_i2d>
 800646c:	3730      	adds	r7, #48	; 0x30
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006476:	f7f9 ff0f 	bl	8000298 <__aeabi_dsub>
 800647a:	f806 7b01 	strb.w	r7, [r6], #1
 800647e:	42ae      	cmp	r6, r5
 8006480:	e9cd 0100 	strd	r0, r1, [sp]
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	d126      	bne.n	80064d8 <_dtoa_r+0x5e8>
 800648a:	4b1c      	ldr	r3, [pc, #112]	; (80064fc <_dtoa_r+0x60c>)
 800648c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006490:	f7f9 ff04 	bl	800029c <__adddf3>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800649c:	f7fa fb44 	bl	8000b28 <__aeabi_dcmpgt>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d174      	bne.n	800658e <_dtoa_r+0x69e>
 80064a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80064a8:	2000      	movs	r0, #0
 80064aa:	4914      	ldr	r1, [pc, #80]	; (80064fc <_dtoa_r+0x60c>)
 80064ac:	f7f9 fef4 	bl	8000298 <__aeabi_dsub>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064b8:	f7fa fb18 	bl	8000aec <__aeabi_dcmplt>
 80064bc:	2800      	cmp	r0, #0
 80064be:	f43f af30 	beq.w	8006322 <_dtoa_r+0x432>
 80064c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064c6:	2b30      	cmp	r3, #48	; 0x30
 80064c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80064cc:	d002      	beq.n	80064d4 <_dtoa_r+0x5e4>
 80064ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80064d2:	e04a      	b.n	800656a <_dtoa_r+0x67a>
 80064d4:	4615      	mov	r5, r2
 80064d6:	e7f4      	b.n	80064c2 <_dtoa_r+0x5d2>
 80064d8:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <_dtoa_r+0x600>)
 80064da:	f7fa f895 	bl	8000608 <__aeabi_dmul>
 80064de:	e9cd 0100 	strd	r0, r1, [sp]
 80064e2:	e7bc      	b.n	800645e <_dtoa_r+0x56e>
 80064e4:	08008678 	.word	0x08008678
 80064e8:	08008650 	.word	0x08008650
 80064ec:	3ff00000 	.word	0x3ff00000
 80064f0:	40240000 	.word	0x40240000
 80064f4:	401c0000 	.word	0x401c0000
 80064f8:	40140000 	.word	0x40140000
 80064fc:	3fe00000 	.word	0x3fe00000
 8006500:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006504:	465d      	mov	r5, fp
 8006506:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800650a:	4630      	mov	r0, r6
 800650c:	4639      	mov	r1, r7
 800650e:	f7fa f9a5 	bl	800085c <__aeabi_ddiv>
 8006512:	f7fa fb29 	bl	8000b68 <__aeabi_d2iz>
 8006516:	4680      	mov	r8, r0
 8006518:	f7fa f80c 	bl	8000534 <__aeabi_i2d>
 800651c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006520:	f7fa f872 	bl	8000608 <__aeabi_dmul>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006530:	f7f9 feb2 	bl	8000298 <__aeabi_dsub>
 8006534:	f805 6b01 	strb.w	r6, [r5], #1
 8006538:	eba5 060b 	sub.w	r6, r5, fp
 800653c:	45b1      	cmp	r9, r6
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	d139      	bne.n	80065b8 <_dtoa_r+0x6c8>
 8006544:	f7f9 feaa 	bl	800029c <__adddf3>
 8006548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800654c:	4606      	mov	r6, r0
 800654e:	460f      	mov	r7, r1
 8006550:	f7fa faea 	bl	8000b28 <__aeabi_dcmpgt>
 8006554:	b9c8      	cbnz	r0, 800658a <_dtoa_r+0x69a>
 8006556:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800655a:	4630      	mov	r0, r6
 800655c:	4639      	mov	r1, r7
 800655e:	f7fa fabb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006562:	b110      	cbz	r0, 800656a <_dtoa_r+0x67a>
 8006564:	f018 0f01 	tst.w	r8, #1
 8006568:	d10f      	bne.n	800658a <_dtoa_r+0x69a>
 800656a:	9904      	ldr	r1, [sp, #16]
 800656c:	4620      	mov	r0, r4
 800656e:	f000 fe12 	bl	8007196 <_Bfree>
 8006572:	2300      	movs	r3, #0
 8006574:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006576:	702b      	strb	r3, [r5, #0]
 8006578:	f10a 0301 	add.w	r3, sl, #1
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8241 	beq.w	8006a08 <_dtoa_r+0xb18>
 8006586:	601d      	str	r5, [r3, #0]
 8006588:	e23e      	b.n	8006a08 <_dtoa_r+0xb18>
 800658a:	f8cd a020 	str.w	sl, [sp, #32]
 800658e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006592:	2a39      	cmp	r2, #57	; 0x39
 8006594:	f105 33ff 	add.w	r3, r5, #4294967295
 8006598:	d108      	bne.n	80065ac <_dtoa_r+0x6bc>
 800659a:	459b      	cmp	fp, r3
 800659c:	d10a      	bne.n	80065b4 <_dtoa_r+0x6c4>
 800659e:	9b08      	ldr	r3, [sp, #32]
 80065a0:	3301      	adds	r3, #1
 80065a2:	9308      	str	r3, [sp, #32]
 80065a4:	2330      	movs	r3, #48	; 0x30
 80065a6:	f88b 3000 	strb.w	r3, [fp]
 80065aa:	465b      	mov	r3, fp
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	3201      	adds	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	e78c      	b.n	80064ce <_dtoa_r+0x5de>
 80065b4:	461d      	mov	r5, r3
 80065b6:	e7ea      	b.n	800658e <_dtoa_r+0x69e>
 80065b8:	2200      	movs	r2, #0
 80065ba:	4b9b      	ldr	r3, [pc, #620]	; (8006828 <_dtoa_r+0x938>)
 80065bc:	f7fa f824 	bl	8000608 <__aeabi_dmul>
 80065c0:	2200      	movs	r2, #0
 80065c2:	2300      	movs	r3, #0
 80065c4:	4606      	mov	r6, r0
 80065c6:	460f      	mov	r7, r1
 80065c8:	f7fa fa86 	bl	8000ad8 <__aeabi_dcmpeq>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d09a      	beq.n	8006506 <_dtoa_r+0x616>
 80065d0:	e7cb      	b.n	800656a <_dtoa_r+0x67a>
 80065d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065d4:	2a00      	cmp	r2, #0
 80065d6:	f000 808b 	beq.w	80066f0 <_dtoa_r+0x800>
 80065da:	9a06      	ldr	r2, [sp, #24]
 80065dc:	2a01      	cmp	r2, #1
 80065de:	dc6e      	bgt.n	80066be <_dtoa_r+0x7ce>
 80065e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80065e2:	2a00      	cmp	r2, #0
 80065e4:	d067      	beq.n	80066b6 <_dtoa_r+0x7c6>
 80065e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065ea:	9f07      	ldr	r7, [sp, #28]
 80065ec:	9d05      	ldr	r5, [sp, #20]
 80065ee:	9a05      	ldr	r2, [sp, #20]
 80065f0:	2101      	movs	r1, #1
 80065f2:	441a      	add	r2, r3
 80065f4:	4620      	mov	r0, r4
 80065f6:	9205      	str	r2, [sp, #20]
 80065f8:	4498      	add	r8, r3
 80065fa:	f000 feaa 	bl	8007352 <__i2b>
 80065fe:	4606      	mov	r6, r0
 8006600:	2d00      	cmp	r5, #0
 8006602:	dd0c      	ble.n	800661e <_dtoa_r+0x72e>
 8006604:	f1b8 0f00 	cmp.w	r8, #0
 8006608:	dd09      	ble.n	800661e <_dtoa_r+0x72e>
 800660a:	4545      	cmp	r5, r8
 800660c:	9a05      	ldr	r2, [sp, #20]
 800660e:	462b      	mov	r3, r5
 8006610:	bfa8      	it	ge
 8006612:	4643      	movge	r3, r8
 8006614:	1ad2      	subs	r2, r2, r3
 8006616:	9205      	str	r2, [sp, #20]
 8006618:	1aed      	subs	r5, r5, r3
 800661a:	eba8 0803 	sub.w	r8, r8, r3
 800661e:	9b07      	ldr	r3, [sp, #28]
 8006620:	b1eb      	cbz	r3, 800665e <_dtoa_r+0x76e>
 8006622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006624:	2b00      	cmp	r3, #0
 8006626:	d067      	beq.n	80066f8 <_dtoa_r+0x808>
 8006628:	b18f      	cbz	r7, 800664e <_dtoa_r+0x75e>
 800662a:	4631      	mov	r1, r6
 800662c:	463a      	mov	r2, r7
 800662e:	4620      	mov	r0, r4
 8006630:	f000 ff2e 	bl	8007490 <__pow5mult>
 8006634:	9a04      	ldr	r2, [sp, #16]
 8006636:	4601      	mov	r1, r0
 8006638:	4606      	mov	r6, r0
 800663a:	4620      	mov	r0, r4
 800663c:	f000 fe92 	bl	8007364 <__multiply>
 8006640:	9904      	ldr	r1, [sp, #16]
 8006642:	9008      	str	r0, [sp, #32]
 8006644:	4620      	mov	r0, r4
 8006646:	f000 fda6 	bl	8007196 <_Bfree>
 800664a:	9b08      	ldr	r3, [sp, #32]
 800664c:	9304      	str	r3, [sp, #16]
 800664e:	9b07      	ldr	r3, [sp, #28]
 8006650:	1bda      	subs	r2, r3, r7
 8006652:	d004      	beq.n	800665e <_dtoa_r+0x76e>
 8006654:	9904      	ldr	r1, [sp, #16]
 8006656:	4620      	mov	r0, r4
 8006658:	f000 ff1a 	bl	8007490 <__pow5mult>
 800665c:	9004      	str	r0, [sp, #16]
 800665e:	2101      	movs	r1, #1
 8006660:	4620      	mov	r0, r4
 8006662:	f000 fe76 	bl	8007352 <__i2b>
 8006666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006668:	4607      	mov	r7, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 81d0 	beq.w	8006a10 <_dtoa_r+0xb20>
 8006670:	461a      	mov	r2, r3
 8006672:	4601      	mov	r1, r0
 8006674:	4620      	mov	r0, r4
 8006676:	f000 ff0b 	bl	8007490 <__pow5mult>
 800667a:	9b06      	ldr	r3, [sp, #24]
 800667c:	2b01      	cmp	r3, #1
 800667e:	4607      	mov	r7, r0
 8006680:	dc40      	bgt.n	8006704 <_dtoa_r+0x814>
 8006682:	9b00      	ldr	r3, [sp, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d139      	bne.n	80066fc <_dtoa_r+0x80c>
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800668e:	2b00      	cmp	r3, #0
 8006690:	d136      	bne.n	8006700 <_dtoa_r+0x810>
 8006692:	9b01      	ldr	r3, [sp, #4]
 8006694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006698:	0d1b      	lsrs	r3, r3, #20
 800669a:	051b      	lsls	r3, r3, #20
 800669c:	b12b      	cbz	r3, 80066aa <_dtoa_r+0x7ba>
 800669e:	9b05      	ldr	r3, [sp, #20]
 80066a0:	3301      	adds	r3, #1
 80066a2:	9305      	str	r3, [sp, #20]
 80066a4:	f108 0801 	add.w	r8, r8, #1
 80066a8:	2301      	movs	r3, #1
 80066aa:	9307      	str	r3, [sp, #28]
 80066ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d12a      	bne.n	8006708 <_dtoa_r+0x818>
 80066b2:	2001      	movs	r0, #1
 80066b4:	e030      	b.n	8006718 <_dtoa_r+0x828>
 80066b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066bc:	e795      	b.n	80065ea <_dtoa_r+0x6fa>
 80066be:	9b07      	ldr	r3, [sp, #28]
 80066c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80066c4:	42bb      	cmp	r3, r7
 80066c6:	bfbf      	itttt	lt
 80066c8:	9b07      	ldrlt	r3, [sp, #28]
 80066ca:	9707      	strlt	r7, [sp, #28]
 80066cc:	1afa      	sublt	r2, r7, r3
 80066ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80066d0:	bfbb      	ittet	lt
 80066d2:	189b      	addlt	r3, r3, r2
 80066d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80066d6:	1bdf      	subge	r7, r3, r7
 80066d8:	2700      	movlt	r7, #0
 80066da:	f1b9 0f00 	cmp.w	r9, #0
 80066de:	bfb5      	itete	lt
 80066e0:	9b05      	ldrlt	r3, [sp, #20]
 80066e2:	9d05      	ldrge	r5, [sp, #20]
 80066e4:	eba3 0509 	sublt.w	r5, r3, r9
 80066e8:	464b      	movge	r3, r9
 80066ea:	bfb8      	it	lt
 80066ec:	2300      	movlt	r3, #0
 80066ee:	e77e      	b.n	80065ee <_dtoa_r+0x6fe>
 80066f0:	9f07      	ldr	r7, [sp, #28]
 80066f2:	9d05      	ldr	r5, [sp, #20]
 80066f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80066f6:	e783      	b.n	8006600 <_dtoa_r+0x710>
 80066f8:	9a07      	ldr	r2, [sp, #28]
 80066fa:	e7ab      	b.n	8006654 <_dtoa_r+0x764>
 80066fc:	2300      	movs	r3, #0
 80066fe:	e7d4      	b.n	80066aa <_dtoa_r+0x7ba>
 8006700:	9b00      	ldr	r3, [sp, #0]
 8006702:	e7d2      	b.n	80066aa <_dtoa_r+0x7ba>
 8006704:	2300      	movs	r3, #0
 8006706:	9307      	str	r3, [sp, #28]
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800670e:	6918      	ldr	r0, [r3, #16]
 8006710:	f000 fdd1 	bl	80072b6 <__hi0bits>
 8006714:	f1c0 0020 	rsb	r0, r0, #32
 8006718:	4440      	add	r0, r8
 800671a:	f010 001f 	ands.w	r0, r0, #31
 800671e:	d047      	beq.n	80067b0 <_dtoa_r+0x8c0>
 8006720:	f1c0 0320 	rsb	r3, r0, #32
 8006724:	2b04      	cmp	r3, #4
 8006726:	dd3b      	ble.n	80067a0 <_dtoa_r+0x8b0>
 8006728:	9b05      	ldr	r3, [sp, #20]
 800672a:	f1c0 001c 	rsb	r0, r0, #28
 800672e:	4403      	add	r3, r0
 8006730:	9305      	str	r3, [sp, #20]
 8006732:	4405      	add	r5, r0
 8006734:	4480      	add	r8, r0
 8006736:	9b05      	ldr	r3, [sp, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	dd05      	ble.n	8006748 <_dtoa_r+0x858>
 800673c:	461a      	mov	r2, r3
 800673e:	9904      	ldr	r1, [sp, #16]
 8006740:	4620      	mov	r0, r4
 8006742:	f000 fef3 	bl	800752c <__lshift>
 8006746:	9004      	str	r0, [sp, #16]
 8006748:	f1b8 0f00 	cmp.w	r8, #0
 800674c:	dd05      	ble.n	800675a <_dtoa_r+0x86a>
 800674e:	4639      	mov	r1, r7
 8006750:	4642      	mov	r2, r8
 8006752:	4620      	mov	r0, r4
 8006754:	f000 feea 	bl	800752c <__lshift>
 8006758:	4607      	mov	r7, r0
 800675a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800675c:	b353      	cbz	r3, 80067b4 <_dtoa_r+0x8c4>
 800675e:	4639      	mov	r1, r7
 8006760:	9804      	ldr	r0, [sp, #16]
 8006762:	f000 ff37 	bl	80075d4 <__mcmp>
 8006766:	2800      	cmp	r0, #0
 8006768:	da24      	bge.n	80067b4 <_dtoa_r+0x8c4>
 800676a:	2300      	movs	r3, #0
 800676c:	220a      	movs	r2, #10
 800676e:	9904      	ldr	r1, [sp, #16]
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fd27 	bl	80071c4 <__multadd>
 8006776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006778:	9004      	str	r0, [sp, #16]
 800677a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 814d 	beq.w	8006a1e <_dtoa_r+0xb2e>
 8006784:	2300      	movs	r3, #0
 8006786:	4631      	mov	r1, r6
 8006788:	220a      	movs	r2, #10
 800678a:	4620      	mov	r0, r4
 800678c:	f000 fd1a 	bl	80071c4 <__multadd>
 8006790:	9b02      	ldr	r3, [sp, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	4606      	mov	r6, r0
 8006796:	dc4f      	bgt.n	8006838 <_dtoa_r+0x948>
 8006798:	9b06      	ldr	r3, [sp, #24]
 800679a:	2b02      	cmp	r3, #2
 800679c:	dd4c      	ble.n	8006838 <_dtoa_r+0x948>
 800679e:	e011      	b.n	80067c4 <_dtoa_r+0x8d4>
 80067a0:	d0c9      	beq.n	8006736 <_dtoa_r+0x846>
 80067a2:	9a05      	ldr	r2, [sp, #20]
 80067a4:	331c      	adds	r3, #28
 80067a6:	441a      	add	r2, r3
 80067a8:	9205      	str	r2, [sp, #20]
 80067aa:	441d      	add	r5, r3
 80067ac:	4498      	add	r8, r3
 80067ae:	e7c2      	b.n	8006736 <_dtoa_r+0x846>
 80067b0:	4603      	mov	r3, r0
 80067b2:	e7f6      	b.n	80067a2 <_dtoa_r+0x8b2>
 80067b4:	f1b9 0f00 	cmp.w	r9, #0
 80067b8:	dc38      	bgt.n	800682c <_dtoa_r+0x93c>
 80067ba:	9b06      	ldr	r3, [sp, #24]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	dd35      	ble.n	800682c <_dtoa_r+0x93c>
 80067c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80067c4:	9b02      	ldr	r3, [sp, #8]
 80067c6:	b963      	cbnz	r3, 80067e2 <_dtoa_r+0x8f2>
 80067c8:	4639      	mov	r1, r7
 80067ca:	2205      	movs	r2, #5
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 fcf9 	bl	80071c4 <__multadd>
 80067d2:	4601      	mov	r1, r0
 80067d4:	4607      	mov	r7, r0
 80067d6:	9804      	ldr	r0, [sp, #16]
 80067d8:	f000 fefc 	bl	80075d4 <__mcmp>
 80067dc:	2800      	cmp	r0, #0
 80067de:	f73f adcc 	bgt.w	800637a <_dtoa_r+0x48a>
 80067e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e4:	465d      	mov	r5, fp
 80067e6:	ea6f 0a03 	mvn.w	sl, r3
 80067ea:	f04f 0900 	mov.w	r9, #0
 80067ee:	4639      	mov	r1, r7
 80067f0:	4620      	mov	r0, r4
 80067f2:	f000 fcd0 	bl	8007196 <_Bfree>
 80067f6:	2e00      	cmp	r6, #0
 80067f8:	f43f aeb7 	beq.w	800656a <_dtoa_r+0x67a>
 80067fc:	f1b9 0f00 	cmp.w	r9, #0
 8006800:	d005      	beq.n	800680e <_dtoa_r+0x91e>
 8006802:	45b1      	cmp	r9, r6
 8006804:	d003      	beq.n	800680e <_dtoa_r+0x91e>
 8006806:	4649      	mov	r1, r9
 8006808:	4620      	mov	r0, r4
 800680a:	f000 fcc4 	bl	8007196 <_Bfree>
 800680e:	4631      	mov	r1, r6
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fcc0 	bl	8007196 <_Bfree>
 8006816:	e6a8      	b.n	800656a <_dtoa_r+0x67a>
 8006818:	2700      	movs	r7, #0
 800681a:	463e      	mov	r6, r7
 800681c:	e7e1      	b.n	80067e2 <_dtoa_r+0x8f2>
 800681e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006822:	463e      	mov	r6, r7
 8006824:	e5a9      	b.n	800637a <_dtoa_r+0x48a>
 8006826:	bf00      	nop
 8006828:	40240000 	.word	0x40240000
 800682c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800682e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 80fa 	beq.w	8006a2c <_dtoa_r+0xb3c>
 8006838:	2d00      	cmp	r5, #0
 800683a:	dd05      	ble.n	8006848 <_dtoa_r+0x958>
 800683c:	4631      	mov	r1, r6
 800683e:	462a      	mov	r2, r5
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fe73 	bl	800752c <__lshift>
 8006846:	4606      	mov	r6, r0
 8006848:	9b07      	ldr	r3, [sp, #28]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d04c      	beq.n	80068e8 <_dtoa_r+0x9f8>
 800684e:	6871      	ldr	r1, [r6, #4]
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fc6c 	bl	800712e <_Balloc>
 8006856:	6932      	ldr	r2, [r6, #16]
 8006858:	3202      	adds	r2, #2
 800685a:	4605      	mov	r5, r0
 800685c:	0092      	lsls	r2, r2, #2
 800685e:	f106 010c 	add.w	r1, r6, #12
 8006862:	300c      	adds	r0, #12
 8006864:	f000 fc56 	bl	8007114 <memcpy>
 8006868:	2201      	movs	r2, #1
 800686a:	4629      	mov	r1, r5
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fe5d 	bl	800752c <__lshift>
 8006872:	9b00      	ldr	r3, [sp, #0]
 8006874:	f8cd b014 	str.w	fp, [sp, #20]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	46b1      	mov	r9, r6
 800687e:	9307      	str	r3, [sp, #28]
 8006880:	4606      	mov	r6, r0
 8006882:	4639      	mov	r1, r7
 8006884:	9804      	ldr	r0, [sp, #16]
 8006886:	f7ff faa5 	bl	8005dd4 <quorem>
 800688a:	4649      	mov	r1, r9
 800688c:	4605      	mov	r5, r0
 800688e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006892:	9804      	ldr	r0, [sp, #16]
 8006894:	f000 fe9e 	bl	80075d4 <__mcmp>
 8006898:	4632      	mov	r2, r6
 800689a:	9000      	str	r0, [sp, #0]
 800689c:	4639      	mov	r1, r7
 800689e:	4620      	mov	r0, r4
 80068a0:	f000 feb2 	bl	8007608 <__mdiff>
 80068a4:	68c3      	ldr	r3, [r0, #12]
 80068a6:	4602      	mov	r2, r0
 80068a8:	bb03      	cbnz	r3, 80068ec <_dtoa_r+0x9fc>
 80068aa:	4601      	mov	r1, r0
 80068ac:	9008      	str	r0, [sp, #32]
 80068ae:	9804      	ldr	r0, [sp, #16]
 80068b0:	f000 fe90 	bl	80075d4 <__mcmp>
 80068b4:	9a08      	ldr	r2, [sp, #32]
 80068b6:	4603      	mov	r3, r0
 80068b8:	4611      	mov	r1, r2
 80068ba:	4620      	mov	r0, r4
 80068bc:	9308      	str	r3, [sp, #32]
 80068be:	f000 fc6a 	bl	8007196 <_Bfree>
 80068c2:	9b08      	ldr	r3, [sp, #32]
 80068c4:	b9a3      	cbnz	r3, 80068f0 <_dtoa_r+0xa00>
 80068c6:	9a06      	ldr	r2, [sp, #24]
 80068c8:	b992      	cbnz	r2, 80068f0 <_dtoa_r+0xa00>
 80068ca:	9a07      	ldr	r2, [sp, #28]
 80068cc:	b982      	cbnz	r2, 80068f0 <_dtoa_r+0xa00>
 80068ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068d2:	d029      	beq.n	8006928 <_dtoa_r+0xa38>
 80068d4:	9b00      	ldr	r3, [sp, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dd01      	ble.n	80068de <_dtoa_r+0x9ee>
 80068da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80068de:	9b05      	ldr	r3, [sp, #20]
 80068e0:	1c5d      	adds	r5, r3, #1
 80068e2:	f883 8000 	strb.w	r8, [r3]
 80068e6:	e782      	b.n	80067ee <_dtoa_r+0x8fe>
 80068e8:	4630      	mov	r0, r6
 80068ea:	e7c2      	b.n	8006872 <_dtoa_r+0x982>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e7e3      	b.n	80068b8 <_dtoa_r+0x9c8>
 80068f0:	9a00      	ldr	r2, [sp, #0]
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	db04      	blt.n	8006900 <_dtoa_r+0xa10>
 80068f6:	d125      	bne.n	8006944 <_dtoa_r+0xa54>
 80068f8:	9a06      	ldr	r2, [sp, #24]
 80068fa:	bb1a      	cbnz	r2, 8006944 <_dtoa_r+0xa54>
 80068fc:	9a07      	ldr	r2, [sp, #28]
 80068fe:	bb0a      	cbnz	r2, 8006944 <_dtoa_r+0xa54>
 8006900:	2b00      	cmp	r3, #0
 8006902:	ddec      	ble.n	80068de <_dtoa_r+0x9ee>
 8006904:	2201      	movs	r2, #1
 8006906:	9904      	ldr	r1, [sp, #16]
 8006908:	4620      	mov	r0, r4
 800690a:	f000 fe0f 	bl	800752c <__lshift>
 800690e:	4639      	mov	r1, r7
 8006910:	9004      	str	r0, [sp, #16]
 8006912:	f000 fe5f 	bl	80075d4 <__mcmp>
 8006916:	2800      	cmp	r0, #0
 8006918:	dc03      	bgt.n	8006922 <_dtoa_r+0xa32>
 800691a:	d1e0      	bne.n	80068de <_dtoa_r+0x9ee>
 800691c:	f018 0f01 	tst.w	r8, #1
 8006920:	d0dd      	beq.n	80068de <_dtoa_r+0x9ee>
 8006922:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006926:	d1d8      	bne.n	80068da <_dtoa_r+0x9ea>
 8006928:	9b05      	ldr	r3, [sp, #20]
 800692a:	9a05      	ldr	r2, [sp, #20]
 800692c:	1c5d      	adds	r5, r3, #1
 800692e:	2339      	movs	r3, #57	; 0x39
 8006930:	7013      	strb	r3, [r2, #0]
 8006932:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006936:	2b39      	cmp	r3, #57	; 0x39
 8006938:	f105 32ff 	add.w	r2, r5, #4294967295
 800693c:	d04f      	beq.n	80069de <_dtoa_r+0xaee>
 800693e:	3301      	adds	r3, #1
 8006940:	7013      	strb	r3, [r2, #0]
 8006942:	e754      	b.n	80067ee <_dtoa_r+0x8fe>
 8006944:	9a05      	ldr	r2, [sp, #20]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f102 0501 	add.w	r5, r2, #1
 800694c:	dd06      	ble.n	800695c <_dtoa_r+0xa6c>
 800694e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006952:	d0e9      	beq.n	8006928 <_dtoa_r+0xa38>
 8006954:	f108 0801 	add.w	r8, r8, #1
 8006958:	9b05      	ldr	r3, [sp, #20]
 800695a:	e7c2      	b.n	80068e2 <_dtoa_r+0x9f2>
 800695c:	9a02      	ldr	r2, [sp, #8]
 800695e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006962:	eba5 030b 	sub.w	r3, r5, fp
 8006966:	4293      	cmp	r3, r2
 8006968:	d021      	beq.n	80069ae <_dtoa_r+0xabe>
 800696a:	2300      	movs	r3, #0
 800696c:	220a      	movs	r2, #10
 800696e:	9904      	ldr	r1, [sp, #16]
 8006970:	4620      	mov	r0, r4
 8006972:	f000 fc27 	bl	80071c4 <__multadd>
 8006976:	45b1      	cmp	r9, r6
 8006978:	9004      	str	r0, [sp, #16]
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	f04f 020a 	mov.w	r2, #10
 8006982:	4649      	mov	r1, r9
 8006984:	4620      	mov	r0, r4
 8006986:	d105      	bne.n	8006994 <_dtoa_r+0xaa4>
 8006988:	f000 fc1c 	bl	80071c4 <__multadd>
 800698c:	4681      	mov	r9, r0
 800698e:	4606      	mov	r6, r0
 8006990:	9505      	str	r5, [sp, #20]
 8006992:	e776      	b.n	8006882 <_dtoa_r+0x992>
 8006994:	f000 fc16 	bl	80071c4 <__multadd>
 8006998:	4631      	mov	r1, r6
 800699a:	4681      	mov	r9, r0
 800699c:	2300      	movs	r3, #0
 800699e:	220a      	movs	r2, #10
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 fc0f 	bl	80071c4 <__multadd>
 80069a6:	4606      	mov	r6, r0
 80069a8:	e7f2      	b.n	8006990 <_dtoa_r+0xaa0>
 80069aa:	f04f 0900 	mov.w	r9, #0
 80069ae:	2201      	movs	r2, #1
 80069b0:	9904      	ldr	r1, [sp, #16]
 80069b2:	4620      	mov	r0, r4
 80069b4:	f000 fdba 	bl	800752c <__lshift>
 80069b8:	4639      	mov	r1, r7
 80069ba:	9004      	str	r0, [sp, #16]
 80069bc:	f000 fe0a 	bl	80075d4 <__mcmp>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	dcb6      	bgt.n	8006932 <_dtoa_r+0xa42>
 80069c4:	d102      	bne.n	80069cc <_dtoa_r+0xadc>
 80069c6:	f018 0f01 	tst.w	r8, #1
 80069ca:	d1b2      	bne.n	8006932 <_dtoa_r+0xa42>
 80069cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069d0:	2b30      	cmp	r3, #48	; 0x30
 80069d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80069d6:	f47f af0a 	bne.w	80067ee <_dtoa_r+0x8fe>
 80069da:	4615      	mov	r5, r2
 80069dc:	e7f6      	b.n	80069cc <_dtoa_r+0xadc>
 80069de:	4593      	cmp	fp, r2
 80069e0:	d105      	bne.n	80069ee <_dtoa_r+0xafe>
 80069e2:	2331      	movs	r3, #49	; 0x31
 80069e4:	f10a 0a01 	add.w	sl, sl, #1
 80069e8:	f88b 3000 	strb.w	r3, [fp]
 80069ec:	e6ff      	b.n	80067ee <_dtoa_r+0x8fe>
 80069ee:	4615      	mov	r5, r2
 80069f0:	e79f      	b.n	8006932 <_dtoa_r+0xa42>
 80069f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006a58 <_dtoa_r+0xb68>
 80069f6:	e007      	b.n	8006a08 <_dtoa_r+0xb18>
 80069f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006a5c <_dtoa_r+0xb6c>
 80069fe:	b11b      	cbz	r3, 8006a08 <_dtoa_r+0xb18>
 8006a00:	f10b 0308 	add.w	r3, fp, #8
 8006a04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	4658      	mov	r0, fp
 8006a0a:	b017      	add	sp, #92	; 0x5c
 8006a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a10:	9b06      	ldr	r3, [sp, #24]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	f77f ae35 	ble.w	8006682 <_dtoa_r+0x792>
 8006a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a1a:	9307      	str	r3, [sp, #28]
 8006a1c:	e649      	b.n	80066b2 <_dtoa_r+0x7c2>
 8006a1e:	9b02      	ldr	r3, [sp, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dc03      	bgt.n	8006a2c <_dtoa_r+0xb3c>
 8006a24:	9b06      	ldr	r3, [sp, #24]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	f73f aecc 	bgt.w	80067c4 <_dtoa_r+0x8d4>
 8006a2c:	465d      	mov	r5, fp
 8006a2e:	4639      	mov	r1, r7
 8006a30:	9804      	ldr	r0, [sp, #16]
 8006a32:	f7ff f9cf 	bl	8005dd4 <quorem>
 8006a36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a3a:	f805 8b01 	strb.w	r8, [r5], #1
 8006a3e:	9a02      	ldr	r2, [sp, #8]
 8006a40:	eba5 030b 	sub.w	r3, r5, fp
 8006a44:	429a      	cmp	r2, r3
 8006a46:	ddb0      	ble.n	80069aa <_dtoa_r+0xaba>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	220a      	movs	r2, #10
 8006a4c:	9904      	ldr	r1, [sp, #16]
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 fbb8 	bl	80071c4 <__multadd>
 8006a54:	9004      	str	r0, [sp, #16]
 8006a56:	e7ea      	b.n	8006a2e <_dtoa_r+0xb3e>
 8006a58:	08008773 	.word	0x08008773
 8006a5c:	08008638 	.word	0x08008638

08006a60 <rshift>:
 8006a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a62:	6906      	ldr	r6, [r0, #16]
 8006a64:	114b      	asrs	r3, r1, #5
 8006a66:	429e      	cmp	r6, r3
 8006a68:	f100 0414 	add.w	r4, r0, #20
 8006a6c:	dd30      	ble.n	8006ad0 <rshift+0x70>
 8006a6e:	f011 011f 	ands.w	r1, r1, #31
 8006a72:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006a76:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006a7a:	d108      	bne.n	8006a8e <rshift+0x2e>
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	42b2      	cmp	r2, r6
 8006a80:	460b      	mov	r3, r1
 8006a82:	d211      	bcs.n	8006aa8 <rshift+0x48>
 8006a84:	f852 3b04 	ldr.w	r3, [r2], #4
 8006a88:	f841 3b04 	str.w	r3, [r1], #4
 8006a8c:	e7f7      	b.n	8006a7e <rshift+0x1e>
 8006a8e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006a92:	f1c1 0c20 	rsb	ip, r1, #32
 8006a96:	40cd      	lsrs	r5, r1
 8006a98:	3204      	adds	r2, #4
 8006a9a:	4623      	mov	r3, r4
 8006a9c:	42b2      	cmp	r2, r6
 8006a9e:	4617      	mov	r7, r2
 8006aa0:	d30c      	bcc.n	8006abc <rshift+0x5c>
 8006aa2:	601d      	str	r5, [r3, #0]
 8006aa4:	b105      	cbz	r5, 8006aa8 <rshift+0x48>
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	1b1a      	subs	r2, r3, r4
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ab0:	bf08      	it	eq
 8006ab2:	2300      	moveq	r3, #0
 8006ab4:	6102      	str	r2, [r0, #16]
 8006ab6:	bf08      	it	eq
 8006ab8:	6143      	streq	r3, [r0, #20]
 8006aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006abc:	683f      	ldr	r7, [r7, #0]
 8006abe:	fa07 f70c 	lsl.w	r7, r7, ip
 8006ac2:	433d      	orrs	r5, r7
 8006ac4:	f843 5b04 	str.w	r5, [r3], #4
 8006ac8:	f852 5b04 	ldr.w	r5, [r2], #4
 8006acc:	40cd      	lsrs	r5, r1
 8006ace:	e7e5      	b.n	8006a9c <rshift+0x3c>
 8006ad0:	4623      	mov	r3, r4
 8006ad2:	e7e9      	b.n	8006aa8 <rshift+0x48>

08006ad4 <__hexdig_fun>:
 8006ad4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006ad8:	2b09      	cmp	r3, #9
 8006ada:	d802      	bhi.n	8006ae2 <__hexdig_fun+0xe>
 8006adc:	3820      	subs	r0, #32
 8006ade:	b2c0      	uxtb	r0, r0
 8006ae0:	4770      	bx	lr
 8006ae2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d801      	bhi.n	8006aee <__hexdig_fun+0x1a>
 8006aea:	3847      	subs	r0, #71	; 0x47
 8006aec:	e7f7      	b.n	8006ade <__hexdig_fun+0xa>
 8006aee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	d801      	bhi.n	8006afa <__hexdig_fun+0x26>
 8006af6:	3827      	subs	r0, #39	; 0x27
 8006af8:	e7f1      	b.n	8006ade <__hexdig_fun+0xa>
 8006afa:	2000      	movs	r0, #0
 8006afc:	4770      	bx	lr

08006afe <__gethex>:
 8006afe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b02:	b08b      	sub	sp, #44	; 0x2c
 8006b04:	468a      	mov	sl, r1
 8006b06:	9002      	str	r0, [sp, #8]
 8006b08:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006b0a:	9306      	str	r3, [sp, #24]
 8006b0c:	4690      	mov	r8, r2
 8006b0e:	f000 fadf 	bl	80070d0 <__localeconv_l>
 8006b12:	6803      	ldr	r3, [r0, #0]
 8006b14:	9303      	str	r3, [sp, #12]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7f9 fb62 	bl	80001e0 <strlen>
 8006b1c:	9b03      	ldr	r3, [sp, #12]
 8006b1e:	9001      	str	r0, [sp, #4]
 8006b20:	4403      	add	r3, r0
 8006b22:	f04f 0b00 	mov.w	fp, #0
 8006b26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006b2a:	9307      	str	r3, [sp, #28]
 8006b2c:	f8da 3000 	ldr.w	r3, [sl]
 8006b30:	3302      	adds	r3, #2
 8006b32:	461f      	mov	r7, r3
 8006b34:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b38:	2830      	cmp	r0, #48	; 0x30
 8006b3a:	d06c      	beq.n	8006c16 <__gethex+0x118>
 8006b3c:	f7ff ffca 	bl	8006ad4 <__hexdig_fun>
 8006b40:	4604      	mov	r4, r0
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d16a      	bne.n	8006c1c <__gethex+0x11e>
 8006b46:	9a01      	ldr	r2, [sp, #4]
 8006b48:	9903      	ldr	r1, [sp, #12]
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	f001 fb82 	bl	8008254 <strncmp>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d166      	bne.n	8006c22 <__gethex+0x124>
 8006b54:	9b01      	ldr	r3, [sp, #4]
 8006b56:	5cf8      	ldrb	r0, [r7, r3]
 8006b58:	18fe      	adds	r6, r7, r3
 8006b5a:	f7ff ffbb 	bl	8006ad4 <__hexdig_fun>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d062      	beq.n	8006c28 <__gethex+0x12a>
 8006b62:	4633      	mov	r3, r6
 8006b64:	7818      	ldrb	r0, [r3, #0]
 8006b66:	2830      	cmp	r0, #48	; 0x30
 8006b68:	461f      	mov	r7, r3
 8006b6a:	f103 0301 	add.w	r3, r3, #1
 8006b6e:	d0f9      	beq.n	8006b64 <__gethex+0x66>
 8006b70:	f7ff ffb0 	bl	8006ad4 <__hexdig_fun>
 8006b74:	fab0 f580 	clz	r5, r0
 8006b78:	096d      	lsrs	r5, r5, #5
 8006b7a:	4634      	mov	r4, r6
 8006b7c:	f04f 0b01 	mov.w	fp, #1
 8006b80:	463a      	mov	r2, r7
 8006b82:	4616      	mov	r6, r2
 8006b84:	3201      	adds	r2, #1
 8006b86:	7830      	ldrb	r0, [r6, #0]
 8006b88:	f7ff ffa4 	bl	8006ad4 <__hexdig_fun>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d1f8      	bne.n	8006b82 <__gethex+0x84>
 8006b90:	9a01      	ldr	r2, [sp, #4]
 8006b92:	9903      	ldr	r1, [sp, #12]
 8006b94:	4630      	mov	r0, r6
 8006b96:	f001 fb5d 	bl	8008254 <strncmp>
 8006b9a:	b950      	cbnz	r0, 8006bb2 <__gethex+0xb4>
 8006b9c:	b954      	cbnz	r4, 8006bb4 <__gethex+0xb6>
 8006b9e:	9b01      	ldr	r3, [sp, #4]
 8006ba0:	18f4      	adds	r4, r6, r3
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	3201      	adds	r2, #1
 8006ba8:	7830      	ldrb	r0, [r6, #0]
 8006baa:	f7ff ff93 	bl	8006ad4 <__hexdig_fun>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d1f8      	bne.n	8006ba4 <__gethex+0xa6>
 8006bb2:	b10c      	cbz	r4, 8006bb8 <__gethex+0xba>
 8006bb4:	1ba4      	subs	r4, r4, r6
 8006bb6:	00a4      	lsls	r4, r4, #2
 8006bb8:	7833      	ldrb	r3, [r6, #0]
 8006bba:	2b50      	cmp	r3, #80	; 0x50
 8006bbc:	d001      	beq.n	8006bc2 <__gethex+0xc4>
 8006bbe:	2b70      	cmp	r3, #112	; 0x70
 8006bc0:	d140      	bne.n	8006c44 <__gethex+0x146>
 8006bc2:	7873      	ldrb	r3, [r6, #1]
 8006bc4:	2b2b      	cmp	r3, #43	; 0x2b
 8006bc6:	d031      	beq.n	8006c2c <__gethex+0x12e>
 8006bc8:	2b2d      	cmp	r3, #45	; 0x2d
 8006bca:	d033      	beq.n	8006c34 <__gethex+0x136>
 8006bcc:	1c71      	adds	r1, r6, #1
 8006bce:	f04f 0900 	mov.w	r9, #0
 8006bd2:	7808      	ldrb	r0, [r1, #0]
 8006bd4:	f7ff ff7e 	bl	8006ad4 <__hexdig_fun>
 8006bd8:	1e43      	subs	r3, r0, #1
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b18      	cmp	r3, #24
 8006bde:	d831      	bhi.n	8006c44 <__gethex+0x146>
 8006be0:	f1a0 0210 	sub.w	r2, r0, #16
 8006be4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006be8:	f7ff ff74 	bl	8006ad4 <__hexdig_fun>
 8006bec:	1e43      	subs	r3, r0, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b18      	cmp	r3, #24
 8006bf2:	d922      	bls.n	8006c3a <__gethex+0x13c>
 8006bf4:	f1b9 0f00 	cmp.w	r9, #0
 8006bf8:	d000      	beq.n	8006bfc <__gethex+0xfe>
 8006bfa:	4252      	negs	r2, r2
 8006bfc:	4414      	add	r4, r2
 8006bfe:	f8ca 1000 	str.w	r1, [sl]
 8006c02:	b30d      	cbz	r5, 8006c48 <__gethex+0x14a>
 8006c04:	f1bb 0f00 	cmp.w	fp, #0
 8006c08:	bf0c      	ite	eq
 8006c0a:	2706      	moveq	r7, #6
 8006c0c:	2700      	movne	r7, #0
 8006c0e:	4638      	mov	r0, r7
 8006c10:	b00b      	add	sp, #44	; 0x2c
 8006c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c16:	f10b 0b01 	add.w	fp, fp, #1
 8006c1a:	e78a      	b.n	8006b32 <__gethex+0x34>
 8006c1c:	2500      	movs	r5, #0
 8006c1e:	462c      	mov	r4, r5
 8006c20:	e7ae      	b.n	8006b80 <__gethex+0x82>
 8006c22:	463e      	mov	r6, r7
 8006c24:	2501      	movs	r5, #1
 8006c26:	e7c7      	b.n	8006bb8 <__gethex+0xba>
 8006c28:	4604      	mov	r4, r0
 8006c2a:	e7fb      	b.n	8006c24 <__gethex+0x126>
 8006c2c:	f04f 0900 	mov.w	r9, #0
 8006c30:	1cb1      	adds	r1, r6, #2
 8006c32:	e7ce      	b.n	8006bd2 <__gethex+0xd4>
 8006c34:	f04f 0901 	mov.w	r9, #1
 8006c38:	e7fa      	b.n	8006c30 <__gethex+0x132>
 8006c3a:	230a      	movs	r3, #10
 8006c3c:	fb03 0202 	mla	r2, r3, r2, r0
 8006c40:	3a10      	subs	r2, #16
 8006c42:	e7cf      	b.n	8006be4 <__gethex+0xe6>
 8006c44:	4631      	mov	r1, r6
 8006c46:	e7da      	b.n	8006bfe <__gethex+0x100>
 8006c48:	1bf3      	subs	r3, r6, r7
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	2b07      	cmp	r3, #7
 8006c50:	dc49      	bgt.n	8006ce6 <__gethex+0x1e8>
 8006c52:	9802      	ldr	r0, [sp, #8]
 8006c54:	f000 fa6b 	bl	800712e <_Balloc>
 8006c58:	9b01      	ldr	r3, [sp, #4]
 8006c5a:	f100 0914 	add.w	r9, r0, #20
 8006c5e:	f04f 0b00 	mov.w	fp, #0
 8006c62:	f1c3 0301 	rsb	r3, r3, #1
 8006c66:	4605      	mov	r5, r0
 8006c68:	f8cd 9010 	str.w	r9, [sp, #16]
 8006c6c:	46da      	mov	sl, fp
 8006c6e:	9308      	str	r3, [sp, #32]
 8006c70:	42b7      	cmp	r7, r6
 8006c72:	d33b      	bcc.n	8006cec <__gethex+0x1ee>
 8006c74:	9804      	ldr	r0, [sp, #16]
 8006c76:	f840 ab04 	str.w	sl, [r0], #4
 8006c7a:	eba0 0009 	sub.w	r0, r0, r9
 8006c7e:	1080      	asrs	r0, r0, #2
 8006c80:	6128      	str	r0, [r5, #16]
 8006c82:	0147      	lsls	r7, r0, #5
 8006c84:	4650      	mov	r0, sl
 8006c86:	f000 fb16 	bl	80072b6 <__hi0bits>
 8006c8a:	f8d8 6000 	ldr.w	r6, [r8]
 8006c8e:	1a3f      	subs	r7, r7, r0
 8006c90:	42b7      	cmp	r7, r6
 8006c92:	dd64      	ble.n	8006d5e <__gethex+0x260>
 8006c94:	1bbf      	subs	r7, r7, r6
 8006c96:	4639      	mov	r1, r7
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f000 fe25 	bl	80078e8 <__any_on>
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	b178      	cbz	r0, 8006cc2 <__gethex+0x1c4>
 8006ca2:	1e7b      	subs	r3, r7, #1
 8006ca4:	1159      	asrs	r1, r3, #5
 8006ca6:	f003 021f 	and.w	r2, r3, #31
 8006caa:	f04f 0a01 	mov.w	sl, #1
 8006cae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006cb2:	fa0a f202 	lsl.w	r2, sl, r2
 8006cb6:	420a      	tst	r2, r1
 8006cb8:	d003      	beq.n	8006cc2 <__gethex+0x1c4>
 8006cba:	4553      	cmp	r3, sl
 8006cbc:	dc46      	bgt.n	8006d4c <__gethex+0x24e>
 8006cbe:	f04f 0a02 	mov.w	sl, #2
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f7ff fecb 	bl	8006a60 <rshift>
 8006cca:	443c      	add	r4, r7
 8006ccc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	da52      	bge.n	8006d7a <__gethex+0x27c>
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	9802      	ldr	r0, [sp, #8]
 8006cd8:	f000 fa5d 	bl	8007196 <_Bfree>
 8006cdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006cde:	2300      	movs	r3, #0
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	27a3      	movs	r7, #163	; 0xa3
 8006ce4:	e793      	b.n	8006c0e <__gethex+0x110>
 8006ce6:	3101      	adds	r1, #1
 8006ce8:	105b      	asrs	r3, r3, #1
 8006cea:	e7b0      	b.n	8006c4e <__gethex+0x150>
 8006cec:	1e73      	subs	r3, r6, #1
 8006cee:	9305      	str	r3, [sp, #20]
 8006cf0:	9a07      	ldr	r2, [sp, #28]
 8006cf2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d018      	beq.n	8006d2c <__gethex+0x22e>
 8006cfa:	f1bb 0f20 	cmp.w	fp, #32
 8006cfe:	d107      	bne.n	8006d10 <__gethex+0x212>
 8006d00:	9b04      	ldr	r3, [sp, #16]
 8006d02:	f8c3 a000 	str.w	sl, [r3]
 8006d06:	3304      	adds	r3, #4
 8006d08:	f04f 0a00 	mov.w	sl, #0
 8006d0c:	9304      	str	r3, [sp, #16]
 8006d0e:	46d3      	mov	fp, sl
 8006d10:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006d14:	f7ff fede 	bl	8006ad4 <__hexdig_fun>
 8006d18:	f000 000f 	and.w	r0, r0, #15
 8006d1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006d20:	ea4a 0a00 	orr.w	sl, sl, r0
 8006d24:	f10b 0b04 	add.w	fp, fp, #4
 8006d28:	9b05      	ldr	r3, [sp, #20]
 8006d2a:	e00d      	b.n	8006d48 <__gethex+0x24a>
 8006d2c:	9b05      	ldr	r3, [sp, #20]
 8006d2e:	9a08      	ldr	r2, [sp, #32]
 8006d30:	4413      	add	r3, r2
 8006d32:	42bb      	cmp	r3, r7
 8006d34:	d3e1      	bcc.n	8006cfa <__gethex+0x1fc>
 8006d36:	4618      	mov	r0, r3
 8006d38:	9a01      	ldr	r2, [sp, #4]
 8006d3a:	9903      	ldr	r1, [sp, #12]
 8006d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3e:	f001 fa89 	bl	8008254 <strncmp>
 8006d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d1d8      	bne.n	8006cfa <__gethex+0x1fc>
 8006d48:	461e      	mov	r6, r3
 8006d4a:	e791      	b.n	8006c70 <__gethex+0x172>
 8006d4c:	1eb9      	subs	r1, r7, #2
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f000 fdca 	bl	80078e8 <__any_on>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d0b2      	beq.n	8006cbe <__gethex+0x1c0>
 8006d58:	f04f 0a03 	mov.w	sl, #3
 8006d5c:	e7b1      	b.n	8006cc2 <__gethex+0x1c4>
 8006d5e:	da09      	bge.n	8006d74 <__gethex+0x276>
 8006d60:	1bf7      	subs	r7, r6, r7
 8006d62:	4629      	mov	r1, r5
 8006d64:	463a      	mov	r2, r7
 8006d66:	9802      	ldr	r0, [sp, #8]
 8006d68:	f000 fbe0 	bl	800752c <__lshift>
 8006d6c:	1be4      	subs	r4, r4, r7
 8006d6e:	4605      	mov	r5, r0
 8006d70:	f100 0914 	add.w	r9, r0, #20
 8006d74:	f04f 0a00 	mov.w	sl, #0
 8006d78:	e7a8      	b.n	8006ccc <__gethex+0x1ce>
 8006d7a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006d7e:	42a0      	cmp	r0, r4
 8006d80:	dd6a      	ble.n	8006e58 <__gethex+0x35a>
 8006d82:	1b04      	subs	r4, r0, r4
 8006d84:	42a6      	cmp	r6, r4
 8006d86:	dc2e      	bgt.n	8006de6 <__gethex+0x2e8>
 8006d88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d022      	beq.n	8006dd6 <__gethex+0x2d8>
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d024      	beq.n	8006dde <__gethex+0x2e0>
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d115      	bne.n	8006dc4 <__gethex+0x2c6>
 8006d98:	42a6      	cmp	r6, r4
 8006d9a:	d113      	bne.n	8006dc4 <__gethex+0x2c6>
 8006d9c:	2e01      	cmp	r6, #1
 8006d9e:	dc0b      	bgt.n	8006db8 <__gethex+0x2ba>
 8006da0:	9a06      	ldr	r2, [sp, #24]
 8006da2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	2301      	movs	r3, #1
 8006daa:	612b      	str	r3, [r5, #16]
 8006dac:	f8c9 3000 	str.w	r3, [r9]
 8006db0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006db2:	2762      	movs	r7, #98	; 0x62
 8006db4:	601d      	str	r5, [r3, #0]
 8006db6:	e72a      	b.n	8006c0e <__gethex+0x110>
 8006db8:	1e71      	subs	r1, r6, #1
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f000 fd94 	bl	80078e8 <__any_on>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d1ed      	bne.n	8006da0 <__gethex+0x2a2>
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	9802      	ldr	r0, [sp, #8]
 8006dc8:	f000 f9e5 	bl	8007196 <_Bfree>
 8006dcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006dce:	2300      	movs	r3, #0
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	2750      	movs	r7, #80	; 0x50
 8006dd4:	e71b      	b.n	8006c0e <__gethex+0x110>
 8006dd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0e1      	beq.n	8006da0 <__gethex+0x2a2>
 8006ddc:	e7f2      	b.n	8006dc4 <__gethex+0x2c6>
 8006dde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1dd      	bne.n	8006da0 <__gethex+0x2a2>
 8006de4:	e7ee      	b.n	8006dc4 <__gethex+0x2c6>
 8006de6:	1e67      	subs	r7, r4, #1
 8006de8:	f1ba 0f00 	cmp.w	sl, #0
 8006dec:	d131      	bne.n	8006e52 <__gethex+0x354>
 8006dee:	b127      	cbz	r7, 8006dfa <__gethex+0x2fc>
 8006df0:	4639      	mov	r1, r7
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 fd78 	bl	80078e8 <__any_on>
 8006df8:	4682      	mov	sl, r0
 8006dfa:	117a      	asrs	r2, r7, #5
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f007 071f 	and.w	r7, r7, #31
 8006e02:	fa03 f707 	lsl.w	r7, r3, r7
 8006e06:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	421f      	tst	r7, r3
 8006e0e:	4628      	mov	r0, r5
 8006e10:	bf18      	it	ne
 8006e12:	f04a 0a02 	orrne.w	sl, sl, #2
 8006e16:	1b36      	subs	r6, r6, r4
 8006e18:	f7ff fe22 	bl	8006a60 <rshift>
 8006e1c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006e20:	2702      	movs	r7, #2
 8006e22:	f1ba 0f00 	cmp.w	sl, #0
 8006e26:	d048      	beq.n	8006eba <__gethex+0x3bc>
 8006e28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d015      	beq.n	8006e5c <__gethex+0x35e>
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d017      	beq.n	8006e64 <__gethex+0x366>
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d109      	bne.n	8006e4c <__gethex+0x34e>
 8006e38:	f01a 0f02 	tst.w	sl, #2
 8006e3c:	d006      	beq.n	8006e4c <__gethex+0x34e>
 8006e3e:	f8d9 3000 	ldr.w	r3, [r9]
 8006e42:	ea4a 0a03 	orr.w	sl, sl, r3
 8006e46:	f01a 0f01 	tst.w	sl, #1
 8006e4a:	d10e      	bne.n	8006e6a <__gethex+0x36c>
 8006e4c:	f047 0710 	orr.w	r7, r7, #16
 8006e50:	e033      	b.n	8006eba <__gethex+0x3bc>
 8006e52:	f04f 0a01 	mov.w	sl, #1
 8006e56:	e7d0      	b.n	8006dfa <__gethex+0x2fc>
 8006e58:	2701      	movs	r7, #1
 8006e5a:	e7e2      	b.n	8006e22 <__gethex+0x324>
 8006e5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e5e:	f1c3 0301 	rsb	r3, r3, #1
 8006e62:	9315      	str	r3, [sp, #84]	; 0x54
 8006e64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f0      	beq.n	8006e4c <__gethex+0x34e>
 8006e6a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006e6e:	f105 0314 	add.w	r3, r5, #20
 8006e72:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006e76:	eb03 010a 	add.w	r1, r3, sl
 8006e7a:	f04f 0c00 	mov.w	ip, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006e88:	d01c      	beq.n	8006ec4 <__gethex+0x3c6>
 8006e8a:	3201      	adds	r2, #1
 8006e8c:	6002      	str	r2, [r0, #0]
 8006e8e:	2f02      	cmp	r7, #2
 8006e90:	f105 0314 	add.w	r3, r5, #20
 8006e94:	d138      	bne.n	8006f08 <__gethex+0x40a>
 8006e96:	f8d8 2000 	ldr.w	r2, [r8]
 8006e9a:	3a01      	subs	r2, #1
 8006e9c:	42b2      	cmp	r2, r6
 8006e9e:	d10a      	bne.n	8006eb6 <__gethex+0x3b8>
 8006ea0:	1171      	asrs	r1, r6, #5
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f006 061f 	and.w	r6, r6, #31
 8006ea8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006eac:	fa02 f606 	lsl.w	r6, r2, r6
 8006eb0:	421e      	tst	r6, r3
 8006eb2:	bf18      	it	ne
 8006eb4:	4617      	movne	r7, r2
 8006eb6:	f047 0720 	orr.w	r7, r7, #32
 8006eba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ebc:	601d      	str	r5, [r3, #0]
 8006ebe:	9b06      	ldr	r3, [sp, #24]
 8006ec0:	601c      	str	r4, [r3, #0]
 8006ec2:	e6a4      	b.n	8006c0e <__gethex+0x110>
 8006ec4:	4299      	cmp	r1, r3
 8006ec6:	f843 cc04 	str.w	ip, [r3, #-4]
 8006eca:	d8d8      	bhi.n	8006e7e <__gethex+0x380>
 8006ecc:	68ab      	ldr	r3, [r5, #8]
 8006ece:	4599      	cmp	r9, r3
 8006ed0:	db12      	blt.n	8006ef8 <__gethex+0x3fa>
 8006ed2:	6869      	ldr	r1, [r5, #4]
 8006ed4:	9802      	ldr	r0, [sp, #8]
 8006ed6:	3101      	adds	r1, #1
 8006ed8:	f000 f929 	bl	800712e <_Balloc>
 8006edc:	692a      	ldr	r2, [r5, #16]
 8006ede:	3202      	adds	r2, #2
 8006ee0:	f105 010c 	add.w	r1, r5, #12
 8006ee4:	4683      	mov	fp, r0
 8006ee6:	0092      	lsls	r2, r2, #2
 8006ee8:	300c      	adds	r0, #12
 8006eea:	f000 f913 	bl	8007114 <memcpy>
 8006eee:	4629      	mov	r1, r5
 8006ef0:	9802      	ldr	r0, [sp, #8]
 8006ef2:	f000 f950 	bl	8007196 <_Bfree>
 8006ef6:	465d      	mov	r5, fp
 8006ef8:	692b      	ldr	r3, [r5, #16]
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006f00:	612a      	str	r2, [r5, #16]
 8006f02:	2201      	movs	r2, #1
 8006f04:	615a      	str	r2, [r3, #20]
 8006f06:	e7c2      	b.n	8006e8e <__gethex+0x390>
 8006f08:	692a      	ldr	r2, [r5, #16]
 8006f0a:	454a      	cmp	r2, r9
 8006f0c:	dd0b      	ble.n	8006f26 <__gethex+0x428>
 8006f0e:	2101      	movs	r1, #1
 8006f10:	4628      	mov	r0, r5
 8006f12:	f7ff fda5 	bl	8006a60 <rshift>
 8006f16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f1a:	3401      	adds	r4, #1
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	f6ff aed9 	blt.w	8006cd4 <__gethex+0x1d6>
 8006f22:	2701      	movs	r7, #1
 8006f24:	e7c7      	b.n	8006eb6 <__gethex+0x3b8>
 8006f26:	f016 061f 	ands.w	r6, r6, #31
 8006f2a:	d0fa      	beq.n	8006f22 <__gethex+0x424>
 8006f2c:	449a      	add	sl, r3
 8006f2e:	f1c6 0620 	rsb	r6, r6, #32
 8006f32:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006f36:	f000 f9be 	bl	80072b6 <__hi0bits>
 8006f3a:	42b0      	cmp	r0, r6
 8006f3c:	dbe7      	blt.n	8006f0e <__gethex+0x410>
 8006f3e:	e7f0      	b.n	8006f22 <__gethex+0x424>

08006f40 <L_shift>:
 8006f40:	f1c2 0208 	rsb	r2, r2, #8
 8006f44:	0092      	lsls	r2, r2, #2
 8006f46:	b570      	push	{r4, r5, r6, lr}
 8006f48:	f1c2 0620 	rsb	r6, r2, #32
 8006f4c:	6843      	ldr	r3, [r0, #4]
 8006f4e:	6804      	ldr	r4, [r0, #0]
 8006f50:	fa03 f506 	lsl.w	r5, r3, r6
 8006f54:	432c      	orrs	r4, r5
 8006f56:	40d3      	lsrs	r3, r2
 8006f58:	6004      	str	r4, [r0, #0]
 8006f5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8006f5e:	4288      	cmp	r0, r1
 8006f60:	d3f4      	bcc.n	8006f4c <L_shift+0xc>
 8006f62:	bd70      	pop	{r4, r5, r6, pc}

08006f64 <__match>:
 8006f64:	b530      	push	{r4, r5, lr}
 8006f66:	6803      	ldr	r3, [r0, #0]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f6e:	b914      	cbnz	r4, 8006f76 <__match+0x12>
 8006f70:	6003      	str	r3, [r0, #0]
 8006f72:	2001      	movs	r0, #1
 8006f74:	bd30      	pop	{r4, r5, pc}
 8006f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006f7e:	2d19      	cmp	r5, #25
 8006f80:	bf98      	it	ls
 8006f82:	3220      	addls	r2, #32
 8006f84:	42a2      	cmp	r2, r4
 8006f86:	d0f0      	beq.n	8006f6a <__match+0x6>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	e7f3      	b.n	8006f74 <__match+0x10>

08006f8c <__hexnan>:
 8006f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f90:	680b      	ldr	r3, [r1, #0]
 8006f92:	6801      	ldr	r1, [r0, #0]
 8006f94:	115f      	asrs	r7, r3, #5
 8006f96:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006f9a:	f013 031f 	ands.w	r3, r3, #31
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	bf18      	it	ne
 8006fa2:	3704      	addne	r7, #4
 8006fa4:	2500      	movs	r5, #0
 8006fa6:	1f3e      	subs	r6, r7, #4
 8006fa8:	4682      	mov	sl, r0
 8006faa:	4690      	mov	r8, r2
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	f847 5c04 	str.w	r5, [r7, #-4]
 8006fb2:	46b1      	mov	r9, r6
 8006fb4:	4634      	mov	r4, r6
 8006fb6:	9502      	str	r5, [sp, #8]
 8006fb8:	46ab      	mov	fp, r5
 8006fba:	784a      	ldrb	r2, [r1, #1]
 8006fbc:	1c4b      	adds	r3, r1, #1
 8006fbe:	9303      	str	r3, [sp, #12]
 8006fc0:	b342      	cbz	r2, 8007014 <__hexnan+0x88>
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	9105      	str	r1, [sp, #20]
 8006fc6:	9204      	str	r2, [sp, #16]
 8006fc8:	f7ff fd84 	bl	8006ad4 <__hexdig_fun>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d143      	bne.n	8007058 <__hexnan+0xcc>
 8006fd0:	9a04      	ldr	r2, [sp, #16]
 8006fd2:	9905      	ldr	r1, [sp, #20]
 8006fd4:	2a20      	cmp	r2, #32
 8006fd6:	d818      	bhi.n	800700a <__hexnan+0x7e>
 8006fd8:	9b02      	ldr	r3, [sp, #8]
 8006fda:	459b      	cmp	fp, r3
 8006fdc:	dd13      	ble.n	8007006 <__hexnan+0x7a>
 8006fde:	454c      	cmp	r4, r9
 8006fe0:	d206      	bcs.n	8006ff0 <__hexnan+0x64>
 8006fe2:	2d07      	cmp	r5, #7
 8006fe4:	dc04      	bgt.n	8006ff0 <__hexnan+0x64>
 8006fe6:	462a      	mov	r2, r5
 8006fe8:	4649      	mov	r1, r9
 8006fea:	4620      	mov	r0, r4
 8006fec:	f7ff ffa8 	bl	8006f40 <L_shift>
 8006ff0:	4544      	cmp	r4, r8
 8006ff2:	d944      	bls.n	800707e <__hexnan+0xf2>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f1a4 0904 	sub.w	r9, r4, #4
 8006ffa:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ffe:	f8cd b008 	str.w	fp, [sp, #8]
 8007002:	464c      	mov	r4, r9
 8007004:	461d      	mov	r5, r3
 8007006:	9903      	ldr	r1, [sp, #12]
 8007008:	e7d7      	b.n	8006fba <__hexnan+0x2e>
 800700a:	2a29      	cmp	r2, #41	; 0x29
 800700c:	d14a      	bne.n	80070a4 <__hexnan+0x118>
 800700e:	3102      	adds	r1, #2
 8007010:	f8ca 1000 	str.w	r1, [sl]
 8007014:	f1bb 0f00 	cmp.w	fp, #0
 8007018:	d044      	beq.n	80070a4 <__hexnan+0x118>
 800701a:	454c      	cmp	r4, r9
 800701c:	d206      	bcs.n	800702c <__hexnan+0xa0>
 800701e:	2d07      	cmp	r5, #7
 8007020:	dc04      	bgt.n	800702c <__hexnan+0xa0>
 8007022:	462a      	mov	r2, r5
 8007024:	4649      	mov	r1, r9
 8007026:	4620      	mov	r0, r4
 8007028:	f7ff ff8a 	bl	8006f40 <L_shift>
 800702c:	4544      	cmp	r4, r8
 800702e:	d928      	bls.n	8007082 <__hexnan+0xf6>
 8007030:	4643      	mov	r3, r8
 8007032:	f854 2b04 	ldr.w	r2, [r4], #4
 8007036:	f843 2b04 	str.w	r2, [r3], #4
 800703a:	42a6      	cmp	r6, r4
 800703c:	d2f9      	bcs.n	8007032 <__hexnan+0xa6>
 800703e:	2200      	movs	r2, #0
 8007040:	f843 2b04 	str.w	r2, [r3], #4
 8007044:	429e      	cmp	r6, r3
 8007046:	d2fb      	bcs.n	8007040 <__hexnan+0xb4>
 8007048:	6833      	ldr	r3, [r6, #0]
 800704a:	b91b      	cbnz	r3, 8007054 <__hexnan+0xc8>
 800704c:	4546      	cmp	r6, r8
 800704e:	d127      	bne.n	80070a0 <__hexnan+0x114>
 8007050:	2301      	movs	r3, #1
 8007052:	6033      	str	r3, [r6, #0]
 8007054:	2005      	movs	r0, #5
 8007056:	e026      	b.n	80070a6 <__hexnan+0x11a>
 8007058:	3501      	adds	r5, #1
 800705a:	2d08      	cmp	r5, #8
 800705c:	f10b 0b01 	add.w	fp, fp, #1
 8007060:	dd06      	ble.n	8007070 <__hexnan+0xe4>
 8007062:	4544      	cmp	r4, r8
 8007064:	d9cf      	bls.n	8007006 <__hexnan+0x7a>
 8007066:	2300      	movs	r3, #0
 8007068:	f844 3c04 	str.w	r3, [r4, #-4]
 800706c:	2501      	movs	r5, #1
 800706e:	3c04      	subs	r4, #4
 8007070:	6822      	ldr	r2, [r4, #0]
 8007072:	f000 000f 	and.w	r0, r0, #15
 8007076:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800707a:	6020      	str	r0, [r4, #0]
 800707c:	e7c3      	b.n	8007006 <__hexnan+0x7a>
 800707e:	2508      	movs	r5, #8
 8007080:	e7c1      	b.n	8007006 <__hexnan+0x7a>
 8007082:	9b01      	ldr	r3, [sp, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0df      	beq.n	8007048 <__hexnan+0xbc>
 8007088:	f04f 32ff 	mov.w	r2, #4294967295
 800708c:	f1c3 0320 	rsb	r3, r3, #32
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
 8007094:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007098:	401a      	ands	r2, r3
 800709a:	f847 2c04 	str.w	r2, [r7, #-4]
 800709e:	e7d3      	b.n	8007048 <__hexnan+0xbc>
 80070a0:	3e04      	subs	r6, #4
 80070a2:	e7d1      	b.n	8007048 <__hexnan+0xbc>
 80070a4:	2004      	movs	r0, #4
 80070a6:	b007      	add	sp, #28
 80070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070ac <__locale_ctype_ptr_l>:
 80070ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80070b0:	4770      	bx	lr
	...

080070b4 <__locale_ctype_ptr>:
 80070b4:	4b04      	ldr	r3, [pc, #16]	; (80070c8 <__locale_ctype_ptr+0x14>)
 80070b6:	4a05      	ldr	r2, [pc, #20]	; (80070cc <__locale_ctype_ptr+0x18>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf08      	it	eq
 80070c0:	4613      	moveq	r3, r2
 80070c2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80070c6:	4770      	bx	lr
 80070c8:	2000000c 	.word	0x2000000c
 80070cc:	20000070 	.word	0x20000070

080070d0 <__localeconv_l>:
 80070d0:	30f0      	adds	r0, #240	; 0xf0
 80070d2:	4770      	bx	lr

080070d4 <_localeconv_r>:
 80070d4:	4b04      	ldr	r3, [pc, #16]	; (80070e8 <_localeconv_r+0x14>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6a18      	ldr	r0, [r3, #32]
 80070da:	4b04      	ldr	r3, [pc, #16]	; (80070ec <_localeconv_r+0x18>)
 80070dc:	2800      	cmp	r0, #0
 80070de:	bf08      	it	eq
 80070e0:	4618      	moveq	r0, r3
 80070e2:	30f0      	adds	r0, #240	; 0xf0
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	2000000c 	.word	0x2000000c
 80070ec:	20000070 	.word	0x20000070

080070f0 <__ascii_mbtowc>:
 80070f0:	b082      	sub	sp, #8
 80070f2:	b901      	cbnz	r1, 80070f6 <__ascii_mbtowc+0x6>
 80070f4:	a901      	add	r1, sp, #4
 80070f6:	b142      	cbz	r2, 800710a <__ascii_mbtowc+0x1a>
 80070f8:	b14b      	cbz	r3, 800710e <__ascii_mbtowc+0x1e>
 80070fa:	7813      	ldrb	r3, [r2, #0]
 80070fc:	600b      	str	r3, [r1, #0]
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	1c10      	adds	r0, r2, #0
 8007102:	bf18      	it	ne
 8007104:	2001      	movne	r0, #1
 8007106:	b002      	add	sp, #8
 8007108:	4770      	bx	lr
 800710a:	4610      	mov	r0, r2
 800710c:	e7fb      	b.n	8007106 <__ascii_mbtowc+0x16>
 800710e:	f06f 0001 	mvn.w	r0, #1
 8007112:	e7f8      	b.n	8007106 <__ascii_mbtowc+0x16>

08007114 <memcpy>:
 8007114:	b510      	push	{r4, lr}
 8007116:	1e43      	subs	r3, r0, #1
 8007118:	440a      	add	r2, r1
 800711a:	4291      	cmp	r1, r2
 800711c:	d100      	bne.n	8007120 <memcpy+0xc>
 800711e:	bd10      	pop	{r4, pc}
 8007120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007128:	e7f7      	b.n	800711a <memcpy+0x6>

0800712a <__malloc_lock>:
 800712a:	4770      	bx	lr

0800712c <__malloc_unlock>:
 800712c:	4770      	bx	lr

0800712e <_Balloc>:
 800712e:	b570      	push	{r4, r5, r6, lr}
 8007130:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007132:	4604      	mov	r4, r0
 8007134:	460e      	mov	r6, r1
 8007136:	b93d      	cbnz	r5, 8007148 <_Balloc+0x1a>
 8007138:	2010      	movs	r0, #16
 800713a:	f7fc ff87 	bl	800404c <malloc>
 800713e:	6260      	str	r0, [r4, #36]	; 0x24
 8007140:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007144:	6005      	str	r5, [r0, #0]
 8007146:	60c5      	str	r5, [r0, #12]
 8007148:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800714a:	68eb      	ldr	r3, [r5, #12]
 800714c:	b183      	cbz	r3, 8007170 <_Balloc+0x42>
 800714e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007156:	b9b8      	cbnz	r0, 8007188 <_Balloc+0x5a>
 8007158:	2101      	movs	r1, #1
 800715a:	fa01 f506 	lsl.w	r5, r1, r6
 800715e:	1d6a      	adds	r2, r5, #5
 8007160:	0092      	lsls	r2, r2, #2
 8007162:	4620      	mov	r0, r4
 8007164:	f000 fbe1 	bl	800792a <_calloc_r>
 8007168:	b160      	cbz	r0, 8007184 <_Balloc+0x56>
 800716a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800716e:	e00e      	b.n	800718e <_Balloc+0x60>
 8007170:	2221      	movs	r2, #33	; 0x21
 8007172:	2104      	movs	r1, #4
 8007174:	4620      	mov	r0, r4
 8007176:	f000 fbd8 	bl	800792a <_calloc_r>
 800717a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800717c:	60e8      	str	r0, [r5, #12]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e4      	bne.n	800714e <_Balloc+0x20>
 8007184:	2000      	movs	r0, #0
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	6802      	ldr	r2, [r0, #0]
 800718a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800718e:	2300      	movs	r3, #0
 8007190:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007194:	e7f7      	b.n	8007186 <_Balloc+0x58>

08007196 <_Bfree>:
 8007196:	b570      	push	{r4, r5, r6, lr}
 8007198:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800719a:	4606      	mov	r6, r0
 800719c:	460d      	mov	r5, r1
 800719e:	b93c      	cbnz	r4, 80071b0 <_Bfree+0x1a>
 80071a0:	2010      	movs	r0, #16
 80071a2:	f7fc ff53 	bl	800404c <malloc>
 80071a6:	6270      	str	r0, [r6, #36]	; 0x24
 80071a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071ac:	6004      	str	r4, [r0, #0]
 80071ae:	60c4      	str	r4, [r0, #12]
 80071b0:	b13d      	cbz	r5, 80071c2 <_Bfree+0x2c>
 80071b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80071b4:	686a      	ldr	r2, [r5, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071bc:	6029      	str	r1, [r5, #0]
 80071be:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80071c2:	bd70      	pop	{r4, r5, r6, pc}

080071c4 <__multadd>:
 80071c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c8:	690d      	ldr	r5, [r1, #16]
 80071ca:	461f      	mov	r7, r3
 80071cc:	4606      	mov	r6, r0
 80071ce:	460c      	mov	r4, r1
 80071d0:	f101 0c14 	add.w	ip, r1, #20
 80071d4:	2300      	movs	r3, #0
 80071d6:	f8dc 0000 	ldr.w	r0, [ip]
 80071da:	b281      	uxth	r1, r0
 80071dc:	fb02 7101 	mla	r1, r2, r1, r7
 80071e0:	0c0f      	lsrs	r7, r1, #16
 80071e2:	0c00      	lsrs	r0, r0, #16
 80071e4:	fb02 7000 	mla	r0, r2, r0, r7
 80071e8:	b289      	uxth	r1, r1
 80071ea:	3301      	adds	r3, #1
 80071ec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80071f0:	429d      	cmp	r5, r3
 80071f2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80071f6:	f84c 1b04 	str.w	r1, [ip], #4
 80071fa:	dcec      	bgt.n	80071d6 <__multadd+0x12>
 80071fc:	b1d7      	cbz	r7, 8007234 <__multadd+0x70>
 80071fe:	68a3      	ldr	r3, [r4, #8]
 8007200:	42ab      	cmp	r3, r5
 8007202:	dc12      	bgt.n	800722a <__multadd+0x66>
 8007204:	6861      	ldr	r1, [r4, #4]
 8007206:	4630      	mov	r0, r6
 8007208:	3101      	adds	r1, #1
 800720a:	f7ff ff90 	bl	800712e <_Balloc>
 800720e:	6922      	ldr	r2, [r4, #16]
 8007210:	3202      	adds	r2, #2
 8007212:	f104 010c 	add.w	r1, r4, #12
 8007216:	4680      	mov	r8, r0
 8007218:	0092      	lsls	r2, r2, #2
 800721a:	300c      	adds	r0, #12
 800721c:	f7ff ff7a 	bl	8007114 <memcpy>
 8007220:	4621      	mov	r1, r4
 8007222:	4630      	mov	r0, r6
 8007224:	f7ff ffb7 	bl	8007196 <_Bfree>
 8007228:	4644      	mov	r4, r8
 800722a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800722e:	3501      	adds	r5, #1
 8007230:	615f      	str	r7, [r3, #20]
 8007232:	6125      	str	r5, [r4, #16]
 8007234:	4620      	mov	r0, r4
 8007236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800723a <__s2b>:
 800723a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800723e:	460c      	mov	r4, r1
 8007240:	4615      	mov	r5, r2
 8007242:	461f      	mov	r7, r3
 8007244:	2209      	movs	r2, #9
 8007246:	3308      	adds	r3, #8
 8007248:	4606      	mov	r6, r0
 800724a:	fb93 f3f2 	sdiv	r3, r3, r2
 800724e:	2100      	movs	r1, #0
 8007250:	2201      	movs	r2, #1
 8007252:	429a      	cmp	r2, r3
 8007254:	db20      	blt.n	8007298 <__s2b+0x5e>
 8007256:	4630      	mov	r0, r6
 8007258:	f7ff ff69 	bl	800712e <_Balloc>
 800725c:	9b08      	ldr	r3, [sp, #32]
 800725e:	6143      	str	r3, [r0, #20]
 8007260:	2d09      	cmp	r5, #9
 8007262:	f04f 0301 	mov.w	r3, #1
 8007266:	6103      	str	r3, [r0, #16]
 8007268:	dd19      	ble.n	800729e <__s2b+0x64>
 800726a:	f104 0809 	add.w	r8, r4, #9
 800726e:	46c1      	mov	r9, r8
 8007270:	442c      	add	r4, r5
 8007272:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007276:	4601      	mov	r1, r0
 8007278:	3b30      	subs	r3, #48	; 0x30
 800727a:	220a      	movs	r2, #10
 800727c:	4630      	mov	r0, r6
 800727e:	f7ff ffa1 	bl	80071c4 <__multadd>
 8007282:	45a1      	cmp	r9, r4
 8007284:	d1f5      	bne.n	8007272 <__s2b+0x38>
 8007286:	eb08 0405 	add.w	r4, r8, r5
 800728a:	3c08      	subs	r4, #8
 800728c:	1b2d      	subs	r5, r5, r4
 800728e:	1963      	adds	r3, r4, r5
 8007290:	42bb      	cmp	r3, r7
 8007292:	db07      	blt.n	80072a4 <__s2b+0x6a>
 8007294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007298:	0052      	lsls	r2, r2, #1
 800729a:	3101      	adds	r1, #1
 800729c:	e7d9      	b.n	8007252 <__s2b+0x18>
 800729e:	340a      	adds	r4, #10
 80072a0:	2509      	movs	r5, #9
 80072a2:	e7f3      	b.n	800728c <__s2b+0x52>
 80072a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80072a8:	4601      	mov	r1, r0
 80072aa:	3b30      	subs	r3, #48	; 0x30
 80072ac:	220a      	movs	r2, #10
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7ff ff88 	bl	80071c4 <__multadd>
 80072b4:	e7eb      	b.n	800728e <__s2b+0x54>

080072b6 <__hi0bits>:
 80072b6:	0c02      	lsrs	r2, r0, #16
 80072b8:	0412      	lsls	r2, r2, #16
 80072ba:	4603      	mov	r3, r0
 80072bc:	b9b2      	cbnz	r2, 80072ec <__hi0bits+0x36>
 80072be:	0403      	lsls	r3, r0, #16
 80072c0:	2010      	movs	r0, #16
 80072c2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072c6:	bf04      	itt	eq
 80072c8:	021b      	lsleq	r3, r3, #8
 80072ca:	3008      	addeq	r0, #8
 80072cc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072d0:	bf04      	itt	eq
 80072d2:	011b      	lsleq	r3, r3, #4
 80072d4:	3004      	addeq	r0, #4
 80072d6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072da:	bf04      	itt	eq
 80072dc:	009b      	lsleq	r3, r3, #2
 80072de:	3002      	addeq	r0, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db06      	blt.n	80072f2 <__hi0bits+0x3c>
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	d503      	bpl.n	80072f0 <__hi0bits+0x3a>
 80072e8:	3001      	adds	r0, #1
 80072ea:	4770      	bx	lr
 80072ec:	2000      	movs	r0, #0
 80072ee:	e7e8      	b.n	80072c2 <__hi0bits+0xc>
 80072f0:	2020      	movs	r0, #32
 80072f2:	4770      	bx	lr

080072f4 <__lo0bits>:
 80072f4:	6803      	ldr	r3, [r0, #0]
 80072f6:	f013 0207 	ands.w	r2, r3, #7
 80072fa:	4601      	mov	r1, r0
 80072fc:	d00b      	beq.n	8007316 <__lo0bits+0x22>
 80072fe:	07da      	lsls	r2, r3, #31
 8007300:	d423      	bmi.n	800734a <__lo0bits+0x56>
 8007302:	0798      	lsls	r0, r3, #30
 8007304:	bf49      	itett	mi
 8007306:	085b      	lsrmi	r3, r3, #1
 8007308:	089b      	lsrpl	r3, r3, #2
 800730a:	2001      	movmi	r0, #1
 800730c:	600b      	strmi	r3, [r1, #0]
 800730e:	bf5c      	itt	pl
 8007310:	600b      	strpl	r3, [r1, #0]
 8007312:	2002      	movpl	r0, #2
 8007314:	4770      	bx	lr
 8007316:	b298      	uxth	r0, r3
 8007318:	b9a8      	cbnz	r0, 8007346 <__lo0bits+0x52>
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	2010      	movs	r0, #16
 800731e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007322:	bf04      	itt	eq
 8007324:	0a1b      	lsreq	r3, r3, #8
 8007326:	3008      	addeq	r0, #8
 8007328:	071a      	lsls	r2, r3, #28
 800732a:	bf04      	itt	eq
 800732c:	091b      	lsreq	r3, r3, #4
 800732e:	3004      	addeq	r0, #4
 8007330:	079a      	lsls	r2, r3, #30
 8007332:	bf04      	itt	eq
 8007334:	089b      	lsreq	r3, r3, #2
 8007336:	3002      	addeq	r0, #2
 8007338:	07da      	lsls	r2, r3, #31
 800733a:	d402      	bmi.n	8007342 <__lo0bits+0x4e>
 800733c:	085b      	lsrs	r3, r3, #1
 800733e:	d006      	beq.n	800734e <__lo0bits+0x5a>
 8007340:	3001      	adds	r0, #1
 8007342:	600b      	str	r3, [r1, #0]
 8007344:	4770      	bx	lr
 8007346:	4610      	mov	r0, r2
 8007348:	e7e9      	b.n	800731e <__lo0bits+0x2a>
 800734a:	2000      	movs	r0, #0
 800734c:	4770      	bx	lr
 800734e:	2020      	movs	r0, #32
 8007350:	4770      	bx	lr

08007352 <__i2b>:
 8007352:	b510      	push	{r4, lr}
 8007354:	460c      	mov	r4, r1
 8007356:	2101      	movs	r1, #1
 8007358:	f7ff fee9 	bl	800712e <_Balloc>
 800735c:	2201      	movs	r2, #1
 800735e:	6144      	str	r4, [r0, #20]
 8007360:	6102      	str	r2, [r0, #16]
 8007362:	bd10      	pop	{r4, pc}

08007364 <__multiply>:
 8007364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	4614      	mov	r4, r2
 800736a:	690a      	ldr	r2, [r1, #16]
 800736c:	6923      	ldr	r3, [r4, #16]
 800736e:	429a      	cmp	r2, r3
 8007370:	bfb8      	it	lt
 8007372:	460b      	movlt	r3, r1
 8007374:	4688      	mov	r8, r1
 8007376:	bfbc      	itt	lt
 8007378:	46a0      	movlt	r8, r4
 800737a:	461c      	movlt	r4, r3
 800737c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007380:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007384:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007388:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800738c:	eb07 0609 	add.w	r6, r7, r9
 8007390:	42b3      	cmp	r3, r6
 8007392:	bfb8      	it	lt
 8007394:	3101      	addlt	r1, #1
 8007396:	f7ff feca 	bl	800712e <_Balloc>
 800739a:	f100 0514 	add.w	r5, r0, #20
 800739e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80073a2:	462b      	mov	r3, r5
 80073a4:	2200      	movs	r2, #0
 80073a6:	4573      	cmp	r3, lr
 80073a8:	d316      	bcc.n	80073d8 <__multiply+0x74>
 80073aa:	f104 0214 	add.w	r2, r4, #20
 80073ae:	f108 0114 	add.w	r1, r8, #20
 80073b2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80073b6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	9b00      	ldr	r3, [sp, #0]
 80073be:	9201      	str	r2, [sp, #4]
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d80c      	bhi.n	80073de <__multiply+0x7a>
 80073c4:	2e00      	cmp	r6, #0
 80073c6:	dd03      	ble.n	80073d0 <__multiply+0x6c>
 80073c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d05d      	beq.n	800748c <__multiply+0x128>
 80073d0:	6106      	str	r6, [r0, #16]
 80073d2:	b003      	add	sp, #12
 80073d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d8:	f843 2b04 	str.w	r2, [r3], #4
 80073dc:	e7e3      	b.n	80073a6 <__multiply+0x42>
 80073de:	f8b2 b000 	ldrh.w	fp, [r2]
 80073e2:	f1bb 0f00 	cmp.w	fp, #0
 80073e6:	d023      	beq.n	8007430 <__multiply+0xcc>
 80073e8:	4689      	mov	r9, r1
 80073ea:	46ac      	mov	ip, r5
 80073ec:	f04f 0800 	mov.w	r8, #0
 80073f0:	f859 4b04 	ldr.w	r4, [r9], #4
 80073f4:	f8dc a000 	ldr.w	sl, [ip]
 80073f8:	b2a3      	uxth	r3, r4
 80073fa:	fa1f fa8a 	uxth.w	sl, sl
 80073fe:	fb0b a303 	mla	r3, fp, r3, sl
 8007402:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007406:	f8dc 4000 	ldr.w	r4, [ip]
 800740a:	4443      	add	r3, r8
 800740c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007410:	fb0b 840a 	mla	r4, fp, sl, r8
 8007414:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007418:	46e2      	mov	sl, ip
 800741a:	b29b      	uxth	r3, r3
 800741c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007420:	454f      	cmp	r7, r9
 8007422:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007426:	f84a 3b04 	str.w	r3, [sl], #4
 800742a:	d82b      	bhi.n	8007484 <__multiply+0x120>
 800742c:	f8cc 8004 	str.w	r8, [ip, #4]
 8007430:	9b01      	ldr	r3, [sp, #4]
 8007432:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007436:	3204      	adds	r2, #4
 8007438:	f1ba 0f00 	cmp.w	sl, #0
 800743c:	d020      	beq.n	8007480 <__multiply+0x11c>
 800743e:	682b      	ldr	r3, [r5, #0]
 8007440:	4689      	mov	r9, r1
 8007442:	46a8      	mov	r8, r5
 8007444:	f04f 0b00 	mov.w	fp, #0
 8007448:	f8b9 c000 	ldrh.w	ip, [r9]
 800744c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007450:	fb0a 440c 	mla	r4, sl, ip, r4
 8007454:	445c      	add	r4, fp
 8007456:	46c4      	mov	ip, r8
 8007458:	b29b      	uxth	r3, r3
 800745a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800745e:	f84c 3b04 	str.w	r3, [ip], #4
 8007462:	f859 3b04 	ldr.w	r3, [r9], #4
 8007466:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800746a:	0c1b      	lsrs	r3, r3, #16
 800746c:	fb0a b303 	mla	r3, sl, r3, fp
 8007470:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007474:	454f      	cmp	r7, r9
 8007476:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800747a:	d805      	bhi.n	8007488 <__multiply+0x124>
 800747c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007480:	3504      	adds	r5, #4
 8007482:	e79b      	b.n	80073bc <__multiply+0x58>
 8007484:	46d4      	mov	ip, sl
 8007486:	e7b3      	b.n	80073f0 <__multiply+0x8c>
 8007488:	46e0      	mov	r8, ip
 800748a:	e7dd      	b.n	8007448 <__multiply+0xe4>
 800748c:	3e01      	subs	r6, #1
 800748e:	e799      	b.n	80073c4 <__multiply+0x60>

08007490 <__pow5mult>:
 8007490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007494:	4615      	mov	r5, r2
 8007496:	f012 0203 	ands.w	r2, r2, #3
 800749a:	4606      	mov	r6, r0
 800749c:	460f      	mov	r7, r1
 800749e:	d007      	beq.n	80074b0 <__pow5mult+0x20>
 80074a0:	3a01      	subs	r2, #1
 80074a2:	4c21      	ldr	r4, [pc, #132]	; (8007528 <__pow5mult+0x98>)
 80074a4:	2300      	movs	r3, #0
 80074a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074aa:	f7ff fe8b 	bl	80071c4 <__multadd>
 80074ae:	4607      	mov	r7, r0
 80074b0:	10ad      	asrs	r5, r5, #2
 80074b2:	d035      	beq.n	8007520 <__pow5mult+0x90>
 80074b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074b6:	b93c      	cbnz	r4, 80074c8 <__pow5mult+0x38>
 80074b8:	2010      	movs	r0, #16
 80074ba:	f7fc fdc7 	bl	800404c <malloc>
 80074be:	6270      	str	r0, [r6, #36]	; 0x24
 80074c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074c4:	6004      	str	r4, [r0, #0]
 80074c6:	60c4      	str	r4, [r0, #12]
 80074c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074d0:	b94c      	cbnz	r4, 80074e6 <__pow5mult+0x56>
 80074d2:	f240 2171 	movw	r1, #625	; 0x271
 80074d6:	4630      	mov	r0, r6
 80074d8:	f7ff ff3b 	bl	8007352 <__i2b>
 80074dc:	2300      	movs	r3, #0
 80074de:	f8c8 0008 	str.w	r0, [r8, #8]
 80074e2:	4604      	mov	r4, r0
 80074e4:	6003      	str	r3, [r0, #0]
 80074e6:	f04f 0800 	mov.w	r8, #0
 80074ea:	07eb      	lsls	r3, r5, #31
 80074ec:	d50a      	bpl.n	8007504 <__pow5mult+0x74>
 80074ee:	4639      	mov	r1, r7
 80074f0:	4622      	mov	r2, r4
 80074f2:	4630      	mov	r0, r6
 80074f4:	f7ff ff36 	bl	8007364 <__multiply>
 80074f8:	4639      	mov	r1, r7
 80074fa:	4681      	mov	r9, r0
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7ff fe4a 	bl	8007196 <_Bfree>
 8007502:	464f      	mov	r7, r9
 8007504:	106d      	asrs	r5, r5, #1
 8007506:	d00b      	beq.n	8007520 <__pow5mult+0x90>
 8007508:	6820      	ldr	r0, [r4, #0]
 800750a:	b938      	cbnz	r0, 800751c <__pow5mult+0x8c>
 800750c:	4622      	mov	r2, r4
 800750e:	4621      	mov	r1, r4
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff ff27 	bl	8007364 <__multiply>
 8007516:	6020      	str	r0, [r4, #0]
 8007518:	f8c0 8000 	str.w	r8, [r0]
 800751c:	4604      	mov	r4, r0
 800751e:	e7e4      	b.n	80074ea <__pow5mult+0x5a>
 8007520:	4638      	mov	r0, r7
 8007522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007526:	bf00      	nop
 8007528:	08008740 	.word	0x08008740

0800752c <__lshift>:
 800752c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	460c      	mov	r4, r1
 8007532:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	6849      	ldr	r1, [r1, #4]
 800753a:	eb0a 0903 	add.w	r9, sl, r3
 800753e:	68a3      	ldr	r3, [r4, #8]
 8007540:	4607      	mov	r7, r0
 8007542:	4616      	mov	r6, r2
 8007544:	f109 0501 	add.w	r5, r9, #1
 8007548:	42ab      	cmp	r3, r5
 800754a:	db32      	blt.n	80075b2 <__lshift+0x86>
 800754c:	4638      	mov	r0, r7
 800754e:	f7ff fdee 	bl	800712e <_Balloc>
 8007552:	2300      	movs	r3, #0
 8007554:	4680      	mov	r8, r0
 8007556:	f100 0114 	add.w	r1, r0, #20
 800755a:	461a      	mov	r2, r3
 800755c:	4553      	cmp	r3, sl
 800755e:	db2b      	blt.n	80075b8 <__lshift+0x8c>
 8007560:	6920      	ldr	r0, [r4, #16]
 8007562:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007566:	f104 0314 	add.w	r3, r4, #20
 800756a:	f016 021f 	ands.w	r2, r6, #31
 800756e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007572:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007576:	d025      	beq.n	80075c4 <__lshift+0x98>
 8007578:	f1c2 0e20 	rsb	lr, r2, #32
 800757c:	2000      	movs	r0, #0
 800757e:	681e      	ldr	r6, [r3, #0]
 8007580:	468a      	mov	sl, r1
 8007582:	4096      	lsls	r6, r2
 8007584:	4330      	orrs	r0, r6
 8007586:	f84a 0b04 	str.w	r0, [sl], #4
 800758a:	f853 0b04 	ldr.w	r0, [r3], #4
 800758e:	459c      	cmp	ip, r3
 8007590:	fa20 f00e 	lsr.w	r0, r0, lr
 8007594:	d814      	bhi.n	80075c0 <__lshift+0x94>
 8007596:	6048      	str	r0, [r1, #4]
 8007598:	b108      	cbz	r0, 800759e <__lshift+0x72>
 800759a:	f109 0502 	add.w	r5, r9, #2
 800759e:	3d01      	subs	r5, #1
 80075a0:	4638      	mov	r0, r7
 80075a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80075a6:	4621      	mov	r1, r4
 80075a8:	f7ff fdf5 	bl	8007196 <_Bfree>
 80075ac:	4640      	mov	r0, r8
 80075ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b2:	3101      	adds	r1, #1
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	e7c7      	b.n	8007548 <__lshift+0x1c>
 80075b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80075bc:	3301      	adds	r3, #1
 80075be:	e7cd      	b.n	800755c <__lshift+0x30>
 80075c0:	4651      	mov	r1, sl
 80075c2:	e7dc      	b.n	800757e <__lshift+0x52>
 80075c4:	3904      	subs	r1, #4
 80075c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80075ce:	459c      	cmp	ip, r3
 80075d0:	d8f9      	bhi.n	80075c6 <__lshift+0x9a>
 80075d2:	e7e4      	b.n	800759e <__lshift+0x72>

080075d4 <__mcmp>:
 80075d4:	6903      	ldr	r3, [r0, #16]
 80075d6:	690a      	ldr	r2, [r1, #16]
 80075d8:	1a9b      	subs	r3, r3, r2
 80075da:	b530      	push	{r4, r5, lr}
 80075dc:	d10c      	bne.n	80075f8 <__mcmp+0x24>
 80075de:	0092      	lsls	r2, r2, #2
 80075e0:	3014      	adds	r0, #20
 80075e2:	3114      	adds	r1, #20
 80075e4:	1884      	adds	r4, r0, r2
 80075e6:	4411      	add	r1, r2
 80075e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075f0:	4295      	cmp	r5, r2
 80075f2:	d003      	beq.n	80075fc <__mcmp+0x28>
 80075f4:	d305      	bcc.n	8007602 <__mcmp+0x2e>
 80075f6:	2301      	movs	r3, #1
 80075f8:	4618      	mov	r0, r3
 80075fa:	bd30      	pop	{r4, r5, pc}
 80075fc:	42a0      	cmp	r0, r4
 80075fe:	d3f3      	bcc.n	80075e8 <__mcmp+0x14>
 8007600:	e7fa      	b.n	80075f8 <__mcmp+0x24>
 8007602:	f04f 33ff 	mov.w	r3, #4294967295
 8007606:	e7f7      	b.n	80075f8 <__mcmp+0x24>

08007608 <__mdiff>:
 8007608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800760c:	460d      	mov	r5, r1
 800760e:	4607      	mov	r7, r0
 8007610:	4611      	mov	r1, r2
 8007612:	4628      	mov	r0, r5
 8007614:	4614      	mov	r4, r2
 8007616:	f7ff ffdd 	bl	80075d4 <__mcmp>
 800761a:	1e06      	subs	r6, r0, #0
 800761c:	d108      	bne.n	8007630 <__mdiff+0x28>
 800761e:	4631      	mov	r1, r6
 8007620:	4638      	mov	r0, r7
 8007622:	f7ff fd84 	bl	800712e <_Balloc>
 8007626:	2301      	movs	r3, #1
 8007628:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800762c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007630:	bfa4      	itt	ge
 8007632:	4623      	movge	r3, r4
 8007634:	462c      	movge	r4, r5
 8007636:	4638      	mov	r0, r7
 8007638:	6861      	ldr	r1, [r4, #4]
 800763a:	bfa6      	itte	ge
 800763c:	461d      	movge	r5, r3
 800763e:	2600      	movge	r6, #0
 8007640:	2601      	movlt	r6, #1
 8007642:	f7ff fd74 	bl	800712e <_Balloc>
 8007646:	692b      	ldr	r3, [r5, #16]
 8007648:	60c6      	str	r6, [r0, #12]
 800764a:	6926      	ldr	r6, [r4, #16]
 800764c:	f105 0914 	add.w	r9, r5, #20
 8007650:	f104 0214 	add.w	r2, r4, #20
 8007654:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007658:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800765c:	f100 0514 	add.w	r5, r0, #20
 8007660:	f04f 0e00 	mov.w	lr, #0
 8007664:	f852 ab04 	ldr.w	sl, [r2], #4
 8007668:	f859 4b04 	ldr.w	r4, [r9], #4
 800766c:	fa1e f18a 	uxtah	r1, lr, sl
 8007670:	b2a3      	uxth	r3, r4
 8007672:	1ac9      	subs	r1, r1, r3
 8007674:	0c23      	lsrs	r3, r4, #16
 8007676:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800767a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800767e:	b289      	uxth	r1, r1
 8007680:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007684:	45c8      	cmp	r8, r9
 8007686:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800768a:	4694      	mov	ip, r2
 800768c:	f845 3b04 	str.w	r3, [r5], #4
 8007690:	d8e8      	bhi.n	8007664 <__mdiff+0x5c>
 8007692:	45bc      	cmp	ip, r7
 8007694:	d304      	bcc.n	80076a0 <__mdiff+0x98>
 8007696:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800769a:	b183      	cbz	r3, 80076be <__mdiff+0xb6>
 800769c:	6106      	str	r6, [r0, #16]
 800769e:	e7c5      	b.n	800762c <__mdiff+0x24>
 80076a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80076a4:	fa1e f381 	uxtah	r3, lr, r1
 80076a8:	141a      	asrs	r2, r3, #16
 80076aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80076b8:	f845 3b04 	str.w	r3, [r5], #4
 80076bc:	e7e9      	b.n	8007692 <__mdiff+0x8a>
 80076be:	3e01      	subs	r6, #1
 80076c0:	e7e9      	b.n	8007696 <__mdiff+0x8e>
	...

080076c4 <__ulp>:
 80076c4:	4b12      	ldr	r3, [pc, #72]	; (8007710 <__ulp+0x4c>)
 80076c6:	ee10 2a90 	vmov	r2, s1
 80076ca:	401a      	ands	r2, r3
 80076cc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	dd04      	ble.n	80076de <__ulp+0x1a>
 80076d4:	2000      	movs	r0, #0
 80076d6:	4619      	mov	r1, r3
 80076d8:	ec41 0b10 	vmov	d0, r0, r1
 80076dc:	4770      	bx	lr
 80076de:	425b      	negs	r3, r3
 80076e0:	151b      	asrs	r3, r3, #20
 80076e2:	2b13      	cmp	r3, #19
 80076e4:	f04f 0000 	mov.w	r0, #0
 80076e8:	f04f 0100 	mov.w	r1, #0
 80076ec:	dc04      	bgt.n	80076f8 <__ulp+0x34>
 80076ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80076f2:	fa42 f103 	asr.w	r1, r2, r3
 80076f6:	e7ef      	b.n	80076d8 <__ulp+0x14>
 80076f8:	3b14      	subs	r3, #20
 80076fa:	2b1e      	cmp	r3, #30
 80076fc:	f04f 0201 	mov.w	r2, #1
 8007700:	bfda      	itte	le
 8007702:	f1c3 031f 	rsble	r3, r3, #31
 8007706:	fa02 f303 	lslle.w	r3, r2, r3
 800770a:	4613      	movgt	r3, r2
 800770c:	4618      	mov	r0, r3
 800770e:	e7e3      	b.n	80076d8 <__ulp+0x14>
 8007710:	7ff00000 	.word	0x7ff00000

08007714 <__b2d>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	6905      	ldr	r5, [r0, #16]
 8007718:	f100 0714 	add.w	r7, r0, #20
 800771c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007720:	1f2e      	subs	r6, r5, #4
 8007722:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007726:	4620      	mov	r0, r4
 8007728:	f7ff fdc5 	bl	80072b6 <__hi0bits>
 800772c:	f1c0 0320 	rsb	r3, r0, #32
 8007730:	280a      	cmp	r0, #10
 8007732:	600b      	str	r3, [r1, #0]
 8007734:	f8df c074 	ldr.w	ip, [pc, #116]	; 80077ac <__b2d+0x98>
 8007738:	dc14      	bgt.n	8007764 <__b2d+0x50>
 800773a:	f1c0 0e0b 	rsb	lr, r0, #11
 800773e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007742:	42b7      	cmp	r7, r6
 8007744:	ea41 030c 	orr.w	r3, r1, ip
 8007748:	bf34      	ite	cc
 800774a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800774e:	2100      	movcs	r1, #0
 8007750:	3015      	adds	r0, #21
 8007752:	fa04 f000 	lsl.w	r0, r4, r0
 8007756:	fa21 f10e 	lsr.w	r1, r1, lr
 800775a:	ea40 0201 	orr.w	r2, r0, r1
 800775e:	ec43 2b10 	vmov	d0, r2, r3
 8007762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007764:	42b7      	cmp	r7, r6
 8007766:	bf3a      	itte	cc
 8007768:	f1a5 0608 	subcc.w	r6, r5, #8
 800776c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007770:	2100      	movcs	r1, #0
 8007772:	380b      	subs	r0, #11
 8007774:	d015      	beq.n	80077a2 <__b2d+0x8e>
 8007776:	4084      	lsls	r4, r0
 8007778:	f1c0 0520 	rsb	r5, r0, #32
 800777c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007780:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007784:	42be      	cmp	r6, r7
 8007786:	fa21 fc05 	lsr.w	ip, r1, r5
 800778a:	ea44 030c 	orr.w	r3, r4, ip
 800778e:	bf8c      	ite	hi
 8007790:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007794:	2400      	movls	r4, #0
 8007796:	fa01 f000 	lsl.w	r0, r1, r0
 800779a:	40ec      	lsrs	r4, r5
 800779c:	ea40 0204 	orr.w	r2, r0, r4
 80077a0:	e7dd      	b.n	800775e <__b2d+0x4a>
 80077a2:	ea44 030c 	orr.w	r3, r4, ip
 80077a6:	460a      	mov	r2, r1
 80077a8:	e7d9      	b.n	800775e <__b2d+0x4a>
 80077aa:	bf00      	nop
 80077ac:	3ff00000 	.word	0x3ff00000

080077b0 <__d2b>:
 80077b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077b4:	460e      	mov	r6, r1
 80077b6:	2101      	movs	r1, #1
 80077b8:	ec59 8b10 	vmov	r8, r9, d0
 80077bc:	4615      	mov	r5, r2
 80077be:	f7ff fcb6 	bl	800712e <_Balloc>
 80077c2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80077c6:	4607      	mov	r7, r0
 80077c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077cc:	bb34      	cbnz	r4, 800781c <__d2b+0x6c>
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	f1b8 0300 	subs.w	r3, r8, #0
 80077d4:	d027      	beq.n	8007826 <__d2b+0x76>
 80077d6:	a802      	add	r0, sp, #8
 80077d8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80077dc:	f7ff fd8a 	bl	80072f4 <__lo0bits>
 80077e0:	9900      	ldr	r1, [sp, #0]
 80077e2:	b1f0      	cbz	r0, 8007822 <__d2b+0x72>
 80077e4:	9a01      	ldr	r2, [sp, #4]
 80077e6:	f1c0 0320 	rsb	r3, r0, #32
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	430b      	orrs	r3, r1
 80077f0:	40c2      	lsrs	r2, r0
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	9201      	str	r2, [sp, #4]
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bf14      	ite	ne
 80077fe:	2102      	movne	r1, #2
 8007800:	2101      	moveq	r1, #1
 8007802:	6139      	str	r1, [r7, #16]
 8007804:	b1c4      	cbz	r4, 8007838 <__d2b+0x88>
 8007806:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800780a:	4404      	add	r4, r0
 800780c:	6034      	str	r4, [r6, #0]
 800780e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007812:	6028      	str	r0, [r5, #0]
 8007814:	4638      	mov	r0, r7
 8007816:	b003      	add	sp, #12
 8007818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800781c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007820:	e7d5      	b.n	80077ce <__d2b+0x1e>
 8007822:	6179      	str	r1, [r7, #20]
 8007824:	e7e7      	b.n	80077f6 <__d2b+0x46>
 8007826:	a801      	add	r0, sp, #4
 8007828:	f7ff fd64 	bl	80072f4 <__lo0bits>
 800782c:	9b01      	ldr	r3, [sp, #4]
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	2101      	movs	r1, #1
 8007832:	6139      	str	r1, [r7, #16]
 8007834:	3020      	adds	r0, #32
 8007836:	e7e5      	b.n	8007804 <__d2b+0x54>
 8007838:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800783c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007840:	6030      	str	r0, [r6, #0]
 8007842:	6918      	ldr	r0, [r3, #16]
 8007844:	f7ff fd37 	bl	80072b6 <__hi0bits>
 8007848:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800784c:	e7e1      	b.n	8007812 <__d2b+0x62>

0800784e <__ratio>:
 800784e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007852:	4688      	mov	r8, r1
 8007854:	4669      	mov	r1, sp
 8007856:	4681      	mov	r9, r0
 8007858:	f7ff ff5c 	bl	8007714 <__b2d>
 800785c:	a901      	add	r1, sp, #4
 800785e:	4640      	mov	r0, r8
 8007860:	ec57 6b10 	vmov	r6, r7, d0
 8007864:	f7ff ff56 	bl	8007714 <__b2d>
 8007868:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800786c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007870:	eba3 0c02 	sub.w	ip, r3, r2
 8007874:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007878:	1a9b      	subs	r3, r3, r2
 800787a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800787e:	ec5b ab10 	vmov	sl, fp, d0
 8007882:	2b00      	cmp	r3, #0
 8007884:	bfce      	itee	gt
 8007886:	463a      	movgt	r2, r7
 8007888:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800788c:	465a      	movle	r2, fp
 800788e:	4659      	mov	r1, fp
 8007890:	463d      	mov	r5, r7
 8007892:	bfd4      	ite	le
 8007894:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007898:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800789c:	4630      	mov	r0, r6
 800789e:	ee10 2a10 	vmov	r2, s0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4629      	mov	r1, r5
 80078a6:	f7f8 ffd9 	bl	800085c <__aeabi_ddiv>
 80078aa:	ec41 0b10 	vmov	d0, r0, r1
 80078ae:	b003      	add	sp, #12
 80078b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078b4 <__copybits>:
 80078b4:	3901      	subs	r1, #1
 80078b6:	b510      	push	{r4, lr}
 80078b8:	1149      	asrs	r1, r1, #5
 80078ba:	6914      	ldr	r4, [r2, #16]
 80078bc:	3101      	adds	r1, #1
 80078be:	f102 0314 	add.w	r3, r2, #20
 80078c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80078c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80078ca:	42a3      	cmp	r3, r4
 80078cc:	4602      	mov	r2, r0
 80078ce:	d303      	bcc.n	80078d8 <__copybits+0x24>
 80078d0:	2300      	movs	r3, #0
 80078d2:	428a      	cmp	r2, r1
 80078d4:	d305      	bcc.n	80078e2 <__copybits+0x2e>
 80078d6:	bd10      	pop	{r4, pc}
 80078d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078dc:	f840 2b04 	str.w	r2, [r0], #4
 80078e0:	e7f3      	b.n	80078ca <__copybits+0x16>
 80078e2:	f842 3b04 	str.w	r3, [r2], #4
 80078e6:	e7f4      	b.n	80078d2 <__copybits+0x1e>

080078e8 <__any_on>:
 80078e8:	f100 0214 	add.w	r2, r0, #20
 80078ec:	6900      	ldr	r0, [r0, #16]
 80078ee:	114b      	asrs	r3, r1, #5
 80078f0:	4298      	cmp	r0, r3
 80078f2:	b510      	push	{r4, lr}
 80078f4:	db11      	blt.n	800791a <__any_on+0x32>
 80078f6:	dd0a      	ble.n	800790e <__any_on+0x26>
 80078f8:	f011 011f 	ands.w	r1, r1, #31
 80078fc:	d007      	beq.n	800790e <__any_on+0x26>
 80078fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007902:	fa24 f001 	lsr.w	r0, r4, r1
 8007906:	fa00 f101 	lsl.w	r1, r0, r1
 800790a:	428c      	cmp	r4, r1
 800790c:	d10b      	bne.n	8007926 <__any_on+0x3e>
 800790e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007912:	4293      	cmp	r3, r2
 8007914:	d803      	bhi.n	800791e <__any_on+0x36>
 8007916:	2000      	movs	r0, #0
 8007918:	bd10      	pop	{r4, pc}
 800791a:	4603      	mov	r3, r0
 800791c:	e7f7      	b.n	800790e <__any_on+0x26>
 800791e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007922:	2900      	cmp	r1, #0
 8007924:	d0f5      	beq.n	8007912 <__any_on+0x2a>
 8007926:	2001      	movs	r0, #1
 8007928:	e7f6      	b.n	8007918 <__any_on+0x30>

0800792a <_calloc_r>:
 800792a:	b538      	push	{r3, r4, r5, lr}
 800792c:	fb02 f401 	mul.w	r4, r2, r1
 8007930:	4621      	mov	r1, r4
 8007932:	f7fc fbf1 	bl	8004118 <_malloc_r>
 8007936:	4605      	mov	r5, r0
 8007938:	b118      	cbz	r0, 8007942 <_calloc_r+0x18>
 800793a:	4622      	mov	r2, r4
 800793c:	2100      	movs	r1, #0
 800793e:	f7fc fb95 	bl	800406c <memset>
 8007942:	4628      	mov	r0, r5
 8007944:	bd38      	pop	{r3, r4, r5, pc}

08007946 <__ssputs_r>:
 8007946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794a:	688e      	ldr	r6, [r1, #8]
 800794c:	429e      	cmp	r6, r3
 800794e:	4682      	mov	sl, r0
 8007950:	460c      	mov	r4, r1
 8007952:	4690      	mov	r8, r2
 8007954:	4699      	mov	r9, r3
 8007956:	d837      	bhi.n	80079c8 <__ssputs_r+0x82>
 8007958:	898a      	ldrh	r2, [r1, #12]
 800795a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800795e:	d031      	beq.n	80079c4 <__ssputs_r+0x7e>
 8007960:	6825      	ldr	r5, [r4, #0]
 8007962:	6909      	ldr	r1, [r1, #16]
 8007964:	1a6f      	subs	r7, r5, r1
 8007966:	6965      	ldr	r5, [r4, #20]
 8007968:	2302      	movs	r3, #2
 800796a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800796e:	fb95 f5f3 	sdiv	r5, r5, r3
 8007972:	f109 0301 	add.w	r3, r9, #1
 8007976:	443b      	add	r3, r7
 8007978:	429d      	cmp	r5, r3
 800797a:	bf38      	it	cc
 800797c:	461d      	movcc	r5, r3
 800797e:	0553      	lsls	r3, r2, #21
 8007980:	d530      	bpl.n	80079e4 <__ssputs_r+0x9e>
 8007982:	4629      	mov	r1, r5
 8007984:	f7fc fbc8 	bl	8004118 <_malloc_r>
 8007988:	4606      	mov	r6, r0
 800798a:	b950      	cbnz	r0, 80079a2 <__ssputs_r+0x5c>
 800798c:	230c      	movs	r3, #12
 800798e:	f8ca 3000 	str.w	r3, [sl]
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007998:	81a3      	strh	r3, [r4, #12]
 800799a:	f04f 30ff 	mov.w	r0, #4294967295
 800799e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a2:	463a      	mov	r2, r7
 80079a4:	6921      	ldr	r1, [r4, #16]
 80079a6:	f7ff fbb5 	bl	8007114 <memcpy>
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	6126      	str	r6, [r4, #16]
 80079b8:	6165      	str	r5, [r4, #20]
 80079ba:	443e      	add	r6, r7
 80079bc:	1bed      	subs	r5, r5, r7
 80079be:	6026      	str	r6, [r4, #0]
 80079c0:	60a5      	str	r5, [r4, #8]
 80079c2:	464e      	mov	r6, r9
 80079c4:	454e      	cmp	r6, r9
 80079c6:	d900      	bls.n	80079ca <__ssputs_r+0x84>
 80079c8:	464e      	mov	r6, r9
 80079ca:	4632      	mov	r2, r6
 80079cc:	4641      	mov	r1, r8
 80079ce:	6820      	ldr	r0, [r4, #0]
 80079d0:	f000 fd25 	bl	800841e <memmove>
 80079d4:	68a3      	ldr	r3, [r4, #8]
 80079d6:	1b9b      	subs	r3, r3, r6
 80079d8:	60a3      	str	r3, [r4, #8]
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	441e      	add	r6, r3
 80079de:	6026      	str	r6, [r4, #0]
 80079e0:	2000      	movs	r0, #0
 80079e2:	e7dc      	b.n	800799e <__ssputs_r+0x58>
 80079e4:	462a      	mov	r2, r5
 80079e6:	f000 fd33 	bl	8008450 <_realloc_r>
 80079ea:	4606      	mov	r6, r0
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d1e2      	bne.n	80079b6 <__ssputs_r+0x70>
 80079f0:	6921      	ldr	r1, [r4, #16]
 80079f2:	4650      	mov	r0, sl
 80079f4:	f7fc fb42 	bl	800407c <_free_r>
 80079f8:	e7c8      	b.n	800798c <__ssputs_r+0x46>
	...

080079fc <_svfiprintf_r>:
 80079fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a00:	461d      	mov	r5, r3
 8007a02:	898b      	ldrh	r3, [r1, #12]
 8007a04:	061f      	lsls	r7, r3, #24
 8007a06:	b09d      	sub	sp, #116	; 0x74
 8007a08:	4680      	mov	r8, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	4616      	mov	r6, r2
 8007a0e:	d50f      	bpl.n	8007a30 <_svfiprintf_r+0x34>
 8007a10:	690b      	ldr	r3, [r1, #16]
 8007a12:	b96b      	cbnz	r3, 8007a30 <_svfiprintf_r+0x34>
 8007a14:	2140      	movs	r1, #64	; 0x40
 8007a16:	f7fc fb7f 	bl	8004118 <_malloc_r>
 8007a1a:	6020      	str	r0, [r4, #0]
 8007a1c:	6120      	str	r0, [r4, #16]
 8007a1e:	b928      	cbnz	r0, 8007a2c <_svfiprintf_r+0x30>
 8007a20:	230c      	movs	r3, #12
 8007a22:	f8c8 3000 	str.w	r3, [r8]
 8007a26:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2a:	e0c8      	b.n	8007bbe <_svfiprintf_r+0x1c2>
 8007a2c:	2340      	movs	r3, #64	; 0x40
 8007a2e:	6163      	str	r3, [r4, #20]
 8007a30:	2300      	movs	r3, #0
 8007a32:	9309      	str	r3, [sp, #36]	; 0x24
 8007a34:	2320      	movs	r3, #32
 8007a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a3a:	2330      	movs	r3, #48	; 0x30
 8007a3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a40:	9503      	str	r5, [sp, #12]
 8007a42:	f04f 0b01 	mov.w	fp, #1
 8007a46:	4637      	mov	r7, r6
 8007a48:	463d      	mov	r5, r7
 8007a4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a4e:	b10b      	cbz	r3, 8007a54 <_svfiprintf_r+0x58>
 8007a50:	2b25      	cmp	r3, #37	; 0x25
 8007a52:	d13e      	bne.n	8007ad2 <_svfiprintf_r+0xd6>
 8007a54:	ebb7 0a06 	subs.w	sl, r7, r6
 8007a58:	d00b      	beq.n	8007a72 <_svfiprintf_r+0x76>
 8007a5a:	4653      	mov	r3, sl
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4640      	mov	r0, r8
 8007a62:	f7ff ff70 	bl	8007946 <__ssputs_r>
 8007a66:	3001      	adds	r0, #1
 8007a68:	f000 80a4 	beq.w	8007bb4 <_svfiprintf_r+0x1b8>
 8007a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6e:	4453      	add	r3, sl
 8007a70:	9309      	str	r3, [sp, #36]	; 0x24
 8007a72:	783b      	ldrb	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 809d 	beq.w	8007bb4 <_svfiprintf_r+0x1b8>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a84:	9304      	str	r3, [sp, #16]
 8007a86:	9307      	str	r3, [sp, #28]
 8007a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8007a8e:	462f      	mov	r7, r5
 8007a90:	2205      	movs	r2, #5
 8007a92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007a96:	4850      	ldr	r0, [pc, #320]	; (8007bd8 <_svfiprintf_r+0x1dc>)
 8007a98:	f7f8 fbaa 	bl	80001f0 <memchr>
 8007a9c:	9b04      	ldr	r3, [sp, #16]
 8007a9e:	b9d0      	cbnz	r0, 8007ad6 <_svfiprintf_r+0xda>
 8007aa0:	06d9      	lsls	r1, r3, #27
 8007aa2:	bf44      	itt	mi
 8007aa4:	2220      	movmi	r2, #32
 8007aa6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007aaa:	071a      	lsls	r2, r3, #28
 8007aac:	bf44      	itt	mi
 8007aae:	222b      	movmi	r2, #43	; 0x2b
 8007ab0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ab4:	782a      	ldrb	r2, [r5, #0]
 8007ab6:	2a2a      	cmp	r2, #42	; 0x2a
 8007ab8:	d015      	beq.n	8007ae6 <_svfiprintf_r+0xea>
 8007aba:	9a07      	ldr	r2, [sp, #28]
 8007abc:	462f      	mov	r7, r5
 8007abe:	2000      	movs	r0, #0
 8007ac0:	250a      	movs	r5, #10
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac8:	3b30      	subs	r3, #48	; 0x30
 8007aca:	2b09      	cmp	r3, #9
 8007acc:	d94d      	bls.n	8007b6a <_svfiprintf_r+0x16e>
 8007ace:	b1b8      	cbz	r0, 8007b00 <_svfiprintf_r+0x104>
 8007ad0:	e00f      	b.n	8007af2 <_svfiprintf_r+0xf6>
 8007ad2:	462f      	mov	r7, r5
 8007ad4:	e7b8      	b.n	8007a48 <_svfiprintf_r+0x4c>
 8007ad6:	4a40      	ldr	r2, [pc, #256]	; (8007bd8 <_svfiprintf_r+0x1dc>)
 8007ad8:	1a80      	subs	r0, r0, r2
 8007ada:	fa0b f000 	lsl.w	r0, fp, r0
 8007ade:	4318      	orrs	r0, r3
 8007ae0:	9004      	str	r0, [sp, #16]
 8007ae2:	463d      	mov	r5, r7
 8007ae4:	e7d3      	b.n	8007a8e <_svfiprintf_r+0x92>
 8007ae6:	9a03      	ldr	r2, [sp, #12]
 8007ae8:	1d11      	adds	r1, r2, #4
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	9103      	str	r1, [sp, #12]
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	db01      	blt.n	8007af6 <_svfiprintf_r+0xfa>
 8007af2:	9207      	str	r2, [sp, #28]
 8007af4:	e004      	b.n	8007b00 <_svfiprintf_r+0x104>
 8007af6:	4252      	negs	r2, r2
 8007af8:	f043 0302 	orr.w	r3, r3, #2
 8007afc:	9207      	str	r2, [sp, #28]
 8007afe:	9304      	str	r3, [sp, #16]
 8007b00:	783b      	ldrb	r3, [r7, #0]
 8007b02:	2b2e      	cmp	r3, #46	; 0x2e
 8007b04:	d10c      	bne.n	8007b20 <_svfiprintf_r+0x124>
 8007b06:	787b      	ldrb	r3, [r7, #1]
 8007b08:	2b2a      	cmp	r3, #42	; 0x2a
 8007b0a:	d133      	bne.n	8007b74 <_svfiprintf_r+0x178>
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	1d1a      	adds	r2, r3, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	9203      	str	r2, [sp, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bfb8      	it	lt
 8007b18:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b1c:	3702      	adds	r7, #2
 8007b1e:	9305      	str	r3, [sp, #20]
 8007b20:	4d2e      	ldr	r5, [pc, #184]	; (8007bdc <_svfiprintf_r+0x1e0>)
 8007b22:	7839      	ldrb	r1, [r7, #0]
 8007b24:	2203      	movs	r2, #3
 8007b26:	4628      	mov	r0, r5
 8007b28:	f7f8 fb62 	bl	80001f0 <memchr>
 8007b2c:	b138      	cbz	r0, 8007b3e <_svfiprintf_r+0x142>
 8007b2e:	2340      	movs	r3, #64	; 0x40
 8007b30:	1b40      	subs	r0, r0, r5
 8007b32:	fa03 f000 	lsl.w	r0, r3, r0
 8007b36:	9b04      	ldr	r3, [sp, #16]
 8007b38:	4303      	orrs	r3, r0
 8007b3a:	3701      	adds	r7, #1
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	7839      	ldrb	r1, [r7, #0]
 8007b40:	4827      	ldr	r0, [pc, #156]	; (8007be0 <_svfiprintf_r+0x1e4>)
 8007b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b46:	2206      	movs	r2, #6
 8007b48:	1c7e      	adds	r6, r7, #1
 8007b4a:	f7f8 fb51 	bl	80001f0 <memchr>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d038      	beq.n	8007bc4 <_svfiprintf_r+0x1c8>
 8007b52:	4b24      	ldr	r3, [pc, #144]	; (8007be4 <_svfiprintf_r+0x1e8>)
 8007b54:	bb13      	cbnz	r3, 8007b9c <_svfiprintf_r+0x1a0>
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	3307      	adds	r3, #7
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	3308      	adds	r3, #8
 8007b60:	9303      	str	r3, [sp, #12]
 8007b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b64:	444b      	add	r3, r9
 8007b66:	9309      	str	r3, [sp, #36]	; 0x24
 8007b68:	e76d      	b.n	8007a46 <_svfiprintf_r+0x4a>
 8007b6a:	fb05 3202 	mla	r2, r5, r2, r3
 8007b6e:	2001      	movs	r0, #1
 8007b70:	460f      	mov	r7, r1
 8007b72:	e7a6      	b.n	8007ac2 <_svfiprintf_r+0xc6>
 8007b74:	2300      	movs	r3, #0
 8007b76:	3701      	adds	r7, #1
 8007b78:	9305      	str	r3, [sp, #20]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	250a      	movs	r5, #10
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b84:	3a30      	subs	r2, #48	; 0x30
 8007b86:	2a09      	cmp	r2, #9
 8007b88:	d903      	bls.n	8007b92 <_svfiprintf_r+0x196>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0c8      	beq.n	8007b20 <_svfiprintf_r+0x124>
 8007b8e:	9105      	str	r1, [sp, #20]
 8007b90:	e7c6      	b.n	8007b20 <_svfiprintf_r+0x124>
 8007b92:	fb05 2101 	mla	r1, r5, r1, r2
 8007b96:	2301      	movs	r3, #1
 8007b98:	4607      	mov	r7, r0
 8007b9a:	e7f0      	b.n	8007b7e <_svfiprintf_r+0x182>
 8007b9c:	ab03      	add	r3, sp, #12
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <_svfiprintf_r+0x1ec>)
 8007ba4:	a904      	add	r1, sp, #16
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	f7fc fba4 	bl	80042f4 <_printf_float>
 8007bac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007bb0:	4681      	mov	r9, r0
 8007bb2:	d1d6      	bne.n	8007b62 <_svfiprintf_r+0x166>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	065b      	lsls	r3, r3, #25
 8007bb8:	f53f af35 	bmi.w	8007a26 <_svfiprintf_r+0x2a>
 8007bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bbe:	b01d      	add	sp, #116	; 0x74
 8007bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc4:	ab03      	add	r3, sp, #12
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	4622      	mov	r2, r4
 8007bca:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <_svfiprintf_r+0x1ec>)
 8007bcc:	a904      	add	r1, sp, #16
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f7fc fe46 	bl	8004860 <_printf_i>
 8007bd4:	e7ea      	b.n	8007bac <_svfiprintf_r+0x1b0>
 8007bd6:	bf00      	nop
 8007bd8:	0800874c 	.word	0x0800874c
 8007bdc:	08008752 	.word	0x08008752
 8007be0:	08008756 	.word	0x08008756
 8007be4:	080042f5 	.word	0x080042f5
 8007be8:	08007947 	.word	0x08007947

08007bec <_sungetc_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	1c4b      	adds	r3, r1, #1
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	d103      	bne.n	8007bfc <_sungetc_r+0x10>
 8007bf4:	f04f 35ff 	mov.w	r5, #4294967295
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
 8007bfc:	8993      	ldrh	r3, [r2, #12]
 8007bfe:	f023 0320 	bic.w	r3, r3, #32
 8007c02:	8193      	strh	r3, [r2, #12]
 8007c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c06:	6852      	ldr	r2, [r2, #4]
 8007c08:	b2cd      	uxtb	r5, r1
 8007c0a:	b18b      	cbz	r3, 8007c30 <_sungetc_r+0x44>
 8007c0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	dd08      	ble.n	8007c24 <_sungetc_r+0x38>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	1e5a      	subs	r2, r3, #1
 8007c16:	6022      	str	r2, [r4, #0]
 8007c18:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007c1c:	6863      	ldr	r3, [r4, #4]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	6063      	str	r3, [r4, #4]
 8007c22:	e7e9      	b.n	8007bf8 <_sungetc_r+0xc>
 8007c24:	4621      	mov	r1, r4
 8007c26:	f000 fbb3 	bl	8008390 <__submore>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d0f1      	beq.n	8007c12 <_sungetc_r+0x26>
 8007c2e:	e7e1      	b.n	8007bf4 <_sungetc_r+0x8>
 8007c30:	6921      	ldr	r1, [r4, #16]
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	b151      	cbz	r1, 8007c4c <_sungetc_r+0x60>
 8007c36:	4299      	cmp	r1, r3
 8007c38:	d208      	bcs.n	8007c4c <_sungetc_r+0x60>
 8007c3a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007c3e:	42a9      	cmp	r1, r5
 8007c40:	d104      	bne.n	8007c4c <_sungetc_r+0x60>
 8007c42:	3b01      	subs	r3, #1
 8007c44:	3201      	adds	r2, #1
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	6062      	str	r2, [r4, #4]
 8007c4a:	e7d5      	b.n	8007bf8 <_sungetc_r+0xc>
 8007c4c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c54:	6363      	str	r3, [r4, #52]	; 0x34
 8007c56:	2303      	movs	r3, #3
 8007c58:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c5a:	4623      	mov	r3, r4
 8007c5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	2301      	movs	r3, #1
 8007c64:	e7dc      	b.n	8007c20 <_sungetc_r+0x34>

08007c66 <__ssrefill_r>:
 8007c66:	b510      	push	{r4, lr}
 8007c68:	460c      	mov	r4, r1
 8007c6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007c6c:	b169      	cbz	r1, 8007c8a <__ssrefill_r+0x24>
 8007c6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c72:	4299      	cmp	r1, r3
 8007c74:	d001      	beq.n	8007c7a <__ssrefill_r+0x14>
 8007c76:	f7fc fa01 	bl	800407c <_free_r>
 8007c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c7c:	6063      	str	r3, [r4, #4]
 8007c7e:	2000      	movs	r0, #0
 8007c80:	6360      	str	r0, [r4, #52]	; 0x34
 8007c82:	b113      	cbz	r3, 8007c8a <__ssrefill_r+0x24>
 8007c84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c86:	6023      	str	r3, [r4, #0]
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	6923      	ldr	r3, [r4, #16]
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	6063      	str	r3, [r4, #4]
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	f043 0320 	orr.w	r3, r3, #32
 8007c98:	81a3      	strh	r3, [r4, #12]
 8007c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9e:	e7f3      	b.n	8007c88 <__ssrefill_r+0x22>

08007ca0 <__ssvfiscanf_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8007ca8:	460c      	mov	r4, r1
 8007caa:	2100      	movs	r1, #0
 8007cac:	9144      	str	r1, [sp, #272]	; 0x110
 8007cae:	9145      	str	r1, [sp, #276]	; 0x114
 8007cb0:	499f      	ldr	r1, [pc, #636]	; (8007f30 <__ssvfiscanf_r+0x290>)
 8007cb2:	91a0      	str	r1, [sp, #640]	; 0x280
 8007cb4:	f10d 0804 	add.w	r8, sp, #4
 8007cb8:	499e      	ldr	r1, [pc, #632]	; (8007f34 <__ssvfiscanf_r+0x294>)
 8007cba:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8007f38 <__ssvfiscanf_r+0x298>
 8007cbe:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	4692      	mov	sl, r2
 8007cc6:	91a1      	str	r1, [sp, #644]	; 0x284
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	270a      	movs	r7, #10
 8007ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 812a 	beq.w	8007f2a <__ssvfiscanf_r+0x28a>
 8007cd6:	4655      	mov	r5, sl
 8007cd8:	f7ff f9ec 	bl	80070b4 <__locale_ctype_ptr>
 8007cdc:	f815 bb01 	ldrb.w	fp, [r5], #1
 8007ce0:	4458      	add	r0, fp
 8007ce2:	7843      	ldrb	r3, [r0, #1]
 8007ce4:	f013 0308 	ands.w	r3, r3, #8
 8007ce8:	d01c      	beq.n	8007d24 <__ssvfiscanf_r+0x84>
 8007cea:	6863      	ldr	r3, [r4, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	dd12      	ble.n	8007d16 <__ssvfiscanf_r+0x76>
 8007cf0:	f7ff f9e0 	bl	80070b4 <__locale_ctype_ptr>
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	781a      	ldrb	r2, [r3, #0]
 8007cf8:	4410      	add	r0, r2
 8007cfa:	7842      	ldrb	r2, [r0, #1]
 8007cfc:	0712      	lsls	r2, r2, #28
 8007cfe:	d401      	bmi.n	8007d04 <__ssvfiscanf_r+0x64>
 8007d00:	46aa      	mov	sl, r5
 8007d02:	e7e3      	b.n	8007ccc <__ssvfiscanf_r+0x2c>
 8007d04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007d06:	3201      	adds	r2, #1
 8007d08:	9245      	str	r2, [sp, #276]	; 0x114
 8007d0a:	6862      	ldr	r2, [r4, #4]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	3a01      	subs	r2, #1
 8007d10:	6062      	str	r2, [r4, #4]
 8007d12:	6023      	str	r3, [r4, #0]
 8007d14:	e7e9      	b.n	8007cea <__ssvfiscanf_r+0x4a>
 8007d16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007d18:	4621      	mov	r1, r4
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4798      	blx	r3
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d0e6      	beq.n	8007cf0 <__ssvfiscanf_r+0x50>
 8007d22:	e7ed      	b.n	8007d00 <__ssvfiscanf_r+0x60>
 8007d24:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8007d28:	f040 8082 	bne.w	8007e30 <__ssvfiscanf_r+0x190>
 8007d2c:	9343      	str	r3, [sp, #268]	; 0x10c
 8007d2e:	9341      	str	r3, [sp, #260]	; 0x104
 8007d30:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007d34:	2b2a      	cmp	r3, #42	; 0x2a
 8007d36:	d103      	bne.n	8007d40 <__ssvfiscanf_r+0xa0>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	9341      	str	r3, [sp, #260]	; 0x104
 8007d3c:	f10a 0502 	add.w	r5, sl, #2
 8007d40:	46aa      	mov	sl, r5
 8007d42:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007d46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007d4a:	2a09      	cmp	r2, #9
 8007d4c:	d922      	bls.n	8007d94 <__ssvfiscanf_r+0xf4>
 8007d4e:	2203      	movs	r2, #3
 8007d50:	4879      	ldr	r0, [pc, #484]	; (8007f38 <__ssvfiscanf_r+0x298>)
 8007d52:	f7f8 fa4d 	bl	80001f0 <memchr>
 8007d56:	b138      	cbz	r0, 8007d68 <__ssvfiscanf_r+0xc8>
 8007d58:	eba0 0309 	sub.w	r3, r0, r9
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	4098      	lsls	r0, r3
 8007d60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007d62:	4318      	orrs	r0, r3
 8007d64:	9041      	str	r0, [sp, #260]	; 0x104
 8007d66:	46aa      	mov	sl, r5
 8007d68:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6c:	2b67      	cmp	r3, #103	; 0x67
 8007d6e:	f10a 0501 	add.w	r5, sl, #1
 8007d72:	d82b      	bhi.n	8007dcc <__ssvfiscanf_r+0x12c>
 8007d74:	2b65      	cmp	r3, #101	; 0x65
 8007d76:	f080 809f 	bcs.w	8007eb8 <__ssvfiscanf_r+0x218>
 8007d7a:	2b47      	cmp	r3, #71	; 0x47
 8007d7c:	d810      	bhi.n	8007da0 <__ssvfiscanf_r+0x100>
 8007d7e:	2b45      	cmp	r3, #69	; 0x45
 8007d80:	f080 809a 	bcs.w	8007eb8 <__ssvfiscanf_r+0x218>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d06c      	beq.n	8007e62 <__ssvfiscanf_r+0x1c2>
 8007d88:	2b25      	cmp	r3, #37	; 0x25
 8007d8a:	d051      	beq.n	8007e30 <__ssvfiscanf_r+0x190>
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007d90:	9742      	str	r7, [sp, #264]	; 0x108
 8007d92:	e027      	b.n	8007de4 <__ssvfiscanf_r+0x144>
 8007d94:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007d96:	fb07 1303 	mla	r3, r7, r3, r1
 8007d9a:	3b30      	subs	r3, #48	; 0x30
 8007d9c:	9343      	str	r3, [sp, #268]	; 0x10c
 8007d9e:	e7cf      	b.n	8007d40 <__ssvfiscanf_r+0xa0>
 8007da0:	2b5b      	cmp	r3, #91	; 0x5b
 8007da2:	d06a      	beq.n	8007e7a <__ssvfiscanf_r+0x1da>
 8007da4:	d80c      	bhi.n	8007dc0 <__ssvfiscanf_r+0x120>
 8007da6:	2b58      	cmp	r3, #88	; 0x58
 8007da8:	d1f0      	bne.n	8007d8c <__ssvfiscanf_r+0xec>
 8007daa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007db0:	9241      	str	r2, [sp, #260]	; 0x104
 8007db2:	2210      	movs	r2, #16
 8007db4:	9242      	str	r2, [sp, #264]	; 0x108
 8007db6:	2b6e      	cmp	r3, #110	; 0x6e
 8007db8:	bf8c      	ite	hi
 8007dba:	2304      	movhi	r3, #4
 8007dbc:	2303      	movls	r3, #3
 8007dbe:	e010      	b.n	8007de2 <__ssvfiscanf_r+0x142>
 8007dc0:	2b63      	cmp	r3, #99	; 0x63
 8007dc2:	d065      	beq.n	8007e90 <__ssvfiscanf_r+0x1f0>
 8007dc4:	2b64      	cmp	r3, #100	; 0x64
 8007dc6:	d1e1      	bne.n	8007d8c <__ssvfiscanf_r+0xec>
 8007dc8:	9742      	str	r7, [sp, #264]	; 0x108
 8007dca:	e7f4      	b.n	8007db6 <__ssvfiscanf_r+0x116>
 8007dcc:	2b70      	cmp	r3, #112	; 0x70
 8007dce:	d04b      	beq.n	8007e68 <__ssvfiscanf_r+0x1c8>
 8007dd0:	d826      	bhi.n	8007e20 <__ssvfiscanf_r+0x180>
 8007dd2:	2b6e      	cmp	r3, #110	; 0x6e
 8007dd4:	d062      	beq.n	8007e9c <__ssvfiscanf_r+0x1fc>
 8007dd6:	d84c      	bhi.n	8007e72 <__ssvfiscanf_r+0x1d2>
 8007dd8:	2b69      	cmp	r3, #105	; 0x69
 8007dda:	d1d7      	bne.n	8007d8c <__ssvfiscanf_r+0xec>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	9342      	str	r3, [sp, #264]	; 0x108
 8007de0:	2303      	movs	r3, #3
 8007de2:	9347      	str	r3, [sp, #284]	; 0x11c
 8007de4:	6863      	ldr	r3, [r4, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	dd68      	ble.n	8007ebc <__ssvfiscanf_r+0x21c>
 8007dea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007dec:	0659      	lsls	r1, r3, #25
 8007dee:	d407      	bmi.n	8007e00 <__ssvfiscanf_r+0x160>
 8007df0:	f7ff f960 	bl	80070b4 <__locale_ctype_ptr>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	781a      	ldrb	r2, [r3, #0]
 8007df8:	4410      	add	r0, r2
 8007dfa:	7842      	ldrb	r2, [r0, #1]
 8007dfc:	0712      	lsls	r2, r2, #28
 8007dfe:	d464      	bmi.n	8007eca <__ssvfiscanf_r+0x22a>
 8007e00:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	dc73      	bgt.n	8007eee <__ssvfiscanf_r+0x24e>
 8007e06:	466b      	mov	r3, sp
 8007e08:	4622      	mov	r2, r4
 8007e0a:	a941      	add	r1, sp, #260	; 0x104
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f000 f897 	bl	8007f40 <_scanf_chars>
 8007e12:	2801      	cmp	r0, #1
 8007e14:	f000 8089 	beq.w	8007f2a <__ssvfiscanf_r+0x28a>
 8007e18:	2802      	cmp	r0, #2
 8007e1a:	f47f af71 	bne.w	8007d00 <__ssvfiscanf_r+0x60>
 8007e1e:	e01d      	b.n	8007e5c <__ssvfiscanf_r+0x1bc>
 8007e20:	2b75      	cmp	r3, #117	; 0x75
 8007e22:	d0d1      	beq.n	8007dc8 <__ssvfiscanf_r+0x128>
 8007e24:	2b78      	cmp	r3, #120	; 0x78
 8007e26:	d0c0      	beq.n	8007daa <__ssvfiscanf_r+0x10a>
 8007e28:	2b73      	cmp	r3, #115	; 0x73
 8007e2a:	d1af      	bne.n	8007d8c <__ssvfiscanf_r+0xec>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e7d8      	b.n	8007de2 <__ssvfiscanf_r+0x142>
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	dd0c      	ble.n	8007e50 <__ssvfiscanf_r+0x1b0>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	781a      	ldrb	r2, [r3, #0]
 8007e3a:	455a      	cmp	r2, fp
 8007e3c:	d175      	bne.n	8007f2a <__ssvfiscanf_r+0x28a>
 8007e3e:	3301      	adds	r3, #1
 8007e40:	6862      	ldr	r2, [r4, #4]
 8007e42:	6023      	str	r3, [r4, #0]
 8007e44:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007e46:	3a01      	subs	r2, #1
 8007e48:	3301      	adds	r3, #1
 8007e4a:	6062      	str	r2, [r4, #4]
 8007e4c:	9345      	str	r3, [sp, #276]	; 0x114
 8007e4e:	e757      	b.n	8007d00 <__ssvfiscanf_r+0x60>
 8007e50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007e52:	4621      	mov	r1, r4
 8007e54:	4630      	mov	r0, r6
 8007e56:	4798      	blx	r3
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d0ec      	beq.n	8007e36 <__ssvfiscanf_r+0x196>
 8007e5c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d159      	bne.n	8007f16 <__ssvfiscanf_r+0x276>
 8007e62:	f04f 30ff 	mov.w	r0, #4294967295
 8007e66:	e05c      	b.n	8007f22 <__ssvfiscanf_r+0x282>
 8007e68:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007e6a:	f042 0220 	orr.w	r2, r2, #32
 8007e6e:	9241      	str	r2, [sp, #260]	; 0x104
 8007e70:	e79b      	b.n	8007daa <__ssvfiscanf_r+0x10a>
 8007e72:	2308      	movs	r3, #8
 8007e74:	9342      	str	r3, [sp, #264]	; 0x108
 8007e76:	2304      	movs	r3, #4
 8007e78:	e7b3      	b.n	8007de2 <__ssvfiscanf_r+0x142>
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	f000 f9b7 	bl	80081f0 <__sccl>
 8007e82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e88:	9341      	str	r3, [sp, #260]	; 0x104
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e7a8      	b.n	8007de2 <__ssvfiscanf_r+0x142>
 8007e90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e96:	9341      	str	r3, [sp, #260]	; 0x104
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e7a2      	b.n	8007de2 <__ssvfiscanf_r+0x142>
 8007e9c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007e9e:	06c3      	lsls	r3, r0, #27
 8007ea0:	f53f af2e 	bmi.w	8007d00 <__ssvfiscanf_r+0x60>
 8007ea4:	9b00      	ldr	r3, [sp, #0]
 8007ea6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007ea8:	1d19      	adds	r1, r3, #4
 8007eaa:	9100      	str	r1, [sp, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	07c0      	lsls	r0, r0, #31
 8007eb0:	bf4c      	ite	mi
 8007eb2:	801a      	strhmi	r2, [r3, #0]
 8007eb4:	601a      	strpl	r2, [r3, #0]
 8007eb6:	e723      	b.n	8007d00 <__ssvfiscanf_r+0x60>
 8007eb8:	2305      	movs	r3, #5
 8007eba:	e792      	b.n	8007de2 <__ssvfiscanf_r+0x142>
 8007ebc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	4798      	blx	r3
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d090      	beq.n	8007dea <__ssvfiscanf_r+0x14a>
 8007ec8:	e7c8      	b.n	8007e5c <__ssvfiscanf_r+0x1bc>
 8007eca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007ecc:	3201      	adds	r2, #1
 8007ece:	9245      	str	r2, [sp, #276]	; 0x114
 8007ed0:	6862      	ldr	r2, [r4, #4]
 8007ed2:	3a01      	subs	r2, #1
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	6062      	str	r2, [r4, #4]
 8007ed8:	dd02      	ble.n	8007ee0 <__ssvfiscanf_r+0x240>
 8007eda:	3301      	adds	r3, #1
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	e787      	b.n	8007df0 <__ssvfiscanf_r+0x150>
 8007ee0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	4798      	blx	r3
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d081      	beq.n	8007df0 <__ssvfiscanf_r+0x150>
 8007eec:	e7b6      	b.n	8007e5c <__ssvfiscanf_r+0x1bc>
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	dc06      	bgt.n	8007f00 <__ssvfiscanf_r+0x260>
 8007ef2:	466b      	mov	r3, sp
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	a941      	add	r1, sp, #260	; 0x104
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f000 f885 	bl	8008008 <_scanf_i>
 8007efe:	e788      	b.n	8007e12 <__ssvfiscanf_r+0x172>
 8007f00:	4b0e      	ldr	r3, [pc, #56]	; (8007f3c <__ssvfiscanf_r+0x29c>)
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f43f aefc 	beq.w	8007d00 <__ssvfiscanf_r+0x60>
 8007f08:	466b      	mov	r3, sp
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	a941      	add	r1, sp, #260	; 0x104
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f7fc fdb8 	bl	8004a84 <_scanf_float>
 8007f14:	e77d      	b.n	8007e12 <__ssvfiscanf_r+0x172>
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007f1c:	bf18      	it	ne
 8007f1e:	f04f 30ff 	movne.w	r0, #4294967295
 8007f22:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007f2c:	e7f9      	b.n	8007f22 <__ssvfiscanf_r+0x282>
 8007f2e:	bf00      	nop
 8007f30:	08007bed 	.word	0x08007bed
 8007f34:	08007c67 	.word	0x08007c67
 8007f38:	08008752 	.word	0x08008752
 8007f3c:	08004a85 	.word	0x08004a85

08007f40 <_scanf_chars>:
 8007f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f44:	4615      	mov	r5, r2
 8007f46:	688a      	ldr	r2, [r1, #8]
 8007f48:	4680      	mov	r8, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	b932      	cbnz	r2, 8007f5c <_scanf_chars+0x1c>
 8007f4e:	698a      	ldr	r2, [r1, #24]
 8007f50:	2a00      	cmp	r2, #0
 8007f52:	bf14      	ite	ne
 8007f54:	f04f 32ff 	movne.w	r2, #4294967295
 8007f58:	2201      	moveq	r2, #1
 8007f5a:	608a      	str	r2, [r1, #8]
 8007f5c:	6822      	ldr	r2, [r4, #0]
 8007f5e:	06d1      	lsls	r1, r2, #27
 8007f60:	bf5f      	itttt	pl
 8007f62:	681a      	ldrpl	r2, [r3, #0]
 8007f64:	1d11      	addpl	r1, r2, #4
 8007f66:	6019      	strpl	r1, [r3, #0]
 8007f68:	6817      	ldrpl	r7, [r2, #0]
 8007f6a:	2600      	movs	r6, #0
 8007f6c:	69a3      	ldr	r3, [r4, #24]
 8007f6e:	b1db      	cbz	r3, 8007fa8 <_scanf_chars+0x68>
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d107      	bne.n	8007f84 <_scanf_chars+0x44>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	6962      	ldr	r2, [r4, #20]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	5cd3      	ldrb	r3, [r2, r3]
 8007f7c:	b9a3      	cbnz	r3, 8007fa8 <_scanf_chars+0x68>
 8007f7e:	2e00      	cmp	r6, #0
 8007f80:	d132      	bne.n	8007fe8 <_scanf_chars+0xa8>
 8007f82:	e006      	b.n	8007f92 <_scanf_chars+0x52>
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d007      	beq.n	8007f98 <_scanf_chars+0x58>
 8007f88:	2e00      	cmp	r6, #0
 8007f8a:	d12d      	bne.n	8007fe8 <_scanf_chars+0xa8>
 8007f8c:	69a3      	ldr	r3, [r4, #24]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d12a      	bne.n	8007fe8 <_scanf_chars+0xa8>
 8007f92:	2001      	movs	r0, #1
 8007f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f98:	f7ff f88c 	bl	80070b4 <__locale_ctype_ptr>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	4418      	add	r0, r3
 8007fa2:	7843      	ldrb	r3, [r0, #1]
 8007fa4:	071b      	lsls	r3, r3, #28
 8007fa6:	d4ef      	bmi.n	8007f88 <_scanf_chars+0x48>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	06da      	lsls	r2, r3, #27
 8007fac:	bf5e      	ittt	pl
 8007fae:	682b      	ldrpl	r3, [r5, #0]
 8007fb0:	781b      	ldrbpl	r3, [r3, #0]
 8007fb2:	703b      	strbpl	r3, [r7, #0]
 8007fb4:	682a      	ldr	r2, [r5, #0]
 8007fb6:	686b      	ldr	r3, [r5, #4]
 8007fb8:	f102 0201 	add.w	r2, r2, #1
 8007fbc:	602a      	str	r2, [r5, #0]
 8007fbe:	68a2      	ldr	r2, [r4, #8]
 8007fc0:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fc4:	f102 32ff 	add.w	r2, r2, #4294967295
 8007fc8:	606b      	str	r3, [r5, #4]
 8007fca:	f106 0601 	add.w	r6, r6, #1
 8007fce:	bf58      	it	pl
 8007fd0:	3701      	addpl	r7, #1
 8007fd2:	60a2      	str	r2, [r4, #8]
 8007fd4:	b142      	cbz	r2, 8007fe8 <_scanf_chars+0xa8>
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	dcc8      	bgt.n	8007f6c <_scanf_chars+0x2c>
 8007fda:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	4798      	blx	r3
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d0c1      	beq.n	8007f6c <_scanf_chars+0x2c>
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	f013 0310 	ands.w	r3, r3, #16
 8007fee:	d105      	bne.n	8007ffc <_scanf_chars+0xbc>
 8007ff0:	68e2      	ldr	r2, [r4, #12]
 8007ff2:	3201      	adds	r2, #1
 8007ff4:	60e2      	str	r2, [r4, #12]
 8007ff6:	69a2      	ldr	r2, [r4, #24]
 8007ff8:	b102      	cbz	r2, 8007ffc <_scanf_chars+0xbc>
 8007ffa:	703b      	strb	r3, [r7, #0]
 8007ffc:	6923      	ldr	r3, [r4, #16]
 8007ffe:	441e      	add	r6, r3
 8008000:	6126      	str	r6, [r4, #16]
 8008002:	2000      	movs	r0, #0
 8008004:	e7c6      	b.n	8007f94 <_scanf_chars+0x54>
	...

08008008 <_scanf_i>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	469a      	mov	sl, r3
 800800e:	4b74      	ldr	r3, [pc, #464]	; (80081e0 <_scanf_i+0x1d8>)
 8008010:	460c      	mov	r4, r1
 8008012:	4683      	mov	fp, r0
 8008014:	4616      	mov	r6, r2
 8008016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800801a:	b087      	sub	sp, #28
 800801c:	ab03      	add	r3, sp, #12
 800801e:	68a7      	ldr	r7, [r4, #8]
 8008020:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008024:	4b6f      	ldr	r3, [pc, #444]	; (80081e4 <_scanf_i+0x1dc>)
 8008026:	69a1      	ldr	r1, [r4, #24]
 8008028:	4a6f      	ldr	r2, [pc, #444]	; (80081e8 <_scanf_i+0x1e0>)
 800802a:	2903      	cmp	r1, #3
 800802c:	bf08      	it	eq
 800802e:	461a      	moveq	r2, r3
 8008030:	1e7b      	subs	r3, r7, #1
 8008032:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008036:	bf84      	itt	hi
 8008038:	f240 135d 	movwhi	r3, #349	; 0x15d
 800803c:	60a3      	strhi	r3, [r4, #8]
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	9200      	str	r2, [sp, #0]
 8008042:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008046:	bf88      	it	hi
 8008048:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800804c:	f104 091c 	add.w	r9, r4, #28
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	bf8c      	ite	hi
 8008054:	197f      	addhi	r7, r7, r5
 8008056:	2700      	movls	r7, #0
 8008058:	464b      	mov	r3, r9
 800805a:	f04f 0800 	mov.w	r8, #0
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	6831      	ldr	r1, [r6, #0]
 8008062:	ab03      	add	r3, sp, #12
 8008064:	2202      	movs	r2, #2
 8008066:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800806a:	7809      	ldrb	r1, [r1, #0]
 800806c:	f7f8 f8c0 	bl	80001f0 <memchr>
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	b330      	cbz	r0, 80080c2 <_scanf_i+0xba>
 8008074:	f1b8 0f01 	cmp.w	r8, #1
 8008078:	d15a      	bne.n	8008130 <_scanf_i+0x128>
 800807a:	6862      	ldr	r2, [r4, #4]
 800807c:	b92a      	cbnz	r2, 800808a <_scanf_i+0x82>
 800807e:	6822      	ldr	r2, [r4, #0]
 8008080:	2108      	movs	r1, #8
 8008082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008086:	6061      	str	r1, [r4, #4]
 8008088:	6022      	str	r2, [r4, #0]
 800808a:	6822      	ldr	r2, [r4, #0]
 800808c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008090:	6022      	str	r2, [r4, #0]
 8008092:	68a2      	ldr	r2, [r4, #8]
 8008094:	1e51      	subs	r1, r2, #1
 8008096:	60a1      	str	r1, [r4, #8]
 8008098:	b19a      	cbz	r2, 80080c2 <_scanf_i+0xba>
 800809a:	6832      	ldr	r2, [r6, #0]
 800809c:	1c51      	adds	r1, r2, #1
 800809e:	6031      	str	r1, [r6, #0]
 80080a0:	7812      	ldrb	r2, [r2, #0]
 80080a2:	701a      	strb	r2, [r3, #0]
 80080a4:	1c5d      	adds	r5, r3, #1
 80080a6:	6873      	ldr	r3, [r6, #4]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	6073      	str	r3, [r6, #4]
 80080ae:	dc07      	bgt.n	80080c0 <_scanf_i+0xb8>
 80080b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80080b4:	4631      	mov	r1, r6
 80080b6:	4658      	mov	r0, fp
 80080b8:	4798      	blx	r3
 80080ba:	2800      	cmp	r0, #0
 80080bc:	f040 8086 	bne.w	80081cc <_scanf_i+0x1c4>
 80080c0:	462b      	mov	r3, r5
 80080c2:	f108 0801 	add.w	r8, r8, #1
 80080c6:	f1b8 0f03 	cmp.w	r8, #3
 80080ca:	d1c8      	bne.n	800805e <_scanf_i+0x56>
 80080cc:	6862      	ldr	r2, [r4, #4]
 80080ce:	b90a      	cbnz	r2, 80080d4 <_scanf_i+0xcc>
 80080d0:	220a      	movs	r2, #10
 80080d2:	6062      	str	r2, [r4, #4]
 80080d4:	6862      	ldr	r2, [r4, #4]
 80080d6:	4945      	ldr	r1, [pc, #276]	; (80081ec <_scanf_i+0x1e4>)
 80080d8:	6960      	ldr	r0, [r4, #20]
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	1a89      	subs	r1, r1, r2
 80080de:	f000 f887 	bl	80081f0 <__sccl>
 80080e2:	9b01      	ldr	r3, [sp, #4]
 80080e4:	f04f 0800 	mov.w	r8, #0
 80080e8:	461d      	mov	r5, r3
 80080ea:	68a3      	ldr	r3, [r4, #8]
 80080ec:	6822      	ldr	r2, [r4, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d03a      	beq.n	8008168 <_scanf_i+0x160>
 80080f2:	6831      	ldr	r1, [r6, #0]
 80080f4:	6960      	ldr	r0, [r4, #20]
 80080f6:	f891 c000 	ldrb.w	ip, [r1]
 80080fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80080fe:	2800      	cmp	r0, #0
 8008100:	d032      	beq.n	8008168 <_scanf_i+0x160>
 8008102:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008106:	d121      	bne.n	800814c <_scanf_i+0x144>
 8008108:	0510      	lsls	r0, r2, #20
 800810a:	d51f      	bpl.n	800814c <_scanf_i+0x144>
 800810c:	f108 0801 	add.w	r8, r8, #1
 8008110:	b117      	cbz	r7, 8008118 <_scanf_i+0x110>
 8008112:	3301      	adds	r3, #1
 8008114:	3f01      	subs	r7, #1
 8008116:	60a3      	str	r3, [r4, #8]
 8008118:	6873      	ldr	r3, [r6, #4]
 800811a:	3b01      	subs	r3, #1
 800811c:	2b00      	cmp	r3, #0
 800811e:	6073      	str	r3, [r6, #4]
 8008120:	dd1b      	ble.n	800815a <_scanf_i+0x152>
 8008122:	6833      	ldr	r3, [r6, #0]
 8008124:	3301      	adds	r3, #1
 8008126:	6033      	str	r3, [r6, #0]
 8008128:	68a3      	ldr	r3, [r4, #8]
 800812a:	3b01      	subs	r3, #1
 800812c:	60a3      	str	r3, [r4, #8]
 800812e:	e7dc      	b.n	80080ea <_scanf_i+0xe2>
 8008130:	f1b8 0f02 	cmp.w	r8, #2
 8008134:	d1ad      	bne.n	8008092 <_scanf_i+0x8a>
 8008136:	6822      	ldr	r2, [r4, #0]
 8008138:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800813c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008140:	d1bf      	bne.n	80080c2 <_scanf_i+0xba>
 8008142:	2110      	movs	r1, #16
 8008144:	6061      	str	r1, [r4, #4]
 8008146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800814a:	e7a1      	b.n	8008090 <_scanf_i+0x88>
 800814c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008150:	6022      	str	r2, [r4, #0]
 8008152:	780b      	ldrb	r3, [r1, #0]
 8008154:	702b      	strb	r3, [r5, #0]
 8008156:	3501      	adds	r5, #1
 8008158:	e7de      	b.n	8008118 <_scanf_i+0x110>
 800815a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800815e:	4631      	mov	r1, r6
 8008160:	4658      	mov	r0, fp
 8008162:	4798      	blx	r3
 8008164:	2800      	cmp	r0, #0
 8008166:	d0df      	beq.n	8008128 <_scanf_i+0x120>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	05d9      	lsls	r1, r3, #23
 800816c:	d50c      	bpl.n	8008188 <_scanf_i+0x180>
 800816e:	454d      	cmp	r5, r9
 8008170:	d908      	bls.n	8008184 <_scanf_i+0x17c>
 8008172:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008176:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800817a:	4632      	mov	r2, r6
 800817c:	4658      	mov	r0, fp
 800817e:	4798      	blx	r3
 8008180:	1e6f      	subs	r7, r5, #1
 8008182:	463d      	mov	r5, r7
 8008184:	454d      	cmp	r5, r9
 8008186:	d029      	beq.n	80081dc <_scanf_i+0x1d4>
 8008188:	6822      	ldr	r2, [r4, #0]
 800818a:	f012 0210 	ands.w	r2, r2, #16
 800818e:	d113      	bne.n	80081b8 <_scanf_i+0x1b0>
 8008190:	702a      	strb	r2, [r5, #0]
 8008192:	6863      	ldr	r3, [r4, #4]
 8008194:	9e00      	ldr	r6, [sp, #0]
 8008196:	4649      	mov	r1, r9
 8008198:	4658      	mov	r0, fp
 800819a:	47b0      	blx	r6
 800819c:	f8da 3000 	ldr.w	r3, [sl]
 80081a0:	6821      	ldr	r1, [r4, #0]
 80081a2:	1d1a      	adds	r2, r3, #4
 80081a4:	f8ca 2000 	str.w	r2, [sl]
 80081a8:	f011 0f20 	tst.w	r1, #32
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	d010      	beq.n	80081d2 <_scanf_i+0x1ca>
 80081b0:	6018      	str	r0, [r3, #0]
 80081b2:	68e3      	ldr	r3, [r4, #12]
 80081b4:	3301      	adds	r3, #1
 80081b6:	60e3      	str	r3, [r4, #12]
 80081b8:	eba5 0509 	sub.w	r5, r5, r9
 80081bc:	44a8      	add	r8, r5
 80081be:	6925      	ldr	r5, [r4, #16]
 80081c0:	4445      	add	r5, r8
 80081c2:	6125      	str	r5, [r4, #16]
 80081c4:	2000      	movs	r0, #0
 80081c6:	b007      	add	sp, #28
 80081c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081cc:	f04f 0800 	mov.w	r8, #0
 80081d0:	e7ca      	b.n	8008168 <_scanf_i+0x160>
 80081d2:	07ca      	lsls	r2, r1, #31
 80081d4:	bf4c      	ite	mi
 80081d6:	8018      	strhmi	r0, [r3, #0]
 80081d8:	6018      	strpl	r0, [r3, #0]
 80081da:	e7ea      	b.n	80081b2 <_scanf_i+0x1aa>
 80081dc:	2001      	movs	r0, #1
 80081de:	e7f2      	b.n	80081c6 <_scanf_i+0x1be>
 80081e0:	08008580 	.word	0x08008580
 80081e4:	08005d3d 	.word	0x08005d3d
 80081e8:	0800836d 	.word	0x0800836d
 80081ec:	0800876d 	.word	0x0800876d

080081f0 <__sccl>:
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	780b      	ldrb	r3, [r1, #0]
 80081f4:	2b5e      	cmp	r3, #94	; 0x5e
 80081f6:	bf13      	iteet	ne
 80081f8:	1c4a      	addne	r2, r1, #1
 80081fa:	1c8a      	addeq	r2, r1, #2
 80081fc:	784b      	ldrbeq	r3, [r1, #1]
 80081fe:	2100      	movne	r1, #0
 8008200:	bf08      	it	eq
 8008202:	2101      	moveq	r1, #1
 8008204:	1e44      	subs	r4, r0, #1
 8008206:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800820a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800820e:	42ac      	cmp	r4, r5
 8008210:	d1fb      	bne.n	800820a <__sccl+0x1a>
 8008212:	b913      	cbnz	r3, 800821a <__sccl+0x2a>
 8008214:	3a01      	subs	r2, #1
 8008216:	4610      	mov	r0, r2
 8008218:	bd70      	pop	{r4, r5, r6, pc}
 800821a:	f081 0401 	eor.w	r4, r1, #1
 800821e:	54c4      	strb	r4, [r0, r3]
 8008220:	1c51      	adds	r1, r2, #1
 8008222:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8008226:	2d2d      	cmp	r5, #45	; 0x2d
 8008228:	f101 36ff 	add.w	r6, r1, #4294967295
 800822c:	460a      	mov	r2, r1
 800822e:	d006      	beq.n	800823e <__sccl+0x4e>
 8008230:	2d5d      	cmp	r5, #93	; 0x5d
 8008232:	d0f0      	beq.n	8008216 <__sccl+0x26>
 8008234:	b90d      	cbnz	r5, 800823a <__sccl+0x4a>
 8008236:	4632      	mov	r2, r6
 8008238:	e7ed      	b.n	8008216 <__sccl+0x26>
 800823a:	462b      	mov	r3, r5
 800823c:	e7ef      	b.n	800821e <__sccl+0x2e>
 800823e:	780e      	ldrb	r6, [r1, #0]
 8008240:	2e5d      	cmp	r6, #93	; 0x5d
 8008242:	d0fa      	beq.n	800823a <__sccl+0x4a>
 8008244:	42b3      	cmp	r3, r6
 8008246:	dcf8      	bgt.n	800823a <__sccl+0x4a>
 8008248:	3301      	adds	r3, #1
 800824a:	429e      	cmp	r6, r3
 800824c:	54c4      	strb	r4, [r0, r3]
 800824e:	dcfb      	bgt.n	8008248 <__sccl+0x58>
 8008250:	3102      	adds	r1, #2
 8008252:	e7e6      	b.n	8008222 <__sccl+0x32>

08008254 <strncmp>:
 8008254:	b510      	push	{r4, lr}
 8008256:	b16a      	cbz	r2, 8008274 <strncmp+0x20>
 8008258:	3901      	subs	r1, #1
 800825a:	1884      	adds	r4, r0, r2
 800825c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008260:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008264:	4293      	cmp	r3, r2
 8008266:	d103      	bne.n	8008270 <strncmp+0x1c>
 8008268:	42a0      	cmp	r0, r4
 800826a:	d001      	beq.n	8008270 <strncmp+0x1c>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f5      	bne.n	800825c <strncmp+0x8>
 8008270:	1a98      	subs	r0, r3, r2
 8008272:	bd10      	pop	{r4, pc}
 8008274:	4610      	mov	r0, r2
 8008276:	e7fc      	b.n	8008272 <strncmp+0x1e>

08008278 <_strtoul_l.isra.0>:
 8008278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	4680      	mov	r8, r0
 800827e:	4689      	mov	r9, r1
 8008280:	4692      	mov	sl, r2
 8008282:	461e      	mov	r6, r3
 8008284:	460f      	mov	r7, r1
 8008286:	463d      	mov	r5, r7
 8008288:	9808      	ldr	r0, [sp, #32]
 800828a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800828e:	f7fe ff0d 	bl	80070ac <__locale_ctype_ptr_l>
 8008292:	4420      	add	r0, r4
 8008294:	7843      	ldrb	r3, [r0, #1]
 8008296:	f013 0308 	ands.w	r3, r3, #8
 800829a:	d130      	bne.n	80082fe <_strtoul_l.isra.0+0x86>
 800829c:	2c2d      	cmp	r4, #45	; 0x2d
 800829e:	d130      	bne.n	8008302 <_strtoul_l.isra.0+0x8a>
 80082a0:	787c      	ldrb	r4, [r7, #1]
 80082a2:	1cbd      	adds	r5, r7, #2
 80082a4:	2101      	movs	r1, #1
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	d05c      	beq.n	8008364 <_strtoul_l.isra.0+0xec>
 80082aa:	2e10      	cmp	r6, #16
 80082ac:	d109      	bne.n	80082c2 <_strtoul_l.isra.0+0x4a>
 80082ae:	2c30      	cmp	r4, #48	; 0x30
 80082b0:	d107      	bne.n	80082c2 <_strtoul_l.isra.0+0x4a>
 80082b2:	782b      	ldrb	r3, [r5, #0]
 80082b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80082b8:	2b58      	cmp	r3, #88	; 0x58
 80082ba:	d14e      	bne.n	800835a <_strtoul_l.isra.0+0xe2>
 80082bc:	786c      	ldrb	r4, [r5, #1]
 80082be:	2610      	movs	r6, #16
 80082c0:	3502      	adds	r5, #2
 80082c2:	f04f 32ff 	mov.w	r2, #4294967295
 80082c6:	2300      	movs	r3, #0
 80082c8:	fbb2 f2f6 	udiv	r2, r2, r6
 80082cc:	fb06 fc02 	mul.w	ip, r6, r2
 80082d0:	ea6f 0c0c 	mvn.w	ip, ip
 80082d4:	4618      	mov	r0, r3
 80082d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80082da:	2f09      	cmp	r7, #9
 80082dc:	d817      	bhi.n	800830e <_strtoul_l.isra.0+0x96>
 80082de:	463c      	mov	r4, r7
 80082e0:	42a6      	cmp	r6, r4
 80082e2:	dd23      	ble.n	800832c <_strtoul_l.isra.0+0xb4>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	db1e      	blt.n	8008326 <_strtoul_l.isra.0+0xae>
 80082e8:	4282      	cmp	r2, r0
 80082ea:	d31c      	bcc.n	8008326 <_strtoul_l.isra.0+0xae>
 80082ec:	d101      	bne.n	80082f2 <_strtoul_l.isra.0+0x7a>
 80082ee:	45a4      	cmp	ip, r4
 80082f0:	db19      	blt.n	8008326 <_strtoul_l.isra.0+0xae>
 80082f2:	fb00 4006 	mla	r0, r0, r6, r4
 80082f6:	2301      	movs	r3, #1
 80082f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082fc:	e7eb      	b.n	80082d6 <_strtoul_l.isra.0+0x5e>
 80082fe:	462f      	mov	r7, r5
 8008300:	e7c1      	b.n	8008286 <_strtoul_l.isra.0+0xe>
 8008302:	2c2b      	cmp	r4, #43	; 0x2b
 8008304:	bf04      	itt	eq
 8008306:	1cbd      	addeq	r5, r7, #2
 8008308:	787c      	ldrbeq	r4, [r7, #1]
 800830a:	4619      	mov	r1, r3
 800830c:	e7cb      	b.n	80082a6 <_strtoul_l.isra.0+0x2e>
 800830e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008312:	2f19      	cmp	r7, #25
 8008314:	d801      	bhi.n	800831a <_strtoul_l.isra.0+0xa2>
 8008316:	3c37      	subs	r4, #55	; 0x37
 8008318:	e7e2      	b.n	80082e0 <_strtoul_l.isra.0+0x68>
 800831a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800831e:	2f19      	cmp	r7, #25
 8008320:	d804      	bhi.n	800832c <_strtoul_l.isra.0+0xb4>
 8008322:	3c57      	subs	r4, #87	; 0x57
 8008324:	e7dc      	b.n	80082e0 <_strtoul_l.isra.0+0x68>
 8008326:	f04f 33ff 	mov.w	r3, #4294967295
 800832a:	e7e5      	b.n	80082f8 <_strtoul_l.isra.0+0x80>
 800832c:	2b00      	cmp	r3, #0
 800832e:	da09      	bge.n	8008344 <_strtoul_l.isra.0+0xcc>
 8008330:	2322      	movs	r3, #34	; 0x22
 8008332:	f8c8 3000 	str.w	r3, [r8]
 8008336:	f04f 30ff 	mov.w	r0, #4294967295
 800833a:	f1ba 0f00 	cmp.w	sl, #0
 800833e:	d107      	bne.n	8008350 <_strtoul_l.isra.0+0xd8>
 8008340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008344:	b101      	cbz	r1, 8008348 <_strtoul_l.isra.0+0xd0>
 8008346:	4240      	negs	r0, r0
 8008348:	f1ba 0f00 	cmp.w	sl, #0
 800834c:	d0f8      	beq.n	8008340 <_strtoul_l.isra.0+0xc8>
 800834e:	b10b      	cbz	r3, 8008354 <_strtoul_l.isra.0+0xdc>
 8008350:	f105 39ff 	add.w	r9, r5, #4294967295
 8008354:	f8ca 9000 	str.w	r9, [sl]
 8008358:	e7f2      	b.n	8008340 <_strtoul_l.isra.0+0xc8>
 800835a:	2430      	movs	r4, #48	; 0x30
 800835c:	2e00      	cmp	r6, #0
 800835e:	d1b0      	bne.n	80082c2 <_strtoul_l.isra.0+0x4a>
 8008360:	2608      	movs	r6, #8
 8008362:	e7ae      	b.n	80082c2 <_strtoul_l.isra.0+0x4a>
 8008364:	2c30      	cmp	r4, #48	; 0x30
 8008366:	d0a4      	beq.n	80082b2 <_strtoul_l.isra.0+0x3a>
 8008368:	260a      	movs	r6, #10
 800836a:	e7aa      	b.n	80082c2 <_strtoul_l.isra.0+0x4a>

0800836c <_strtoul_r>:
 800836c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800836e:	4c06      	ldr	r4, [pc, #24]	; (8008388 <_strtoul_r+0x1c>)
 8008370:	4d06      	ldr	r5, [pc, #24]	; (800838c <_strtoul_r+0x20>)
 8008372:	6824      	ldr	r4, [r4, #0]
 8008374:	6a24      	ldr	r4, [r4, #32]
 8008376:	2c00      	cmp	r4, #0
 8008378:	bf08      	it	eq
 800837a:	462c      	moveq	r4, r5
 800837c:	9400      	str	r4, [sp, #0]
 800837e:	f7ff ff7b 	bl	8008278 <_strtoul_l.isra.0>
 8008382:	b003      	add	sp, #12
 8008384:	bd30      	pop	{r4, r5, pc}
 8008386:	bf00      	nop
 8008388:	2000000c 	.word	0x2000000c
 800838c:	20000070 	.word	0x20000070

08008390 <__submore>:
 8008390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008394:	460c      	mov	r4, r1
 8008396:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800839c:	4299      	cmp	r1, r3
 800839e:	d11d      	bne.n	80083dc <__submore+0x4c>
 80083a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083a4:	f7fb feb8 	bl	8004118 <_malloc_r>
 80083a8:	b918      	cbnz	r0, 80083b2 <__submore+0x22>
 80083aa:	f04f 30ff 	mov.w	r0, #4294967295
 80083ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80083b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80083bc:	6360      	str	r0, [r4, #52]	; 0x34
 80083be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80083c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80083c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80083ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80083ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80083d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80083d6:	6020      	str	r0, [r4, #0]
 80083d8:	2000      	movs	r0, #0
 80083da:	e7e8      	b.n	80083ae <__submore+0x1e>
 80083dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80083de:	0077      	lsls	r7, r6, #1
 80083e0:	463a      	mov	r2, r7
 80083e2:	f000 f835 	bl	8008450 <_realloc_r>
 80083e6:	4605      	mov	r5, r0
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d0de      	beq.n	80083aa <__submore+0x1a>
 80083ec:	eb00 0806 	add.w	r8, r0, r6
 80083f0:	4601      	mov	r1, r0
 80083f2:	4632      	mov	r2, r6
 80083f4:	4640      	mov	r0, r8
 80083f6:	f7fe fe8d 	bl	8007114 <memcpy>
 80083fa:	f8c4 8000 	str.w	r8, [r4]
 80083fe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008402:	e7e9      	b.n	80083d8 <__submore+0x48>

08008404 <__ascii_wctomb>:
 8008404:	b149      	cbz	r1, 800841a <__ascii_wctomb+0x16>
 8008406:	2aff      	cmp	r2, #255	; 0xff
 8008408:	bf85      	ittet	hi
 800840a:	238a      	movhi	r3, #138	; 0x8a
 800840c:	6003      	strhi	r3, [r0, #0]
 800840e:	700a      	strbls	r2, [r1, #0]
 8008410:	f04f 30ff 	movhi.w	r0, #4294967295
 8008414:	bf98      	it	ls
 8008416:	2001      	movls	r0, #1
 8008418:	4770      	bx	lr
 800841a:	4608      	mov	r0, r1
 800841c:	4770      	bx	lr

0800841e <memmove>:
 800841e:	4288      	cmp	r0, r1
 8008420:	b510      	push	{r4, lr}
 8008422:	eb01 0302 	add.w	r3, r1, r2
 8008426:	d807      	bhi.n	8008438 <memmove+0x1a>
 8008428:	1e42      	subs	r2, r0, #1
 800842a:	4299      	cmp	r1, r3
 800842c:	d00a      	beq.n	8008444 <memmove+0x26>
 800842e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008432:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008436:	e7f8      	b.n	800842a <memmove+0xc>
 8008438:	4283      	cmp	r3, r0
 800843a:	d9f5      	bls.n	8008428 <memmove+0xa>
 800843c:	1881      	adds	r1, r0, r2
 800843e:	1ad2      	subs	r2, r2, r3
 8008440:	42d3      	cmn	r3, r2
 8008442:	d100      	bne.n	8008446 <memmove+0x28>
 8008444:	bd10      	pop	{r4, pc}
 8008446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800844a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800844e:	e7f7      	b.n	8008440 <memmove+0x22>

08008450 <_realloc_r>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	4607      	mov	r7, r0
 8008454:	4614      	mov	r4, r2
 8008456:	460e      	mov	r6, r1
 8008458:	b921      	cbnz	r1, 8008464 <_realloc_r+0x14>
 800845a:	4611      	mov	r1, r2
 800845c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008460:	f7fb be5a 	b.w	8004118 <_malloc_r>
 8008464:	b922      	cbnz	r2, 8008470 <_realloc_r+0x20>
 8008466:	f7fb fe09 	bl	800407c <_free_r>
 800846a:	4625      	mov	r5, r4
 800846c:	4628      	mov	r0, r5
 800846e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008470:	f000 f814 	bl	800849c <_malloc_usable_size_r>
 8008474:	42a0      	cmp	r0, r4
 8008476:	d20f      	bcs.n	8008498 <_realloc_r+0x48>
 8008478:	4621      	mov	r1, r4
 800847a:	4638      	mov	r0, r7
 800847c:	f7fb fe4c 	bl	8004118 <_malloc_r>
 8008480:	4605      	mov	r5, r0
 8008482:	2800      	cmp	r0, #0
 8008484:	d0f2      	beq.n	800846c <_realloc_r+0x1c>
 8008486:	4631      	mov	r1, r6
 8008488:	4622      	mov	r2, r4
 800848a:	f7fe fe43 	bl	8007114 <memcpy>
 800848e:	4631      	mov	r1, r6
 8008490:	4638      	mov	r0, r7
 8008492:	f7fb fdf3 	bl	800407c <_free_r>
 8008496:	e7e9      	b.n	800846c <_realloc_r+0x1c>
 8008498:	4635      	mov	r5, r6
 800849a:	e7e7      	b.n	800846c <_realloc_r+0x1c>

0800849c <_malloc_usable_size_r>:
 800849c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084a0:	1f18      	subs	r0, r3, #4
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bfbc      	itt	lt
 80084a6:	580b      	ldrlt	r3, [r1, r0]
 80084a8:	18c0      	addlt	r0, r0, r3
 80084aa:	4770      	bx	lr

080084ac <_init>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr

080084b8 <_fini>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	bf00      	nop
 80084bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084be:	bc08      	pop	{r3}
 80084c0:	469e      	mov	lr, r3
 80084c2:	4770      	bx	lr
